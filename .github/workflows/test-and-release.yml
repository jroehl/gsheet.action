name: 'Test and release (preview) version'
on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'ci'
        run: npm ci

      - name: 'build'
        run: npm run build

      - name: 'test'
        run: npm run test
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
          TEST_SPREADSHEET_ID: ${{ secrets.TEST_SPREADSHEET_ID }}

      - name: 'check for uncommitted changes'
        # Ensure no changes, but ignore node_modules dir since dev/fresh ci deps installed.
        run: |
          git diff --exit-code --stat -- . ':!node_modules' \
          || (echo "##[error] found changed files after build. please 'npm run build && npm run format'" \
                    "and check in all changes" \
              && exit 1)

  auto-approve:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: hmarr/auto-approve-action@v2.0.0
        if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'

  release:
    runs-on: ubuntu-latest
    needs: test
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      BRANCH_RELEASE: release
      BRANCH_PREVIEW: ${{ format('preview/{0}', github.head_ref) }}
      MERGE_RELEASE: master
      MERGE_PREVIEW: ${{ github.head_ref }}
      ACTION_RELEASE: ${{ format('{0}@release', github.repository) }}
      ACTION_PREVIEW: ${{ format('{0}@preview/{1}', github.repository, github.head_ref) }}
      IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2

      - name: set branch name
        run: |
          if [[ "${IS_PULL_REQUEST}" == "true" ]]; then 
            BRANCH="${BRANCH_PREVIEW}"
            MERGE_BRANCH="${MERGE_PREVIEW}"
            ACTION="${ACTION_PREVIEW}"
          else
            BRANCH="${BRANCH_RELEASE}"
            MERGE_BRANCH="${MERGE_RELEASE}"
            ACTION="${ACTION_RELEASE}"
          fi

          echo "ACTION=${ACTION}" >> ${GITHUB_ENV}
          echo "BRANCH=${BRANCH}" >> ${GITHUB_ENV}
          echo "MERGE_BRANCH=${MERGE_BRANCH}" >> ${GITHUB_ENV}

      - name: setup ssh keys and known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: setup git
        run: |
          git config --global user.email "mail@hinterland.dev"
          git config --global user.name "jroehl"
          git remote set-url origin git@github.com:${{ github.repository }}.git
          git fetch origin --tags --force --prune

      - name: create or checkout branch
        run: |
          git checkout ${BRANCH} || git checkout -b ${BRANCH}
          git merge -X theirs origin/${MERGE_BRANCH} --allow-unrelated-histories

      - name: install and build production dependencies
        run: npm ci --production && npm run build

      - name: replace placeholders in e2e action
        env:
          STATUS_URL: ${{ format('https://api.github.com/repos/{0}/statuses/', github.repository) }}
        run: |
          sed -i "s|'{{ USES_PREVIEW_VERSION }}'|${ACTION}|g" .github/workflows/e2e.yml
          last_commit_id=$(git log --format="%H" -n 1 origin/${MERGE_BRANCH})
          sed -i "s|STATUS_URL:.*|STATUS_URL: ${STATUS_URL}${last_commit_id}|g" .github/workflows/e2e.yml

      - name: add dependencies and build
        run: |
          sed -i '/node_modules/d' .gitignore # Remove node_modules from .gitignore
          sed -i '/lib/d' .gitignore # Remove lib from .gitignore
          git add -A
          last_commit_msg=$(git show -s --format=%s origin/${MERGE_BRANCH})
          git commit -m "${last_commit_msg} <with-dependencies>"

      - name: push
        run: |
          git push origin ${BRANCH} --force

      - name: comment in pull request
        if: ${{ env.IS_PULL_REQUEST == 'true' }}
        env:
          ISSUE_URL: ${{ format('{0}/comments', github.event.pull_request._links.issue.href) }}
        run: |
          comment="Preview can be used by specifying preview branch in action definition:\\n\`\`\`yaml\\n...\\nuses: ${ACTION}\\n...\\n\`\`\`"
          existing_comment=$(curl -s ${ISSUE_URL} | jq -r --raw-output ".[] | select(.body == \"${comment}\")")
          if [[ -z "${existing_comment}" ]]; then
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -X POST -d "{\"body\": \"${comment}\"}" ${ISSUE_URL}
          fi

  cleanup:
    if: always()
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: cleanup branches
        run: |
          git fetch --prune
          for preview_branch in $(git branch -r --list "*/preview/*"); do
            feature_branch=$(git branch -r --list "${preview_branch/\/preview/}")
            if [[ -z "$feature_branch" ]]; then
              echo "Feature branch for preview \"$preview_branch\" does not exist, deleting preview branch"
              git push origin --delete "${preview_branch/origin\//}"
            fi
          done
