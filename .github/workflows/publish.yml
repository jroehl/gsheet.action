name: 'Publish version'
on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: 'ci'
        run: npm ci

      - name: 'build'
        run: npm run build

      - name: 'test'
        run: npm run test
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
          TEST_SPREADSHEET_ID: ${{ secrets.TEST_SPREADSHEET_ID }}

      - name: 'check for uncommitted changes'
        # Ensure no changes, but ignore node_modules dir since dev/fresh ci deps installed.
        run: |
          git diff --exit-code --stat -- . ':!node_modules' \
          || (echo "##[error] found changed files after build. please 'npm run build && npm run format'" \
                   "and check in all changes" \
              && exit 1)

  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v1

      - name: 'setup git'
        env:
          URL: ${{ format('https://jroehl:{0}@github.com/{1}.git', secrets.ACCESS_TOKEN, github.repository) }}
        run: |
          git config --global user.email "mail@johannroehl.de"
          git config --global user.name "jroehl"
          git remote rm origin
          git remote add origin $URL

      - name: 'merge branch'
        run: |
          git fetch --prune
          git checkout release || git checkout -b release
          git merge -X theirs origin/master
          git push origin release --force

      - name: 'install'
        run: rm -rf node_modules && npm install --production

      - name: 'build'
        run: npm run build

      - name: 'add dependencies'
        run: |
          sed -i '/node_modules/d' .gitignore # remove node_modules from .gitignore
          sed -i '/lib/d' .gitignore # remove lib from .gitignore
          git add -A
          git commit -m "<with-dependencies>" || echo "skipped commit"
          git push origin release

      - name: 'semantic-release'
        run: |
          npm run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'cleanup branches'
        run: |
          git fetch --prune
          for preview_branch in $(git branch -r --list "*/preview/*"); do
            feature_branch=$(git branch -r --list "${preview_branch/\/preview/}")
            if [[ -z "$feature_branch" ]]; then
              echo "Feature branch for preview \"$preview_branch\" does not exist, deleting preview branch"
              git push origin --delete "${preview_branch/origin\//}"
            else
              echo "Feature branch \"$feature_branch\" for preview \"$preview_branch\" exists, nothing to do"
            fi
          done
