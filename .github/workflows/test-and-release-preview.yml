name: 'Test and release preview version'
on: pull_request

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/test

  release-preview:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2

      - name: 'setup git'
        env:
          URL: ${{ format('https://jroehl:{0}@github.com/{1}.git', secrets.ACCESS_TOKEN, github.repository) }}
        run: |
          git config --global user.email "mail@johannroehl.de"
          git config --global user.name "jroehl"
          git remote rm origin
          git remote add origin $URL

      - name: 'temp branch'
        env:
          BRANCH: ${{ format('preview/{0}', github.head_ref) }}
        run: git checkout $BRANCH || git checkout -b $BRANCH

      - name: 'cleanup node_modules'
        run: rm -rf node_modules

      - name: 'install'
        run: npm install --production

      - name: 'build'
        run: npm run build

      - name: 'add dependencies'
        run: |
          sed -i '/node_modules/d' .gitignore # Bash command that removes node_modules from .gitignore
          sed -i '/lib/d' .gitignore # Bash command that removes lib from .gitignore
          git add -A
          git commit -m "$(git show -s --format=%s) <with-dependencies>"

      - name: 'push'
        env:
          BRANCH: ${{ format('preview/{0}', github.head_ref) }}
        run: |
          git push origin $BRANCH --force

      - name: 'comment'
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ISSUE_URL: ${{ format('{0}/comments', github.event.pull_request._links.issue.href) }}
          ACTION: ${{ format('{0}@preview/{1}', github.repository, github.head_ref) }}
        run: |
          COMMENT="Preview can be used by specifying preview branch in action definition:\\n\`\`\`yaml\\n...\\nuses: $ACTION\\n...\\n\`\`\`"
          EXISTING_COMMENT=$(curl -s $ISSUE_URL | jq -r --raw-output ".[] | select(.body == \"$COMMENT\")")
          if [[ -z "$EXISTING_COMMENT" ]]; then
            curl -s -H "Authorization: token $ACCESS_TOKEN" -X POST -d "{\"body\": \"$COMMENT\"}" $ISSUE_URL
          else
            echo "Comment already exists, nothing to do!"
          fi

      - name: 'cleanup branches'
        run: |
          git fetch --prune
          for preview_branch in $(git branch -r --list "*/preview/*"); do
            feature_branch=$(git branch -r --list "${preview_branch/\/preview/}")
            if [[ -z "$feature_branch" ]]; then
              echo "Feature branch for preview \"$preview_branch\" does not exist, deleting preview branch"
              git push origin --delete "${preview_branch/origin\//}"
            else
              echo "Feature branch \"$feature_branch\" for preview \"$preview_branch\" exists, nothing to do"
            fi
          done
  # e2e:
  #   runs-on: ubuntu-latest
  #   needs: release-preview
  #   steps:
  #     - id: 'run_worksheet_tests'
  #       uses: ${{ format('{0}@preview/{1}', github.repository, github.head_ref) }}
  #       with:
  #         spreadsheetId: ${{ secrets.TEST_SPREADSHEET_ID }}
  #         commands: | # list of commands, specified as a valid JSON string
  #           [
  #             { "command": "addWorksheet", "args": { "worksheetTitle": "<gsheet.action_e2e-tests>" }},
  #             { "command": "updateData", "args": { "data": [["A1", "A2", "A3"]] }},
  #             { "command": "appendData", "args": { "data": [["B1", "B2", "B3"]], "minCol": 1 }},
  #             { "command": "appendData", "args": { "data": [["C2", "C3", "C4"]], "minCol": 2 }},
  #             { "command": "getData", "args": { "minCol": 1 } },
  #             { "command": "getData", "args": { "range": "<gsheet.action_e2e-tests>!A2:B3" } },
  #             { "command": "removeWorksheet", "args": { "worksheetTitle": "<gsheet.action_e2e-tests>" }}
  #           ]
  #       env:
  #         GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
  #         GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
  #     - name: dump results
  #       env:
  #         #  the output of the action can be found in ${{ steps.run_worksheet_tests.outputs.results }}
  #         RESULTS: ${{ steps.run_worksheet_tests.outputs.results }}
  #       run: |
  #         function assert {
  #           local filter=${1}
  #           local comp=${2}
  #           local expected=${3}
  #           local result=$(echo "${RESULTS}" | jq --raw-output "${filter}")
  #           local msg="assert ${filter} ${comp} ${expected}"
  #           local success=${4:-"‚úÖ ${msg}"}
  #           local failure=${5:-"‚ùå ${msg} - (\"${result}\")"}
  #           test ${result} ${comp} ${expected} && (printf "    %s\n" "${success}") || (printf "    %s\n" "${failure}" && exit 1)
  #         }
  #         function echo_test_run {
  #           local cmd=$(echo "${RESULTS}" | jq ".results[${1}].command.func")
  #           echo "${cmd} (${1})"
  #         }
  #         echo "üß™ Running tests"
  #         assert ".results | length" "-eq" "7"
  #         echo_test_run 0
  #         assert ".results[0].result.properties.title" "=" "<gsheet.action_e2e-tests>"
  #         echo_test_run 1
  #         assert ".results[1].command.kwargs[0][0][0]" "=" "A1"
  #         assert ".results[1].command.kwargs[0][0][1]" "=" "A2"
  #         assert ".results[1].command.kwargs[0][0][2]" "=" "A3"
  #         echo_test_run 2
  #         assert ".results[2].command.kwargs[0][0][0]" "=" "B1"
  #         assert ".results[2].command.kwargs[0][0][1]" "=" "B2"
  #         assert ".results[2].command.kwargs[0][0][2]" "=" "B3"
  #         echo_test_run 3
  #         assert ".results[3].command.kwargs[1].minCol" "-eq" "2"
  #         assert ".results[3].command.kwargs[1].minRow" "-eq" "3"
  #         echo_test_run 4
  #         assert ".results[4].result.rawData[0][0]" "=" "A1"
  #         assert ".results[4].result.rawData[0][1]" "=" "A2"
  #         assert ".results[4].result.rawData[0][2]" "=" "A3"
  #         assert ".results[4].result.rawData[0][3]" "=" ""
  #         assert ".results[4].result.rawData[1][0]" "=" "B1"
  #         assert ".results[4].result.rawData[1][1]" "=" "B2"
  #         assert ".results[4].result.rawData[1][2]" "=" "B3"
  #         assert ".results[4].result.rawData[1][3]" "=" ""
  #         assert ".results[4].result.rawData[2][0]" "=" ""
  #         assert ".results[4].result.rawData[2][1]" "=" "C2"
  #         assert ".results[4].result.rawData[2][2]" "=" "C3"
  #         assert ".results[4].result.rawData[2][3]" "=" "C4"
  #         assert ".results[4].result.header[0]" "=" "(A)"
  #         assert ".results[4].result.header[1]" "=" "(B)"
  #         assert ".results[4].result.header[2]" "=" "(C)"
  #         assert ".results[4].result.header[3]" "=" "(D)"
  #         echo_test_run 5
  #         assert ".results[5].result.rawData[0][0]" "=" "B1"
  #         assert ".results[5].result.rawData[0][1]" "=" "B2"
  #         assert ".results[5].result.rawData[1][0]" "=" "" #empty string
  #         assert ".results[5].result.rawData[1][1]" "=" "C2"
  #         echo "üéâ Tests successful"
