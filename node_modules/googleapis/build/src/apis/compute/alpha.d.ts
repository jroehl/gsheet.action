/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OAuth2Client, JWT, UserRefreshClient } from 'google-auth-library';
import { GoogleConfigurable, MethodOptions, GlobalOptions, BodyResponseCallback, APIRequestContext } from 'googleapis-common';
import { GaxiosPromise } from 'gaxios';
export declare namespace compute_alpha {
    interface Options extends GlobalOptions {
        version: 'alpha';
    }
    interface StandardParameters {
        /**
         * Data format for the response.
         */
        alt?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Deprecated. Please use quotaUser instead.
         */
        userIp?: string;
    }
    /**
     * Compute Engine API
     *
     * Creates and runs virtual machines on Google Cloud Platform.
     *
     * @example
     * const {google} = require('googleapis');
     * const compute = google.compute('alpha');
     *
     * @namespace compute
     * @type {Function}
     * @version alpha
     * @variation alpha
     * @param {object=} options Options for Compute
     */
    class Compute {
        context: APIRequestContext;
        acceleratorTypes: Resource$Acceleratortypes;
        addresses: Resource$Addresses;
        autoscalers: Resource$Autoscalers;
        backendBuckets: Resource$Backendbuckets;
        backendServices: Resource$Backendservices;
        disks: Resource$Disks;
        diskTypes: Resource$Disktypes;
        externalVpnGateways: Resource$Externalvpngateways;
        firewalls: Resource$Firewalls;
        forwardingRules: Resource$Forwardingrules;
        globalAddresses: Resource$Globaladdresses;
        globalForwardingRules: Resource$Globalforwardingrules;
        globalNetworkEndpointGroups: Resource$Globalnetworkendpointgroups;
        globalOperations: Resource$Globaloperations;
        globalOrganizationOperations: Resource$Globalorganizationoperations;
        healthChecks: Resource$Healthchecks;
        httpHealthChecks: Resource$Httphealthchecks;
        httpsHealthChecks: Resource$Httpshealthchecks;
        images: Resource$Images;
        instanceGroupManagers: Resource$Instancegroupmanagers;
        instanceGroups: Resource$Instancegroups;
        instances: Resource$Instances;
        instanceTemplates: Resource$Instancetemplates;
        interconnectAttachments: Resource$Interconnectattachments;
        interconnectLocations: Resource$Interconnectlocations;
        interconnects: Resource$Interconnects;
        licenseCodes: Resource$Licensecodes;
        licenses: Resource$Licenses;
        machineImages: Resource$Machineimages;
        machineTypes: Resource$Machinetypes;
        networkEndpointGroups: Resource$Networkendpointgroups;
        networks: Resource$Networks;
        nodeGroups: Resource$Nodegroups;
        nodeTemplates: Resource$Nodetemplates;
        nodeTypes: Resource$Nodetypes;
        organizationSecurityPolicies: Resource$Organizationsecuritypolicies;
        packetMirrorings: Resource$Packetmirrorings;
        projects: Resource$Projects;
        regionAutoscalers: Resource$Regionautoscalers;
        regionBackendServices: Resource$Regionbackendservices;
        regionCommitments: Resource$Regioncommitments;
        regionDisks: Resource$Regiondisks;
        regionDiskTypes: Resource$Regiondisktypes;
        regionHealthChecks: Resource$Regionhealthchecks;
        regionHealthCheckServices: Resource$Regionhealthcheckservices;
        regionInstanceGroupManagers: Resource$Regioninstancegroupmanagers;
        regionInstanceGroups: Resource$Regioninstancegroups;
        regionNotificationEndpoints: Resource$Regionnotificationendpoints;
        regionOperations: Resource$Regionoperations;
        regions: Resource$Regions;
        regionSslCertificates: Resource$Regionsslcertificates;
        regionTargetHttpProxies: Resource$Regiontargethttpproxies;
        regionTargetHttpsProxies: Resource$Regiontargethttpsproxies;
        regionUrlMaps: Resource$Regionurlmaps;
        reservations: Resource$Reservations;
        resourcePolicies: Resource$Resourcepolicies;
        routers: Resource$Routers;
        routes: Resource$Routes;
        securityPolicies: Resource$Securitypolicies;
        snapshots: Resource$Snapshots;
        sslCertificates: Resource$Sslcertificates;
        sslPolicies: Resource$Sslpolicies;
        subnetworks: Resource$Subnetworks;
        targetHttpProxies: Resource$Targethttpproxies;
        targetHttpsProxies: Resource$Targethttpsproxies;
        targetInstances: Resource$Targetinstances;
        targetPools: Resource$Targetpools;
        targetSslProxies: Resource$Targetsslproxies;
        targetTcpProxies: Resource$Targettcpproxies;
        targetVpnGateways: Resource$Targetvpngateways;
        urlMaps: Resource$Urlmaps;
        vpnGateways: Resource$Vpngateways;
        vpnTunnels: Resource$Vpntunnels;
        zoneOperations: Resource$Zoneoperations;
        zones: Resource$Zones;
        constructor(options: GlobalOptions, google?: GoogleConfigurable);
    }
    /**
     * A specification of the type and number of accelerator cards attached to the instance.
     */
    interface Schema$AcceleratorConfig {
        /**
         * The number of the guest accelerator cards exposed to this instance.
         */
        acceleratorCount?: number;
        /**
         * Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
         */
        acceleratorType?: string;
    }
    /**
     * Represents an Accelerator Type resource.  Google Cloud Platform provides graphics processing units (accelerators) that you can add to VM instances to improve or accelerate performance when working with intensive workloads. For more information, read GPUs on Compute Engine. (== resource_for beta.acceleratorTypes ==) (== resource_for v1.acceleratorTypes ==)
     */
    interface Schema$AcceleratorType {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] The deprecation status associated with this accelerator type.
         */
        deprecated?: Schema$DeprecationStatus;
        /**
         * [Output Only] An optional textual description of the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] The type of the resource. Always compute#acceleratorType for accelerator types.
         */
        kind?: string;
        /**
         * [Output Only] Maximum accelerator cards allowed per instance.
         */
        maximumCardsPerInstance?: number;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] Server-defined fully-qualified URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource&#39;s resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        zone?: string;
    }
    interface Schema$AcceleratorTypeAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of AcceleratorTypesScopedList resources.
         */
        items?: {
            [key: string]: Schema$AcceleratorTypesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of accelerator types.
     */
    interface Schema$AcceleratorTypeList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of AcceleratorType resources.
         */
        items?: Schema$AcceleratorType[];
        /**
         * [Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$AcceleratorTypesScopedList {
        /**
         * [Output Only] A list of accelerator types contained in this scope.
         */
        acceleratorTypes?: Schema$AcceleratorType[];
        /**
         * [Output Only] An informational warning that appears when the accelerator types list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * An access configuration attached to an instance&#39;s network interface. Only one access config per instance is supported.
     */
    interface Schema$AccessConfig {
        /**
         * [Output Only] Type of the resource. Always compute#accessConfig for access configs.
         */
        kind?: string;
        /**
         * The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
         */
        name?: string;
        /**
         * An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
         */
        natIP?: string;
        /**
         * This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.  If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.  If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
         */
        networkTier?: string;
        /**
         * [Output Only] The public DNS domain name for the instance.
         */
        publicDnsName?: string;
        /**
         * The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.
         */
        publicPtrDomainName?: string;
        /**
         * Specifies whether a public DNS ?A? record should be created for the external IP address of this access configuration.
         */
        setPublicDns?: boolean;
        /**
         * Specifies whether a public DNS &#39;PTR&#39; record should be created to map the external IP address of the instance to a DNS domain name.
         */
        setPublicPtr?: boolean;
        /**
         * The type of configuration. The default and only option is ONE_TO_ONE_NAT.
         */
        type?: string;
    }
    /**
     * Represents an IP Address resource.  An address resource represents a regional internal IP address. Regional internal IP addresses are RFC 1918 addresses that come from either a primary or secondary IP range of a subnet in a VPC network. Regional external IP addresses can be assigned to GCP VM instances, Cloud VPN gateways, regional external forwarding rules for network load balancers (in either Standard or Premium Tier), and regional external forwarding rules for HTTP(S), SSL Proxy, and TCP Proxy load balancers in Standard Tier. For more information, read IP addresses.  A globalAddresses resource represent a global external IP address. Global external IP addresses are IPv4 or IPv6 addresses. They can only be assigned to global forwarding rules for HTTP(S), SSL Proxy, or TCP Proxy load balancers in Premium Tier. For more information, read Global resources. (== resource_for beta.addresses ==) (== resource_for v1.addresses ==) (== resource_for beta.globalAddresses ==) (== resource_for v1.globalAddresses ==)
     */
    interface Schema$Address {
        /**
         * The static IP address represented by this resource.
         */
        address?: string;
        /**
         * The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
         */
        addressType?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this field when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
         */
        ipVersion?: string;
        /**
         * [Output Only] Type of the resource. Always compute#address for addresses.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this Address, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an Address.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this Address resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
         */
        name?: string;
        /**
         * The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose.
         */
        network?: string;
        /**
         * This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.  If this field is not specified, it is assumed to be PREMIUM.
         */
        networkTier?: string;
        /**
         * The prefix length if the resource reprensents an IP range.
         */
        prefixLength?: number;
        /**
         * The purpose of this resource, which can be one of the following values:   - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.  - `DNS_RESOLVER` for a DNS resolver address in a subnetwork  - `VPC_PEERING` for addresses that are reserved for VPC peer networks.  - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
         */
        purpose?: string;
        /**
         * [Output Only] The URL of the region where the regional address resides. This field is not applicable to global addresses. You must specify this field as part of the HTTP request URL.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
         */
        status?: string;
        /**
         * The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork&#39;s IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose.
         */
        subnetwork?: string;
        /**
         * [Output Only] The URLs of the resources that are using this address.
         */
        users?: string[];
    }
    interface Schema$AddressAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of AddressesScopedList resources.
         */
        items?: {
            [key: string]: Schema$AddressesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$AddressesScopedList {
        /**
         * [Output Only] A list of addresses contained in this scope.
         */
        addresses?: Schema$Address[];
        /**
         * [Output Only] Informational warning which replaces the list of addresses when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of addresses.
     */
    interface Schema$AddressList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Address resources.
         */
        items?: Schema$Address[];
        /**
         * [Output Only] Type of resource. Always compute#addressList for lists of addresses.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * An alias IP range attached to an instance&#39;s network interface.
     */
    interface Schema$AliasIpRange {
        /**
         * The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
         */
        ipCidrRange?: string;
        /**
         * The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
         */
        subnetworkRangeName?: string;
    }
    interface Schema$AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
        /**
         * Specifies the size of the disk in base-2 GB.
         */
        diskSizeGb?: string;
        /**
         * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
         */
        interface?: string;
    }
    /**
     * Properties of the SKU instances being reserved.
     */
    interface Schema$AllocationSpecificSKUAllocationReservedInstanceProperties {
        /**
         * Specifies accelerator type and count.
         */
        guestAccelerators?: Schema$AcceleratorConfig[];
        /**
         * Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
         */
        localSsds?: Schema$AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk[];
        /**
         * Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
         */
        machineType?: string;
        /**
         * Minimum cpu platform the reservation.
         */
        minCpuPlatform?: string;
    }
    /**
     * This reservation type allows to pre allocate specific instance configuration.
     */
    interface Schema$AllocationSpecificSKUReservation {
        /**
         * Specifies number of resources that are allocated.
         */
        count?: string;
        /**
         * The instance properties for this specific sku reservation.
         */
        instanceProperties?: Schema$AllocationSpecificSKUAllocationReservedInstanceProperties;
        /**
         * [OutputOnly] Indicates how many resource are in use.
         */
        inUseCount?: string;
    }
    /**
     * An instance-attached disk resource.
     */
    interface Schema$AttachedDisk {
        /**
         * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
         */
        autoDelete?: boolean;
        /**
         * Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
         */
        boot?: boolean;
        /**
         * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance.  If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
         */
        deviceName?: string;
        /**
         * Encrypts or decrypts a disk using a customer-supplied encryption key.  If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key.  If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance.  If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.  Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
         */
        diskEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * The size of the disk in base-2 GB. This supersedes disk_size_gb in InitializeParams.
         */
        diskSizeGb?: string;
        /**
         * A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.
         */
        guestOsFeatures?: Schema$GuestOsFeature[];
        /**
         * [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
         */
        index?: number;
        /**
         * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.  This property is mutually exclusive with the source property; you can only define one or the other, but not both.
         */
        initializeParams?: Schema$AttachedDiskInitializeParams;
        /**
         * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. TODO(b/131765817): Update documentation when NVME is supported.
         */
        interface?: string;
        /**
         * [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
         */
        kind?: string;
        /**
         * [Output Only] Any valid publicly visible licenses.
         */
        licenses?: string[];
        /**
         * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
         */
        mode?: string;
        /**
         * For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api.
         */
        savedState?: string;
        /**
         * [Output Only] shielded vm initial state stored on disk
         */
        shieldedInstanceInitialState?: Schema$InitialStateConfig;
        /**
         * Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or disks.source is required except for local SSD.  If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks.  Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
         */
        source?: string;
        /**
         * Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
         */
        type?: string;
    }
    /**
     * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.  This property is mutually exclusive with the source property; you can only define one or the other, but not both.
     */
    interface Schema$AttachedDiskInitializeParams {
        /**
         * An optional description. Provide this property when creating the disk.
         */
        description?: string;
        /**
         * Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
         */
        diskName?: string;
        /**
         * Specifies the size of the disk in base-2 GB.
         */
        diskSizeGb?: string;
        /**
         * Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/pd-standard   Other values include pd-ssd and local-ssd. If you define this field, you can provide either the full or partial URL. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes/diskType  - projects/project/zones/zone/diskTypes/diskType  - zones/zone/diskTypes/diskType  Note that for InstanceTemplate, this is the name of the disk type, not URL.
         */
        diskType?: string;
        /**
         * A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.  Guest OS features are applied by merging initializeParams.guestOsFeatures and disks.guestOsFeatures
         */
        guestOsFeatures?: Schema$GuestOsFeature[];
        /**
         * Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
         */
        replicaZones?: string[];
        /**
         * Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
         */
        resourcePolicies?: string[];
        /**
         * The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or disks.source is required except for local SSD.  To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9   Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD   To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image   You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family   If the source image is deleted later, this field will not be set.
         */
        sourceImage?: string;
        /**
         * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.  Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
         */
        sourceImageEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or disks.source is required except for local SSD.  To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup   If the source snapshot is deleted later, this field will not be set.
         */
        sourceSnapshot?: string;
        /**
         * The customer-supplied encryption key of the source snapshot.
         */
        sourceSnapshotEncryptionKey?: Schema$CustomerEncryptionKey;
    }
    /**
     * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.  If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.  Example Policy with multiple AuditConfigs:  { &quot;audit_configs&quot;: [ { &quot;service&quot;: &quot;allServices&quot; &quot;audit_log_configs&quot;: [ { &quot;log_type&quot;: &quot;DATA_READ&quot;, &quot;exempted_members&quot;: [ &quot;user:foo@gmail.com&quot; ] }, { &quot;log_type&quot;: &quot;DATA_WRITE&quot;, }, { &quot;log_type&quot;: &quot;ADMIN_READ&quot;, } ] }, { &quot;service&quot;: &quot;fooservice.googleapis.com&quot; &quot;audit_log_configs&quot;: [ { &quot;log_type&quot;: &quot;DATA_READ&quot;, }, { &quot;log_type&quot;: &quot;DATA_WRITE&quot;, &quot;exempted_members&quot;: [ &quot;user:bar@gmail.com&quot; ] } ] } ] }  For fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts foo@gmail.com from DATA_READ logging, and bar@gmail.com from DATA_WRITE logging.
     */
    interface Schema$AuditConfig {
        /**
         * The configuration for logging of each type of permission.
         */
        auditLogConfigs?: Schema$AuditLogConfig[];
        exemptedMembers?: string[];
        /**
         * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
         */
        service?: string;
    }
    /**
     * Provides the configuration for logging a type of permissions. Example:  { &quot;audit_log_configs&quot;: [ { &quot;log_type&quot;: &quot;DATA_READ&quot;, &quot;exempted_members&quot;: [ &quot;user:foo@gmail.com&quot; ] }, { &quot;log_type&quot;: &quot;DATA_WRITE&quot;, } ] }  This enables &#39;DATA_READ&#39; and &#39;DATA_WRITE&#39; logging, while exempting foo@gmail.com from DATA_READ logging.
     */
    interface Schema$AuditLogConfig {
        /**
         * Specifies the identities that do not cause logging for this type of permission. Follows the same format of [Binding.members][].
         */
        exemptedMembers?: string[];
        /**
         * The log type that this config enables.
         */
        logType?: string;
    }
    /**
     * The authentication settings for the backend service.
     */
    interface Schema$AuthenticationPolicy {
        /**
         * List of authentication methods that can be used for origin authentication. Similar to peers, these will be evaluated in order the first valid one will be used to set origin identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if origin authentication is not required.
         */
        origins?: Schema$OriginAuthenticationMethod[];
        /**
         * List of authentication methods that can be used for peer authentication. They will be evaluated in order the first valid one will be used to set peer identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if peer authentication is not required.
         */
        peers?: Schema$PeerAuthenticationMethod[];
        /**
         * Define whether peer or origin identity should be used for principal. Default value is USE_PEER. If peer (or origin) identity is not available, either because peer/origin authentication is not defined, or failed, principal will be left unset. In other words, binding rule does not affect the decision to accept or reject request. This field can be set to one of the following: USE_PEER: Principal will be set to the identity from peer authentication. USE_ORIGIN: Principal will be set to the identity from origin authentication.
         */
        principalBinding?: string;
        /**
         * Configures the mechanism to obtain server-side security certificates and identity information.
         */
        serverTlsContext?: Schema$TlsContext;
    }
    /**
     * Authorization configuration provides service-level and method-level access control for a service.
     */
    interface Schema$AuthorizationConfig {
        /**
         * List of RbacPolicies.
         */
        policies?: Schema$RbacPolicy[];
    }
    /**
     * Authorization-related information used by Cloud Audit Logging.
     */
    interface Schema$AuthorizationLoggingOptions {
        /**
         * The type of the permission that was checked.
         */
        permissionType?: string;
    }
    /**
     * Represents an Autoscaler resource.    Use autoscalers to automatically add or delete instances from a managed instance group according to your defined autoscaling policy. For more information, read Autoscaling Groups of Instances.  For zonal managed instance groups resource, use the autoscaler resource.  For regional managed instance groups, use the regionAutoscalers resource. (== resource_for beta.autoscalers ==) (== resource_for v1.autoscalers ==) (== resource_for beta.regionAutoscalers ==) (== resource_for v1.regionAutoscalers ==)
     */
    interface Schema$Autoscaler {
        /**
         * The configuration parameters for the autoscaling algorithm. You can define one or more of the policies for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization.  If none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.
         */
        autoscalingPolicy?: Schema$AutoscalingPolicy;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#autoscaler for autoscalers.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates recommended MIG size even when autoscaling policy mode is different from ON. This field is empty when autoscaler is not connected to the existing managed instance group or autoscaler did not generate its prediction.
         */
        recommendedSize?: number;
        /**
         * [Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope).
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The status of the autoscaler configuration.
         */
        status?: string;
        /**
         * [Output Only] Human-readable details about the current state of the autoscaler. Read the documentation for Commonly returned status messages for examples of status messages you might encounter.
         */
        statusDetails?: Schema$AutoscalerStatusDetails[];
        /**
         * URL of the managed instance group that this autoscaler will scale.
         */
        target?: string;
        /**
         * [Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope).
         */
        zone?: string;
    }
    interface Schema$AutoscalerAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of AutoscalersScopedList resources.
         */
        items?: {
            [key: string]: Schema$AutoscalersScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of Autoscaler resources.
     */
    interface Schema$AutoscalerList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Autoscaler resources.
         */
        items?: Schema$Autoscaler[];
        /**
         * [Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$AutoscalersScopedList {
        /**
         * [Output Only] A list of autoscalers contained in this scope.
         */
        autoscalers?: Schema$Autoscaler[];
        /**
         * [Output Only] Informational warning which replaces the list of autoscalers when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$AutoscalerStatusDetails {
        /**
         * The status message.
         */
        message?: string;
        /**
         * The type of error returned.
         */
        type?: string;
    }
    /**
     * Cloud Autoscaler policy.
     */
    interface Schema$AutoscalingPolicy {
        /**
         * The number of seconds that the autoscaler should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds.  Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
         */
        coolDownPeriodSec?: number;
        /**
         * Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
         */
        cpuUtilization?: Schema$AutoscalingPolicyCpuUtilization;
        /**
         * Configuration parameters of autoscaling based on a custom metric.
         */
        customMetricUtilizations?: Schema$AutoscalingPolicyCustomMetricUtilization[];
        /**
         * Configuration parameters of autoscaling based on load balancer.
         */
        loadBalancingUtilization?: Schema$AutoscalingPolicyLoadBalancingUtilization;
        /**
         * The maximum number of instances that the autoscaler can scale up to. This is required when creating or updating an autoscaler. The maximum number of replicas should not be lower than minimal number of replicas.
         */
        maxNumReplicas?: number;
        /**
         * The minimum number of replicas that the autoscaler can scale down to. This cannot be less than 0. If not provided, autoscaler will choose a default value depending on maximum number of instances allowed.
         */
        minNumReplicas?: number;
        /**
         * Defines operating mode for this policy.
         */
        mode?: string;
        /**
         * Configuration parameters of autoscaling based on queuing system.
         */
        queueBasedScaling?: Schema$AutoscalingPolicyQueueBasedScaling;
        scaleDownControl?: Schema$AutoscalingPolicyScaleDownControl;
    }
    /**
     * CPU utilization policy.
     */
    interface Schema$AutoscalingPolicyCpuUtilization {
        /**
         * The target CPU utilization that the autoscaler should maintain. Must be a float value in the range (0, 1]. If not specified, the default is 0.6.  If the CPU level is below the target utilization, the autoscaler scales down the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization.  If the average CPU is above the target utilization, the autoscaler scales up until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
         */
        utilizationTarget?: number;
    }
    /**
     * Custom utilization metric policy.
     */
    interface Schema$AutoscalingPolicyCustomMetricUtilization {
        /**
         * A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data.  For the filter to be valid for autoscaling purposes, the following rules apply:   - You can only use the AND operator for joining selectors.  - You can only use direct equality comparison operator (=) without any functions for each selector.  - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical.  - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a per-group metric for the purpose of autoscaling.  If not specified, the type defaults to gce_instance.    You should provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
         */
        filter?: string;
        /**
         * The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values.  The metric must have a value type of INT64 or DOUBLE.
         */
        metric?: string;
        /**
         * If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler will keep the number of instances proportional to the value of this metric, the metric itself should not change value due to group resizing.  A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances.  A bad example would be a metric exporting an average or median latency, since this value can&#39;t include a chunk assignable to a single instance, it could be better used with utilization_target instead.
         */
        singleInstanceAssignment?: number;
        /**
         * The target value of the metric that autoscaler should maintain. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric.  For example, a good metric to use as a utilization_target is compute.googleapis.com/instance/network/received_bytes_count. The autoscaler will work to keep this value constant for each of the instances.
         */
        utilizationTarget?: number;
        /**
         * Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
         */
        utilizationTargetType?: string;
    }
    /**
     * Configuration parameters of autoscaling based on load balancing.
     */
    interface Schema$AutoscalingPolicyLoadBalancingUtilization {
        /**
         * Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that autoscaler should maintain. Must be a positive float value. If not defined, the default is 0.8.
         */
        utilizationTarget?: number;
    }
    /**
     * Configuration parameters of autoscaling based on queuing system.
     */
    interface Schema$AutoscalingPolicyQueueBasedScaling {
        /**
         * Scaling based on the average number of tasks in the queue per each active instance. The autoscaler keeps the average number of tasks per instance below this number, based on data collected in the last couple of minutes. The autoscaler will also take into account incoming tasks when calculating when to scale.
         */
        acceptableBacklogPerInstance?: number;
        /**
         * Configuration for Cloud Pub/Sub subscription queue.
         */
        cloudPubSub?: Schema$AutoscalingPolicyQueueBasedScalingCloudPubSub;
        /**
         * The scaling algorithm will also calculate throughput estimates on its own; if you explicitly provide this value, the autoscaler will take into account your value as well as automatic estimates when deciding how to scale.
         */
        singleWorkerThroughputPerSec?: number;
    }
    /**
     * Configuration parameters for scaling based on Cloud Pub/Sub subscription queue.
     */
    interface Schema$AutoscalingPolicyQueueBasedScalingCloudPubSub {
        /**
         * Cloud Pub/Sub subscription used for scaling. Provide the partial URL (starting with projects/) or just the subscription name. The subscription must be assigned to the topic specified in topicName and must be in a pull configuration. The subscription must belong to the same project as the Autoscaler.
         */
        subscription?: string;
        /**
         * Cloud Pub/Sub topic used for scaling. Provide the partial URL or partial URL (starting with projects/) or just the topic name. The topic must belong to the same project as the Autoscaler resource.
         */
        topic?: string;
    }
    /**
     * Configuration that allows for slower scale down so that even if Autoscaler recommends an abrupt scale down of a MIG, it will be throttled as specified by the parameters below.
     */
    interface Schema$AutoscalingPolicyScaleDownControl {
        /**
         * Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
         */
        maxScaledDownReplicas?: Schema$FixedOrPercent;
        /**
         * How long back autoscaling should look when computing recommendations to include directives regarding slower scale down, as described above.
         */
        timeWindowSec?: number;
    }
    /**
     * Message containing information of one individual backend.
     */
    interface Schema$Backend {
        /**
         * Specifies the balancing mode for the backend.  When choosing a balancing mode, you need to consider the loadBalancingScheme, and protocol for the backend service, as well as the type of backend (instance group or NEG).    - If the load balancing mode is CONNECTION, then the load is spread based on how many concurrent connections the backend can handle. The CONNECTION balancing mode is only available if the protocol for the backend service is SSL, TCP, or UDP.  If the loadBalancingScheme for the backend service is EXTERNAL (SSL Proxy and TCP Proxy load balancers), you must also specify exactly one of the following parameters: maxConnections, maxConnectionsPerInstance, or maxConnectionsPerEndpoint.  If the loadBalancingScheme for the backend service is INTERNAL (internal TCP/UDP load balancers), you cannot specify any additional parameters.   - If the load balancing mode is RATE, then the load is spread based on the rate of HTTP requests per second (RPS). The RATE balancing mode is only available if the protocol for the backend service is HTTP or HTTPS. You must specify exactly one of the following parameters: maxRate, maxRatePerInstance, or maxRatePerEndpoint.   - If the load balancing mode is UTILIZATION, then the load is spread based on the CPU utilization of instances in an instance group. The UTILIZATION balancing mode is only available if the loadBalancingScheme of the backend service is EXTERNAL, INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED and the backend is made up of instance groups. There are no restrictions on the backend service protocol.
         */
        balancingMode?: string;
        /**
         * A multiplier applied to the group&#39;s maximum servicing capacity (based on UTILIZATION, RATE or CONNECTION). Default value is 1, which means the group will serve up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available Capacity. Valid range is [0.0,1.0].  This cannot be used for internal load balancing.
         */
        capacityScaler?: number;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
         */
        failover?: boolean;
        /**
         * The fully-qualified URL of an instance group or network endpoint group (NEG) resource. The type of backend that a backend service supports depends on the backend service&#39;s loadBalancingScheme.    - When the loadBalancingScheme for the backend service is EXTERNAL, INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, the backend can be either an instance group or a NEG. The backends on the backend service must be either all instance groups or all NEGs. You cannot mix instance group and NEG backends on the same backend service.    - When the loadBalancingScheme for the backend service is INTERNAL, the backend must be an instance group in the same region as the backend service. NEGs are not supported.    You must use the fully-qualified URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
         */
        group?: string;
        /**
         * Defines a maximum target for simultaneous connections for the entire backend (instance group or NEG). If the backend&#39;s balancingMode is UTILIZATION, this is an optional parameter. If the backend&#39;s balancingMode is CONNECTION, and backend is attached to a backend service whose loadBalancingScheme is EXTERNAL, you must specify either this parameter, maxConnectionsPerInstance, or maxConnectionsPerEndpoint.  Not available if the backend&#39;s balancingMode is RATE. If the loadBalancingScheme is INTERNAL, then maxConnections is not supported, even though the backend requires a balancing mode of CONNECTION.
         */
        maxConnections?: number;
        /**
         * Defines a maximum target for simultaneous connections for an endpoint of a NEG. This is multiplied by the number of endpoints in the NEG to implicitly calculate a maximum number of target maximum simultaneous connections for the NEG. If the backend&#39;s balancingMode is CONNECTION, and the backend is attached to a backend service whose loadBalancingScheme is EXTERNAL, you must specify either this parameter, maxConnections, or maxConnectionsPerInstance.  Not available if the backend&#39;s balancingMode is RATE. Internal TCP/UDP load balancing does not support setting maxConnectionsPerEndpoint even though its backends require a balancing mode of CONNECTION.
         */
        maxConnectionsPerEndpoint?: number;
        /**
         * Defines a maximum target for simultaneous connections for a single VM in a backend instance group. This is multiplied by the number of instances in the instance group to implicitly calculate a target maximum number of simultaneous connections for the whole instance group. If the backend&#39;s balancingMode is UTILIZATION, this is an optional parameter. If the backend&#39;s balancingMode is CONNECTION, and backend is attached to a backend service whose loadBalancingScheme is EXTERNAL, you must specify either this parameter, maxConnections, or maxConnectionsPerEndpoint.  Not available if the backend&#39;s balancingMode is RATE. Internal TCP/UDP load balancing does not support setting maxConnectionsPerInstance even though its backends require a balancing mode of CONNECTION.
         */
        maxConnectionsPerInstance?: number;
        /**
         * The max requests per second (RPS) of the group. Can be used with either RATE or UTILIZATION balancing modes, but required if RATE mode. For RATE mode, either maxRate or maxRatePerInstance must be set.  This cannot be used for internal load balancing.
         */
        maxRate?: number;
        /**
         * Defines a maximum target for requests per second (RPS) for an endpoint of a NEG. This is multiplied by the number of endpoints in the NEG to implicitly calculate a target maximum rate for the NEG.  If the backend&#39;s balancingMode is RATE, you must specify either this parameter, maxRate, or maxRatePerInstance.  Not available if the backend&#39;s balancingMode is CONNECTION.
         */
        maxRatePerEndpoint?: number;
        /**
         * Defines a maximum target for requests per second (RPS) for a single VM in a backend instance group. This is multiplied by the number of instances in the instance group to implicitly calculate a target maximum rate for the whole instance group.  If the backend&#39;s balancingMode is UTILIZATION, this is an optional parameter. If the backend&#39;s balancingMode is RATE, you must specify either this parameter, maxRate, or maxRatePerEndpoint.  Not available if the backend&#39;s balancingMode is CONNECTION.
         */
        maxRatePerInstance?: number;
        /**
         * Defines the maximum average CPU utilization of a backend VM in an instance group. The valid range is [0.0, 1.0]. This is an optional parameter if the backend&#39;s balancingMode is UTILIZATION.  This parameter can be used in conjunction with maxRate, maxRatePerInstance, maxConnections, or maxConnectionsPerInstance.
         */
        maxUtilization?: number;
    }
    /**
     * Represents a Cloud Storage Bucket resource.  This Cloud Storage bucket resource is referenced by a URL map of a load balancer. For more information, read Backend Buckets.
     */
    interface Schema$BackendBucket {
        /**
         * Cloud Storage bucket name.
         */
        bucketName?: string;
        /**
         * Cloud CDN configuration for this BackendBucket.
         */
        cdnPolicy?: Schema$BackendBucketCdnPolicy;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional textual description of the resource; provided by the client when the resource is created.
         */
        description?: string;
        /**
         * If true, enable Cloud CDN for this BackendBucket.
         */
        enableCdn?: boolean;
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * Type of the resource.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
    }
    /**
     * Message containing Cloud CDN configuration for a backend bucket.
     */
    interface Schema$BackendBucketCdnPolicy {
        /**
         * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a &quot;Cache-Control: public, max-age=[TTL]&quot; header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
         */
        signedUrlCacheMaxAgeSec?: string;
        /**
         * [Output Only] Names of the keys for signing request URLs.
         */
        signedUrlKeyNames?: string[];
    }
    /**
     * Contains a list of BackendBucket resources.
     */
    interface Schema$BackendBucketList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of BackendBucket resources.
         */
        items?: Schema$BackendBucket[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Backend Service resource.    Backend services must have an associated health check. Backend services also store information about session affinity. For more information, read Backend Services.  A backendServices resource represents a global backend service. Global backend services are used for HTTP(S), SSL Proxy, TCP Proxy load balancing and Traffic Director.  A regionBackendServices resource represents a regional backend service. Regional backend services are used for internal TCP/UDP load balancing. For more information, read Internal TCP/UDP Load balancing. (== resource_for v1.backendService ==) (== resource_for beta.backendService ==)
     */
    interface Schema$BackendService {
        /**
         * If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is one day (86,400).
         */
        affinityCookieTtlSec?: number;
        /**
         * The list of backends that serve this BackendService.
         */
        backends?: Schema$Backend[];
        /**
         * Cloud CDN configuration for this BackendService.
         */
        cdnPolicy?: Schema$BackendServiceCdnPolicy;
        /**
         * Settings controlling the volume of connections to a backend service.  This field is applicable to either:   - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.  - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         */
        circuitBreakers?: Schema$CircuitBreakers;
        connectionDraining?: Schema$ConnectionDraining;
        /**
         * Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH.  This field is applicable to either:   - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.  - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         */
        consistentHash?: Schema$ConsistentHashLoadBalancerSettings;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * Headers that the HTTP/S load balancer should add to proxied requests.
         */
        customRequestHeaders?: string[];
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * If true, enables Cloud CDN for the backend service. Only applicable if the loadBalancingScheme is EXTERNAL and the protocol is HTTP or HTTPS.
         */
        enableCDN?: boolean;
        /**
         * Applicable only to Failover for Internal TCP/UDP Load Balancing. Requires at least one backend instance group to be defined as a backup (failover) backend.
         */
        failoverPolicy?: Schema$BackendServiceFailoverPolicy;
        /**
         * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a BackendService.
         */
        fingerprint?: string;
        /**
         * The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified, and a health check is required for Compute Engine backend services. A health check must not be specified for App Engine backend and Cloud Function backend.  For internal load balancing, a URL to a HealthCheck resource must be specified instead.
         */
        healthChecks?: string[];
        iap?: Schema$BackendServiceIAP;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#backendService for backend services.
         */
        kind?: string;
        /**
         * Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Possible values are INTERNAL and EXTERNAL.
         */
        loadBalancingScheme?: string;
        /**
         * The load balancing algorithm used within the scope of the locality. The possible values are:   - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default.  - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.  - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.  - RANDOM: The load balancer selects a random healthy host.  - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.  - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, refer to https://ai.google/research/pubs/pub44824   This field is applicable to either:   - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.  - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         */
        localityLbPolicy?: string;
        /**
         * This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.
         */
        logConfig?: Schema$BackendServiceLogConfig;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The URL of the network to which this backend service belongs. This field can only be spcified when the load balancing scheme is set to INTERNAL.
         */
        network?: string;
        /**
         * Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable to either:   - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.  - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         */
        outlierDetection?: Schema$OutlierDetection;
        /**
         * Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80.  This cannot be used if the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
         */
        port?: number;
        /**
         * A named port on a backend instance group representing the port for communication to the backend VMs in that group. Required when the loadBalancingScheme is EXTERNAL and the backends are instance groups. The named port must be defined on each backend instance group. This parameter has no meaning if the backends are NEGs.    Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Blaancing).
         */
        portName?: string;
        /**
         * The protocol this BackendService uses to communicate with backends.  Possible values are HTTP, HTTPS, TCP, SSL, or UDP, depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic director for more information.
         */
        protocol?: string;
        /**
         * [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] The resource URL for the security policy associated with this backend service.
         */
        securityPolicy?: string;
        /**
         * This field specifies the security policy that applies to this backend service. This field is applicable to either:   - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.  - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         */
        securitySettings?: Schema$SecuritySettings;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * Type of session affinity to use. The default is NONE. Session affinity is not applicable if the --protocol is UDP.  When the loadBalancingScheme is EXTERNAL, possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. GENERATED_COOKIE is only available if the protocol is HTTP or HTTPS.  When the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.  When the loadBalancingScheme is INTERNAL_SELF_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.
         */
        sessionAffinity?: string;
        /**
         * The backend service timeout has a different meaning depending on the type of load balancer. For more information read,  Backend service settings The default is 30 seconds.
         */
        timeoutSec?: number;
    }
    /**
     * Contains a list of BackendServicesScopedList.
     */
    interface Schema$BackendServiceAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of BackendServicesScopedList resources.
         */
        items?: {
            [key: string]: Schema$BackendServicesScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Message containing Cloud CDN configuration for a backend service.
     */
    interface Schema$BackendServiceCdnPolicy {
        /**
         * The CacheKeyPolicy for this CdnPolicy.
         */
        cacheKeyPolicy?: Schema$CacheKeyPolicy;
        /**
         * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a &quot;Cache-Control: public, max-age=[TTL]&quot; header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
         */
        signedUrlCacheMaxAgeSec?: string;
        /**
         * [Output Only] Names of the keys for signing request URLs.
         */
        signedUrlKeyNames?: string[];
    }
    interface Schema$BackendServiceFailoverPolicy {
        /**
         * This can be set to true only if the protocol is TCP.  The default is false.
         */
        disableConnectionDrainOnFailover?: boolean;
        /**
         * Applicable only to Failover for Internal TCP/UDP Load Balancing. If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy. If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy.  The default is false.
         */
        dropTrafficIfUnhealthy?: boolean;
        /**
         * Applicable only to Failover for Internal TCP/UDP Load Balancing. The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio.
         */
        failoverRatio?: number;
    }
    interface Schema$BackendServiceGroupHealth {
        /**
         * Metadata defined as annotations on the network endpoint group.
         */
        annotations?: {
            [key: string]: string;
        };
        /**
         * Health state of the backend instances or endpoints in requested instance or network endpoint group, determined based on configured health checks.
         */
        healthStatus?: Schema$HealthStatus[];
        /**
         * [Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services.
         */
        kind?: string;
    }
    /**
     * Identity-Aware Proxy
     */
    interface Schema$BackendServiceIAP {
        enabled?: boolean;
        oauth2ClientId?: string;
        /**
         * [Input Only] OAuth client info required to generate client id to be used for IAP.
         */
        oauth2ClientInfo?: Schema$BackendServiceIAPOAuth2ClientInfo;
        oauth2ClientSecret?: string;
        /**
         * [Output Only] SHA256 hash value for the field oauth2_client_secret above.
         */
        oauth2ClientSecretSha256?: string;
    }
    interface Schema$BackendServiceIAPOAuth2ClientInfo {
        /**
         * Application name to be used in OAuth consent screen.
         */
        applicationName?: string;
        /**
         * Name of the client to be generated. Optional - If not provided, the name will be autogenerated by the backend.
         */
        clientName?: string;
        /**
         * Developer&#39;s information to be used in OAuth consent screen.
         */
        developerEmailAddress?: string;
    }
    /**
     * Contains a list of BackendService resources.
     */
    interface Schema$BackendServiceList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of BackendService resources.
         */
        items?: Schema$BackendService[];
        /**
         * [Output Only] Type of resource. Always compute#backendServiceList for lists of backend services.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * The available logging options for the load balancer traffic served by this backend service.
     */
    interface Schema$BackendServiceLogConfig {
        /**
         * This field denotes whether to enable logging for the load balancer traffic served by this backend service.
         */
        enable?: boolean;
        /**
         * This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
         */
        sampleRate?: number;
    }
    interface Schema$BackendServiceReference {
        backendService?: string;
    }
    interface Schema$BackendServicesScopedList {
        /**
         * A list of BackendServices contained in this scope.
         */
        backendServices?: Schema$BackendService[];
        /**
         * Informational warning which replaces the list of backend services when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$BfdPacket {
        /**
         * The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880
         */
        authenticationPresent?: boolean;
        /**
         * The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880
         */
        controlPlaneIndependent?: boolean;
        /**
         * The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880
         */
        demand?: boolean;
        /**
         * The diagnostic code specifies the local system&#39;s reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
         */
        diagnostic?: string;
        /**
         * The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880
         */
        final?: boolean;
        /**
         * The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880
         */
        length?: number;
        /**
         * The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
         */
        minEchoRxIntervalMs?: number;
        /**
         * The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
         */
        minRxIntervalMs?: number;
        /**
         * The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
         */
        minTxIntervalMs?: number;
        /**
         * The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880
         */
        multiplier?: number;
        /**
         * The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880
         */
        multipoint?: boolean;
        /**
         * The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
         */
        myDiscriminator?: number;
        /**
         * The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880
         */
        poll?: boolean;
        /**
         * The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
         */
        state?: string;
        /**
         * The version number of the BFD protocol, as specified in section 4.1 of RFC5880.
         */
        version?: number;
        /**
         * The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
         */
        yourDiscriminator?: number;
    }
    /**
     * Next free: 15
     */
    interface Schema$BfdStatus {
        /**
         * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer.
         */
        bfdSessionInitializationMode?: string;
        /**
         * Unix timestamp of the most recent config update.
         */
        configUpdateTimestampMicros?: string;
        /**
         * Control packet counts for the current BFD session.
         */
        controlPacketCounts?: Schema$BfdStatusPacketCounts;
        /**
         * Inter-packet time interval statistics for control packets.
         */
        controlPacketIntervals?: Schema$PacketIntervals[];
        /**
         * Echo packet counts for the current BFD session.
         */
        echoPacketCounts?: Schema$BfdStatusPacketCounts;
        /**
         * Inter-packet time interval statistics for echo packets.
         */
        echoPacketIntervals?: Schema$PacketIntervals[];
        /**
         * The diagnostic code specifies the local system&#39;s reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
         */
        localDiagnostic?: string;
        /**
         * The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
         */
        localState?: string;
        /**
         * Negotiated transmit interval for control packets. When echo mode is enabled this will reflect the negotiated slow timer interval.
         */
        negotiatedLocalControlTxIntervalMs?: number;
        /**
         * Negotiated transmit interval for echo packets.
         */
        negotiatedLocalEchoTxIntervalMs?: number;
        /**
         * The most recent Rx control packet for this BFD session.
         */
        rxPacket?: Schema$BfdPacket;
        /**
         * The most recent Tx control packet for this BFD session.
         */
        txPacket?: Schema$BfdPacket;
        /**
         * Session uptime in milliseconds. Value will be 0 if session is not up.
         */
        uptimeMs?: string;
        /**
         * Indicates if echo mode is currently being used.
         */
        usingEchoMode?: boolean;
    }
    interface Schema$BfdStatusPacketCounts {
        /**
         * Number of packets received since the beginning of the current BFD session.
         */
        numRx?: number;
        /**
         * Number of packets received that were rejected because of errors since the beginning of the current BFD session.
         */
        numRxRejected?: number;
        /**
         * Number of packets received that were successfully processed since the beginning of the current BFD session.
         */
        numRxSuccessful?: number;
        /**
         * Number of packets transmitted since the beginning of the current BFD session.
         */
        numTx?: number;
    }
    /**
     * Associates `members` with a `role`.
     */
    interface Schema$Binding {
        /**
         * The condition that is associated with this binding. NOTE: An unsatisfied condition will not allow user access via current binding. Different bindings, including their conditions, are examined independently.
         */
        condition?: Schema$Expr;
        /**
         * Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:  * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account.  * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account.  * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@gmail.com` .    * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`.  * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`.    * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
         */
        members?: string[];
        /**
         * Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
         */
        role?: string;
    }
    interface Schema$CacheInvalidationRule {
        /**
         * If set, this invalidation rule will only apply to requests with a Host header matching host.
         */
        host?: string;
        path?: string;
    }
    /**
     * Message containing what to include in the cache key for a request for Cloud CDN.
     */
    interface Schema$CacheKeyPolicy {
        /**
         * If true, requests to different hosts will be cached separately.
         */
        includeHost?: boolean;
        /**
         * If true, http and https requests will be cached separately.
         */
        includeProtocol?: boolean;
        /**
         * If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
         */
        includeQueryString?: boolean;
        /**
         * Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         */
        queryStringBlacklist?: string[];
        /**
         * Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
         */
        queryStringWhitelist?: string[];
    }
    /**
     * gRPC call credentials to access the SDS server.
     */
    interface Schema$CallCredentials {
        /**
         * The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following: ACCESS_TOKEN: An access token is used as call credentials for the SDS server. GCE_VM: The local GCE VM service account credentials are used to access the SDS server. JWT_SERVICE_TOKEN: The user provisioned service account credentials are used to access the SDS server. FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server.
         */
        callCredentialType?: string;
        /**
         * Custom authenticator credentials.
         */
        fromPlugin?: Schema$MetadataCredentialsFromPlugin;
    }
    /**
     * gRPC channel credentials to access the SDS server.
     */
    interface Schema$ChannelCredentials {
        /**
         * The call credentials to access the SDS server.
         */
        certificates?: Schema$TlsCertificatePaths;
        /**
         * The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server.
         */
        channelCredentialType?: string;
    }
    /**
     * Settings controlling the volume of connections to a backend service.
     */
    interface Schema$CircuitBreakers {
        /**
         * The timeout for new network connections to hosts.
         */
        connectTimeout?: Schema$Duration;
        /**
         * The maximum number of connections to the backend cluster. If not specified, the default is 1024.
         */
        maxConnections?: number;
        /**
         * The maximum number of pending requests allowed to the backend cluster. If not specified, the default is 1024.
         */
        maxPendingRequests?: number;
        /**
         * The maximum number of parallel requests that allowed to the backend cluster. If not specified, the default is 1024.
         */
        maxRequests?: number;
        /**
         * Maximum requests for a single backend connection. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive.
         */
        maxRequestsPerConnection?: number;
        /**
         * The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 3.
         */
        maxRetries?: number;
    }
    /**
     * The client side authentication settings for connection originating from the backend service.
     */
    interface Schema$ClientTlsSettings {
        /**
         * Configures the mechanism to obtain client-side security certificates and identity information. This field is only applicable when mode is set to MUTUAL.
         */
        clientTlsContext?: Schema$TlsContext;
        /**
         * Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends. MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
         */
        mode?: string;
        /**
         * SNI string to present to the server during TLS handshake. This field is applicable only when mode is SIMPLE or MUTUAL.
         */
        sni?: string;
        /**
         * A list of alternate names to verify the subject identity in the certificate.If specified, the proxy will verify that the server certificate&#39;s subject alt name matches one of the specified values. This field is applicable only when mode is SIMPLE or MUTUAL.
         */
        subjectAltNames?: string[];
    }
    /**
     * Represents a regional Commitment resource.  Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts. (== resource_for beta.regionCommitments ==) (== resource_for v1.regionCommitments ==)
     */
    interface Schema$Commitment {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] Commitment end time in RFC3339 text format.
         */
        endTimestamp?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#commitment for commitments.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
         */
        plan?: string;
        /**
         * [Output Only] URL of the region where this commitment may be used.
         */
        region?: string;
        /**
         * List of reservations for this commitment.
         */
        reservations?: Schema$Reservation[];
        /**
         * A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together.
         */
        resources?: Schema$ResourceCommitment[];
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] Commitment start time in RFC3339 text format.
         */
        startTimestamp?: string;
        /**
         * [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
         */
        status?: string;
        /**
         * [Output Only] An optional, human-readable explanation of the status.
         */
        statusMessage?: string;
        /**
         * The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines.
         */
        type?: string;
    }
    interface Schema$CommitmentAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of CommitmentsScopedList resources.
         */
        items?: {
            [key: string]: Schema$CommitmentsScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of Commitment resources.
     */
    interface Schema$CommitmentList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Commitment resources.
         */
        items?: Schema$Commitment[];
        /**
         * [Output Only] Type of resource. Always compute#commitmentList for lists of commitments.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$CommitmentsScopedList {
        /**
         * [Output Only] A list of commitments contained in this scope.
         */
        commitments?: Schema$Commitment[];
        /**
         * [Output Only] Informational warning which replaces the list of commitments when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A condition to be met.
     */
    interface Schema$Condition {
        /**
         * Trusted attributes supplied by the IAM system.
         */
        iam?: string;
        /**
         * An operator to apply the subject with.
         */
        op?: string;
        /**
         * Trusted attributes discharged by the service.
         */
        svc?: string;
        /**
         * Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
         */
        sys?: string;
        /**
         * The objects of the condition.
         */
        values?: string[];
    }
    /**
     * Message containing connection draining configuration.
     */
    interface Schema$ConnectionDraining {
        /**
         * The amount of time in seconds to allow existing connections to persist while on unhealthy backend VMs. Only applicable if the protocol is not UDP. The valid range is [0, 3600].
         */
        drainingTimeoutSec?: number;
    }
    /**
     * This message defines settings for a consistent hash style load balancer.
     */
    interface Schema$ConsistentHashLoadBalancerSettings {
        /**
         * Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
         */
        httpCookie?: Schema$ConsistentHashLoadBalancerSettingsHttpCookie;
        /**
         * The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
         */
        httpHeaderName?: string;
        /**
         * The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
         */
        minimumRingSize?: string;
    }
    /**
     * The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
     */
    interface Schema$ConsistentHashLoadBalancerSettingsHttpCookie {
        /**
         * Name of the cookie.
         */
        name?: string;
        /**
         * Path to set for the cookie.
         */
        path?: string;
        /**
         * Lifetime of the cookie.
         */
        ttl?: Schema$Duration;
    }
    /**
     * The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
     */
    interface Schema$CorsPolicy {
        /**
         * In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
         */
        allowCredentials?: boolean;
        /**
         * Specifies the content for the Access-Control-Allow-Headers header.
         */
        allowHeaders?: string[];
        /**
         * Specifies the content for the Access-Control-Allow-Methods header.
         */
        allowMethods?: string[];
        /**
         * Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript  An origin is allowed if it matches either allow_origins or allow_origin_regex.
         */
        allowOriginRegexes?: string[];
        /**
         * Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either allow_origins or allow_origin_regex.
         */
        allowOrigins?: string[];
        /**
         * If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
         */
        disabled?: boolean;
        /**
         * Specifies the content for the Access-Control-Expose-Headers header.
         */
        exposeHeaders?: string[];
        /**
         * Specifies how long the results of a preflight request can be cached. This translates to the content for the Access-Control-Max-Age header.
         */
        maxAge?: number;
    }
    /**
     * Represents a customer-supplied encryption key
     */
    interface Schema$CustomerEncryptionKey {
        /**
         * The name of the encryption key that is stored in Google Cloud KMS.
         */
        kmsKeyName?: string;
        kmsKeyServiceAccount?: string;
        /**
         * Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
         */
        rawKey?: string;
        /**
         * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource.  The key must meet the following requirements before you can provide it to Compute Engine:   - The key is wrapped using a RSA public key certificate provided by Google.  - After being wrapped, the key must be encoded in RFC 4648 base64 encoding.  Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
         */
        rsaEncryptedKey?: string;
        /**
         * [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
         */
        sha256?: string;
    }
    interface Schema$CustomerEncryptionKeyProtectedDisk {
        /**
         * Decrypts data associated with the disk with a customer-supplied encryption key.
         */
        diskEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks.
         */
        source?: string;
    }
    /**
     * Deprecation status for a public resource.
     */
    interface Schema$DeprecationStatus {
        /**
         * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
         */
        deleted?: string;
        /**
         * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
         */
        deprecated?: string;
        /**
         * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
         */
        obsolete?: string;
        /**
         * The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
         */
        replacement?: string;
        /**
         * The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
         */
        state?: string;
    }
    /**
     * Represents a Persistent Disk resource.  Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options.  The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks.  The regionDisks resource represents a regional persistent disk. For more information, read  Regional resources. (== resource_for beta.disks ==) (== resource_for v1.disks ==) (== resource_for v1.regionDisks ==) (== resource_for beta.regionDisks ==)
     */
    interface Schema$Disk {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Encrypts the disk using a customer-supplied encryption key.  After you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later (e.g. to create a disk snapshot, to create a disk image, to create a machine image, or to attach the disk to a virtual machine).  Customer-supplied encryption keys do not protect access to metadata of the disk.  If you do not provide an encryption key when creating the disk, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.
         */
        diskEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * Specifies whether the disk restored from a source snapshot should erase Windows specific VSS signature.
         */
        eraseWindowsVssSignature?: boolean;
        /**
         * A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.
         */
        guestOsFeatures?: Schema$GuestOsFeature[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#disk for disks.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a disk.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this disk. These can be later modified by the setLabels method.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * [Output Only] Last attach timestamp in RFC3339 text format.
         */
        lastAttachTimestamp?: string;
        /**
         * [Output Only] Last detach timestamp in RFC3339 text format.
         */
        lastDetachTimestamp?: string;
        /**
         * Integer license codes indicating which licenses are attached to this disk.
         */
        licenseCodes?: string[];
        /**
         * A list of publicly visible licenses. Reserved for Google&#39;s use.
         */
        licenses?: string[];
        /**
         * Indicates whether or not the disk can be read/write attached to more than one instance.
         */
        multiWriter?: boolean;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Internal use only.
         */
        options?: string;
        /**
         * Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller&#39;s project.
         */
        physicalBlockSizeBytes?: string;
        /**
         * [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
         */
        replicaZones?: string[];
        /**
         * Resource policies applied to this disk for automatic snapshot creations.
         */
        resourcePolicies?: string[];
        /**
         * [Output Only] Server-defined fully-qualified URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource&#39;s resource id.
         */
        selfLinkWithId?: string;
        /**
         * Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the sourceImage or sourceSnapshot parameter, or specify it alone to create an empty persistent disk.  If you specify this field along with sourceImage or sourceSnapshot, the value of sizeGb must not be less than the size of the sourceImage or the size of the snapshot. Acceptable values are 1 to 65536, inclusive.
         */
        sizeGb?: string;
        /**
         * The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk
         */
        sourceDisk?: string;
        /**
         * [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used.
         */
        sourceDiskId?: string;
        /**
         * The source image used to create this disk. If the source image is deleted, this field will not be set.  To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9   Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD   To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image   You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family
         */
        sourceImage?: string;
        /**
         * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
         */
        sourceImageEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.
         */
        sourceImageId?: string;
        /**
         * The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot  - projects/project/global/snapshots/snapshot  - global/snapshots/snapshot
         */
        sourceSnapshot?: string;
        /**
         * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
         */
        sourceSnapshotEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.
         */
        sourceSnapshotId?: string;
        /**
         * [Output Only] The status of disk creation.
         */
        status?: string;
        /**
         * [Deprecated] Storage type of the persistent disk.
         */
        storageType?: string;
        /**
         * URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project/zones/zone/diskTypes/pd-standard or pd-ssd
         */
        type?: string;
        /**
         * [Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance
         */
        users?: string[];
        /**
         * [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        zone?: string;
    }
    interface Schema$DiskAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of DisksScopedList resources.
         */
        items?: {
            [key: string]: Schema$DisksScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
     */
    interface Schema$DiskInstantiationConfig {
        /**
         * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
         */
        autoDelete?: boolean;
        /**
         * The custom source image to be used to restore this disk when instantiating this instance template.
         */
        customImage?: string;
        /**
         * Specifies the device name of the disk to which the configurations apply to.
         */
        deviceName?: string;
        /**
         * Specifies whether to include the disk and what image to use. Possible values are:   - source-image: to use the same image that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks.  - source-image-family: to use the same image family that was used to create the source instance&#39;s corresponding disk. Applicable to the boot disk and additional read-write disks.  - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks.  - attach-read-only: to attach a read-only disk. Applicable to read-only disks.  - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
         */
        instantiateFrom?: string;
    }
    /**
     * A list of Disk resources.
     */
    interface Schema$DiskList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Disk resources.
         */
        items?: Schema$Disk[];
        /**
         * [Output Only] Type of resource. Always compute#diskList for lists of disks.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$DiskMoveRequest {
        /**
         * The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone  - projects/project/zones/zone  - zones/zone
         */
        destinationZone?: string;
        /**
         * The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk
         */
        targetDisk?: string;
    }
    interface Schema$DisksAddResourcePoliciesRequest {
        /**
         * Resource policies to be added to this disk.
         */
        resourcePolicies?: string[];
    }
    interface Schema$DisksRemoveResourcePoliciesRequest {
        /**
         * Resource policies to be removed from this disk.
         */
        resourcePolicies?: string[];
    }
    interface Schema$DisksResizeRequest {
        /**
         * The new size of the persistent disk, which is specified in GB.
         */
        sizeGb?: string;
    }
    interface Schema$DisksScopedList {
        /**
         * [Output Only] A list of disks contained in this scope.
         */
        disks?: Schema$Disk[];
        /**
         * [Output Only] Informational warning which replaces the list of disks when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Disk Type resource.  You can choose from a variety of disk types based on your needs. For more information, read Storage options.  The diskTypes resource represents disk types for a zonal persistent disk. For more information, read Zonal persistent disks.  The regionDiskTypes resource represents disk types for a regional persistent disk. For more information, read Regional persistent disks. (== resource_for beta.diskTypes ==) (== resource_for v1.diskTypes ==) (== resource_for v1.regionDiskTypes ==) (== resource_for beta.regionDiskTypes ==)
     */
    interface Schema$DiskType {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] Server-defined default disk size in GB.
         */
        defaultDiskSizeGb?: string;
        /**
         * [Output Only] The deprecation status associated with this disk type.
         */
        deprecated?: Schema$DeprecationStatus;
        /**
         * [Output Only] An optional description of this resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#diskType for disk types.
         */
        kind?: string;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] An optional textual description of the valid disk size, such as &quot;10GB-10TB&quot;.
         */
        validDiskSize?: string;
        /**
         * [Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        zone?: string;
    }
    interface Schema$DiskTypeAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of DiskTypesScopedList resources.
         */
        items?: {
            [key: string]: Schema$DiskTypesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#diskTypeAggregatedList.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of disk types.
     */
    interface Schema$DiskTypeList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of DiskType resources.
         */
        items?: Schema$DiskType[];
        /**
         * [Output Only] Type of resource. Always compute#diskTypeList for disk types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$DiskTypesScopedList {
        /**
         * [Output Only] A list of disk types contained in this scope.
         */
        diskTypes?: Schema$DiskType[];
        /**
         * [Output Only] Informational warning which replaces the list of disk types when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A set of Display Device options
     */
    interface Schema$DisplayDevice {
        /**
         * Defines whether the instance has Display enabled.
         */
        enableDisplay?: boolean;
    }
    interface Schema$DistributionPolicy {
        /**
         * Zones where the regional managed instance group will create and manage instances.
         */
        zones?: Schema$DistributionPolicyZoneConfiguration[];
    }
    interface Schema$DistributionPolicyZoneConfiguration {
        /**
         * The URL of the zone. The zone must exist in the region where the managed instance group is located.
         */
        zone?: string;
    }
    /**
     * A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like &quot;day&quot; or &quot;month&quot;. Range is approximately 10,000 years.
     */
    interface Schema$Duration {
        /**
         * Span of time that&#39;s a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
         */
        nanos?: number;
        /**
         * Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
         */
        seconds?: string;
    }
    interface Schema$ExchangedPeeringRoute {
        /**
         * The destination range of the route.
         */
        destRange?: string;
        /**
         * True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict.
         */
        imported?: boolean;
        /**
         * The region of peering route next hop, only applies to dynamic routes.
         */
        nextHopRegion?: string;
        /**
         * The priority of the peering route.
         */
        priority?: number;
        /**
         * The type of the peering route.
         */
        type?: string;
    }
    interface Schema$ExchangedPeeringRoutesList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of ExchangedPeeringRoute resources.
         */
        items?: Schema$ExchangedPeeringRoute[];
        /**
         * [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents an expression text. Example:  title: &quot;User account presence&quot; description: &quot;Determines whether the request has a user account&quot; expression: &quot;size(request.user) &gt; 0&quot;
     */
    interface Schema$Expr {
        /**
         * An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
         */
        description?: string;
        /**
         * Textual representation of an expression in Common Expression Language syntax.  The application context of the containing message determines which well-known feature set of CEL is supported.
         */
        expression?: string;
        /**
         * An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
         */
        location?: string;
        /**
         * An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
         */
        title?: string;
    }
    /**
     * External VPN gateway is the on-premises VPN gateway(s) or another cloud provider?s VPN gateway that connects to your Google Cloud VPN gateway. To create a highly available VPN from Google Cloud to your on-premises side or another Cloud provider&#39;s VPN gateway, you must create a external VPN gateway resource in GCP, which provides the information to GCP about your external VPN gateway.
     */
    interface Schema$ExternalVpnGateway {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * List of interfaces for this external VPN gateway.
         */
        interfaces?: Schema$ExternalVpnGatewayInterface[];
        /**
         * [Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this ExternalVpnGateway resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Indicates the user-supplied redundancy type of this external VPN gateway.
         */
        redundancyType?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
    }
    /**
     * The interface for the external VPN gateway.
     */
    interface Schema$ExternalVpnGatewayInterface {
        /**
         * The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: SINGLE_IP_INTERNALLY_REDUNDANT - 0 TWO_IPS_REDUNDANCY - 0, 1 FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
         */
        id?: number;
        /**
         * IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider?s VPN gateway, it cannot be an IP address from Google Compute Engine.
         */
        ipAddress?: string;
    }
    /**
     * Response to the list request, and contains a list of externalVpnGateways.
     */
    interface Schema$ExternalVpnGatewayList {
        etag?: string;
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of ExternalVpnGateway resources.
         */
        items?: Schema$ExternalVpnGateway[];
        /**
         * [Output Only] Type of resource. Always compute#externalVpnGatewayList  for lists of externalVpnGateways.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$FileContentBuffer {
        /**
         * The raw content in the secure keys file.
         */
        content?: string;
        fileType?: string;
    }
    /**
     * Represents a Firewall Rule resource.  Firewall rules allow or deny ingress traffic to, and egress traffic from your instances. For more information, read Firewall rules.
     */
    interface Schema$Firewall {
        /**
         * The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection.
         */
        allowed?: Array<{
            IPProtocol?: string;
            ports?: string[];
        }>;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection.
         */
        denied?: Array<{
            IPProtocol?: string;
            ports?: string[];
        }>;
        /**
         * An optional description of this resource. Provide this field when you create the resource.
         */
        description?: string;
        /**
         * If destination ranges are specified, the firewall rule applies only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported.
         */
        destinationRanges?: string[];
        /**
         * Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `INGRESS` traffic, you cannot specify the destinationRanges field, and for `EGRESS` traffic, you cannot specify the sourceRanges or sourceTags fields.
         */
        direction?: string;
        /**
         * Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled.
         */
        disabled?: boolean;
        /**
         * Deprecated in favor of enable in LogConfig. This field denotes whether to enable logging for a particular firewall rule. If logging is enabled, logs will be exported to Stackdriver.
         */
        enableLogging?: boolean;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#firewall for firewall rules.
         */
        kind?: string;
        /**
         * This field denotes the logging options for a particular firewall rule. If logging is enabled, logs will be exported to Stackdriver.
         */
        logConfig?: Schema$FirewallLogConfig;
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
         */
        name?: string;
        /**
         * URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network  - projects/myproject/global/networks/my-network  - global/networks/default
         */
        network?: string;
        /**
         * Priority for this rule. This is an integer between `0` and `65535`, both inclusive. The default value is `1000`. Relative priorities determine which rule takes effect if multiple rules apply. Lower values indicate higher priority. For example, a rule with priority `0` has higher precedence than a rule with priority `1`. DENY rules take precedence over ALLOW rules if they have equal priority. Note that VPC networks have implied rules with a priority of `65535`. To avoid conflicts with the implied rules, use a priority number less than `65535`.
         */
        priority?: number;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * If source ranges are specified, the firewall rule applies only to traffic that has a source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both fields are set, the rule applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the rule to apply. Only IPv4 is supported.
         */
        sourceRanges?: string[];
        /**
         * If source service accounts are specified, the firewall rules apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance&#39;s external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall applies to traffic that has a source IP address within the sourceRanges OR a source IP that belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both fields for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags.
         */
        sourceServiceAccounts?: string[];
        /**
         * If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance&#39;s external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both fields are set, the firewall applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the firewall to apply.
         */
        sourceTags?: string[];
        /**
         * A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network.
         */
        targetServiceAccounts?: string[];
        /**
         * A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network.
         */
        targetTags?: string[];
    }
    /**
     * Contains a list of firewalls.
     */
    interface Schema$FirewallList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Firewall resources.
         */
        items?: Schema$Firewall[];
        /**
         * [Output Only] Type of resource. Always compute#firewallList for lists of firewalls.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * The available logging options for a firewall rule.
     */
    interface Schema$FirewallLogConfig {
        /**
         * This field denotes whether to enable logging for a particular firewall rule.
         */
        enable?: boolean;
        /**
         * This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
         */
        metadata?: string;
    }
    /**
     * Encapsulates numeric value that can be either absolute or relative.
     */
    interface Schema$FixedOrPercent {
        /**
         * [Output Only] Absolute value of VM instances calculated based on the specific mode.    - If the value is fixed, then the calculated value is equal to the fixed value.  - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded up.
         */
        calculated?: number;
        /**
         * Specifies a fixed number of VM instances. This must be a positive integer.
         */
        fixed?: number;
        /**
         * Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
         */
        percent?: number;
    }
    /**
     * Represents a Forwarding Rule resource.    A forwardingRules resource represents a regional forwarding rule.  Regional external forwarding rules can reference any of the following resources:   - A target instance  - A Cloud VPN Classic gateway (targetVpnGateway),   - A target pool for a Network Load Balancer  - A global target HTTP(S) proxy for an HTTP(S) load balancer using Standard Tier  - A target SSL proxy for a SSL Proxy load balancer using Standard Tier  - A target TCP proxy for a TCP Proxy load balancer using Standard Tier.    Regional internal forwarding rules can reference the backend service of an internal TCP/UDP load balancer.  For regional internal forwarding rules, the following applies:   - If the loadBalancingScheme for the load balancer is INTERNAL, then the forwarding rule references a regional internal backend service.  - If the loadBalancingScheme for the load balancer is INTERNAL_MANAGED, then the forwarding rule must reference a regional target HTTP(S) proxy.    For more information, read Using Forwarding rules.  A globalForwardingRules resource represents a global forwarding rule.  Global forwarding rules are only used by load balancers that use Premium Tier. (== resource_for beta.forwardingRules ==) (== resource_for v1.forwardingRules ==) (== resource_for beta.globalForwardingRules ==) (== resource_for v1.globalForwardingRules ==) (== resource_for beta.regionForwardingRules ==) (== resource_for v1.regionForwardingRules ==)
     */
    interface Schema$ForwardingRule {
        /**
         * This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If the field is set to TRUE, clients can access ILB from all regions. Otherwise only allows access from clients in the same region as the internal load balancer.
         */
        allowGlobalAccess?: boolean;
        /**
         * This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. This field cannot be used with port or portRange fields.  When the load balancing scheme is INTERNAL and protocol is TCP/UDP, specify this field to allow packets addressed to any ports will be forwarded to the backends configured with this forwarding rule.
         */
        allPorts?: boolean;
        /**
         * This field is only used for INTERNAL load balancing.  For internal load balancing, this field identifies the BackendService resource to receive the matched traffic.
         */
        backendService?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule. Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request.  To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
         */
        fingerprint?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * The IP address that this forwarding rule is serving on behalf of.  Addresses are restricted based on the forwarding rule&#39;s load balancing scheme (EXTERNAL or INTERNAL) and scope (global or regional).  When the load balancing scheme is EXTERNAL, for global forwarding rules, the address must be a global IP, and for regional forwarding rules, the address must live in the same region as the forwarding rule. If this field is empty, an ephemeral IPv4 address from the same scope (global or regional) will be assigned. A regional forwarding rule supports IPv4 only. A global forwarding rule supports either IPv4 or IPv6.  When the load balancing scheme is INTERNAL_SELF_MANAGED, this must be a URL reference to an existing Address resource ( internal regional static IP address), with a purpose of GCE_END_POINT and address_type of INTERNAL.  When the load balancing scheme is INTERNAL, this can only be an RFC 1918 IP address belonging to the network/subnet configured for the forwarding rule. By default, if this field is empty, an ephemeral internal IP address will be automatically allocated from the IP range of the subnet or network configured for this forwarding rule.  An address can be specified either by a literal IP address or a URL reference to an existing Address resource. The following examples are all valid:   - 100.1.2.3  - https://www.googleapis.com/compute/v1/projects/project/regions/region/addresses/address  - projects/project/regions/region/addresses/address  - regions/region/addresses/address  - global/addresses/address  - address
         */
        IPAddress?: string;
        /**
         * The IP protocol to which this rule applies. Valid options are TCP, UDP, ESP, AH, SCTP or ICMP.  When the load balancing scheme is INTERNAL, only TCP and UDP are valid. When the load balancing scheme is INTERNAL_SELF_MANAGED, only TCPis valid.
         */
        IPProtocol?: string;
        /**
         * The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule.
         */
        ipVersion?: string;
        /**
         * Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL.
         */
        isMirroringCollector?: boolean;
        /**
         * [Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this resource, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this resource. These can be later modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * This signifies what the ForwardingRule will be used for and can only take the following values: INTERNAL, INTERNAL_SELF_MANAGED, EXTERNAL. The value of INTERNAL means that this will be used for Internal Network Load Balancing (TCP, UDP). The value of INTERNAL_SELF_MANAGED means that this will be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Load Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy)
         */
        loadBalancingScheme?: string;
        /**
         * Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata. metadataFilters specified here can be overridden by those specified in the UrlMap that this ForwardingRule references. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
         */
        metadataFilters?: Schema$MetadataFilter[];
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * This field is not used for external load balancing.  For INTERNAL and INTERNAL_SELF_MANAGED load balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used.
         */
        network?: string;
        /**
         * This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM , STANDARD.  For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.  If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
         */
        networkTier?: string;
        /**
         * This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.  Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.  Some types of forwarding target have constraints on the acceptable ports:   - TargetHttpProxy: 80, 8080  - TargetHttpsProxy: 443  - TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222  - TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222  - TargetVpnGateway: 500, 4500
         */
        portRange?: string;
        /**
         * This field is used along with the backend_service field for internal load balancing.  When the load balancing scheme is INTERNAL, a list of ports can be configured, for example, [&#39;80&#39;], [&#39;8000&#39;,&#39;9000&#39;] etc. Only packets addressed to these ports will be forwarded to the backends configured with this forwarding rule.  You may specify a maximum of up to 5 ports.
         */
        ports?: string[];
        /**
         * [Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * An optional prefix to the service name for this Forwarding Rule. If specified, will be the first label of the fully qualified service name.  The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.  This field is only used for internal load balancing.
         */
        serviceLabel?: string;
        /**
         * [Output Only] The internal fully qualified service name for this Forwarding Rule.  This field is only used for internal load balancing.
         */
        serviceName?: string;
        /**
         * This field is only used for INTERNAL load balancing.  For internal load balancing, this field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule.  If the network specified is in auto subnet mode, this field is optional. However, if the network is in custom subnet mode, a subnetwork must be specified.
         */
        subnetwork?: string;
        /**
         * The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must live in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. For INTERNAL_SELF_MANAGED load balancing, only HTTP and HTTPS targets are valid.
         */
        target?: string;
    }
    interface Schema$ForwardingRuleAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of ForwardingRulesScopedList resources.
         */
        items?: {
            [key: string]: Schema$ForwardingRulesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of ForwardingRule resources.
     */
    interface Schema$ForwardingRuleList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of ForwardingRule resources.
         */
        items?: Schema$ForwardingRule[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$ForwardingRuleReference {
        forwardingRule?: string;
    }
    interface Schema$ForwardingRulesScopedList {
        /**
         * A list of forwarding rules contained in this scope.
         */
        forwardingRules?: Schema$ForwardingRule[];
        /**
         * Informational warning which replaces the list of forwarding rules when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$GlobalNetworkEndpointGroupsAttachEndpointsRequest {
        /**
         * The list of network endpoints to be attached.
         */
        networkEndpoints?: Schema$NetworkEndpoint[];
    }
    interface Schema$GlobalNetworkEndpointGroupsDetachEndpointsRequest {
        /**
         * The list of network endpoints to be detached.
         */
        networkEndpoints?: Schema$NetworkEndpoint[];
    }
    interface Schema$GlobalSetLabelsRequest {
        /**
         * The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint.
         */
        labelFingerprint?: string;
        /**
         * A list of labels to apply for this resource. Each label key &amp; value must comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. For example, &quot;webserver-frontend&quot;: &quot;images&quot;. A label value can also be empty (e.g. &quot;my-label&quot;: &quot;&quot;).
         */
        labels?: {
            [key: string]: string;
        };
    }
    interface Schema$GlobalSetPolicyRequest {
        /**
         * Flatten Policy to create a backward compatible wire-format. Deprecated. Use &#39;policy&#39; to specify bindings.
         */
        bindings?: Schema$Binding[];
        /**
         * Flatten Policy to create a backward compatible wire-format. Deprecated. Use &#39;policy&#39; to specify the etag.
         */
        etag?: string;
        /**
         * REQUIRED: The complete policy to be applied to the &#39;resource&#39;. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
         */
        policy?: Schema$Policy;
    }
    /**
     * gRPC config to access the SDS server.
     */
    interface Schema$GrpcServiceConfig {
        /**
         * The call credentials to access the SDS server.
         */
        callCredentials?: Schema$CallCredentials;
        /**
         * The channel credentials to access the SDS server.
         */
        channelCredentials?: Schema$ChannelCredentials;
        /**
         * The target URI of the SDS server.
         */
        targetUri?: string;
    }
    /**
     * A guest attributes entry.
     */
    interface Schema$GuestAttributes {
        /**
         * [Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry.
         */
        kind?: string;
        /**
         * The path to be queried. This can be the default namespace (&#39;/&#39;) or a nested namespace (&#39;//&#39;) or a specified key (&#39;//&#39;)
         */
        queryPath?: string;
        /**
         * [Output Only] The value of the requested queried path.
         */
        queryValue?: Schema$GuestAttributesValue;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * The key to search for.
         */
        variableKey?: string;
        /**
         * [Output Only] The value found for the requested key.
         */
        variableValue?: string;
    }
    /**
     * A guest attributes namespace/key/value entry.
     */
    interface Schema$GuestAttributesEntry {
        /**
         * Key for the guest attribute entry.
         */
        key?: string;
        /**
         * Namespace for the guest attribute entry.
         */
        namespace?: string;
        /**
         * Value for the guest attribute entry.
         */
        value?: string;
    }
    /**
     * Array of guest attribute namespace/key/value tuples.
     */
    interface Schema$GuestAttributesValue {
        items?: Schema$GuestAttributesEntry[];
    }
    /**
     * Guest OS features.
     */
    interface Schema$GuestOsFeature {
        /**
         * The ID of a supported feature. Read  Enabling guest operating system features to see a list of available options.
         */
        type?: string;
    }
    /**
     * Represents a Health Check resource.  Health checks are used for most GCP load balancers and managed instance group auto-healing. For more information, read Health Check Concepts.  To perform health checks on network load balancers, you must use either httpHealthChecks or httpsHealthChecks.
     */
    interface Schema$HealthCheck {
        /**
         * How often (in seconds) to send a health check. The default value is 5 seconds.
         */
        checkIntervalSec?: number;
        /**
         * [Output Only] Creation timestamp in 3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
         */
        healthyThreshold?: number;
        http2HealthCheck?: Schema$HTTP2HealthCheck;
        httpHealthCheck?: Schema$HTTPHealthCheck;
        httpsHealthCheck?: Schema$HTTPSHealthCheck;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * Type of the resource.
         */
        kind?: string;
        /**
         * Configure logging on this health check.
         */
        logConfig?: Schema$HealthCheckLogConfig;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] Region where the health check resides. Not applicable to global health checks.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        sslHealthCheck?: Schema$SSLHealthCheck;
        tcpHealthCheck?: Schema$TCPHealthCheck;
        /**
         * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
         */
        timeoutSec?: number;
        /**
         * Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field.
         */
        type?: string;
        udpHealthCheck?: Schema$UDPHealthCheck;
        /**
         * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
         */
        unhealthyThreshold?: number;
    }
    /**
     * Contains a list of HealthCheck resources.
     */
    interface Schema$HealthCheckList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of HealthCheck resources.
         */
        items?: Schema$HealthCheck[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
     */
    interface Schema$HealthCheckLogConfig {
        /**
         * Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
         */
        enable?: boolean;
        /**
         * Specifies the desired filtering of logs on this health check. If this is unspecified and enable is true, logs are exported with LOG_TRANSITION filter.
         */
        filter?: string;
    }
    /**
     * A full or valid partial URL to a health check. For example, the following are valid URLs:   - https://www.googleapis.com/compute/beta/projects/project-id/global/httpHealthChecks/health-check  - projects/project-id/global/httpHealthChecks/health-check  - global/httpHealthChecks/health-check
     */
    interface Schema$HealthCheckReference {
        healthCheck?: string;
    }
    interface Schema$HealthChecksAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of HealthChecksScopedList resources.
         */
        items?: {
            [key: string]: Schema$HealthChecksScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A HealthCheckService defines a set of backends on which to perform periodic health checks and an endpoint to which to send notification of changes in the health status of the backends.
     */
    interface Schema$HealthCheckService {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * List of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks&lt;/code? must belong to the same region as zones of NEGs.
         */
        healthChecks?: string[];
        /**
         * Policy for how the results from multiple health checks for the same endpoint are aggregated.   - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service.  - AND. If any backend&#39;s health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend&#39;s are healthy, the HealthState of the health check service is HEALTHY. .
         */
        healthStatusAggregationStrategy?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
         */
        kind?: string;
        /**
         * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * List of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
         */
        networkEndpointGroups?: string[];
        /**
         * List of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
         */
        notificationEndpoints?: string[];
        /**
         * [Output Only] URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL with id for the resource.
         */
        selfLinkWithId?: string;
    }
    /**
     * A full or valid partial URL to a health check service. For example, the following are valid URLs:   - https://www.googleapis.com/compute/beta/projects/project-id/regions/us-west1/healthCheckServices/health-check-service  - projects/project-id/regions/us-west1/healthCheckServices/health-check-service  - regions/us-west1/healthCheckServices/health-check-service
     */
    interface Schema$HealthCheckServiceReference {
        healthCheckService?: string;
    }
    interface Schema$HealthCheckServicesList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of HealthCheckService resources.
         */
        items?: Schema$HealthCheckService[];
        /**
         * [Output Only] Type of the resource. Always compute#healthCheckServicesList for lists of HealthCheckServices.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$HealthChecksScopedList {
        /**
         * A list of HealthChecks contained in this scope.
         */
        healthChecks?: Schema$HealthCheck[];
        /**
         * Informational warning which replaces the list of backend services when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$HealthStatus {
        /**
         * Metadata defined as annotations for network endpoint.
         */
        annotations?: {
            [key: string]: string;
        };
        /**
         * Health state of the instance.
         */
        healthState?: string;
        /**
         * URL of the instance resource.
         */
        instance?: string;
        /**
         * The IP address represented by this resource.
         */
        ipAddress?: string;
        /**
         * The port on the instance.
         */
        port?: number;
    }
    interface Schema$HealthStatusForNetworkEndpoint {
        /**
         * URL of the backend service associated with the health state of the network endpoint.
         */
        backendService?: Schema$BackendServiceReference;
        /**
         * URL of the forwarding rule associated with the health state of the network endpoint.
         */
        forwardingRule?: Schema$ForwardingRuleReference;
        /**
         * URL of the health check associated with the health state of the network endpoint.
         */
        healthCheck?: Schema$HealthCheckReference;
        /**
         * URL of the health check service associated with the health state of the network endpoint.
         */
        healthCheckService?: Schema$HealthCheckServiceReference;
        /**
         * Health state of the network endpoint determined based on the health checks configured.
         */
        healthState?: string;
    }
    /**
     * UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
     */
    interface Schema$HostRule {
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * The list of host patterns to match. They must be valid hostnames, except * will match any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or ..
         */
        hosts?: string[];
        /**
         * The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL&#39;s host portion.
         */
        pathMatcher?: string;
    }
    interface Schema$HTTP2HealthCheck {
        /**
         * The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
         */
        host?: string;
        /**
         * The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
         */
        port?: number;
        /**
         * Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
         */
        portName?: string;
        /**
         * Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.   If not specified, HTTP2 health check follows behavior specified in port and portName fields.
         */
        portSpecification?: string;
        /**
         * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
         */
        proxyHeader?: string;
        /**
         * The request path of the HTTP/2 health check request. The default value is /.
         */
        requestPath?: string;
        /**
         * The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
         */
        response?: string;
    }
    /**
     * Specification for how requests are aborted as part of fault injection.
     */
    interface Schema$HttpFaultAbort {
        /**
         * The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
         */
        httpStatus?: number;
        /**
         * The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
         */
        percentage?: number;
    }
    /**
     * Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection.
     */
    interface Schema$HttpFaultDelay {
        /**
         * Specifies the value of the fixed delay interval.
         */
        fixedDelay?: Schema$Duration;
        /**
         * The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
         */
        percentage?: number;
    }
    /**
     * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.
     */
    interface Schema$HttpFaultInjection {
        /**
         * The specification for how client requests are aborted as part of fault injection.
         */
        abort?: Schema$HttpFaultAbort;
        /**
         * The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
         */
        delay?: Schema$HttpFaultDelay;
    }
    /**
     * The request and response header transformations that take effect before the request is passed along to the selected backendService.
     */
    interface Schema$HttpHeaderAction {
        /**
         * Headers to add to a matching request prior to forwarding the request to the backendService.
         */
        requestHeadersToAdd?: Schema$HttpHeaderOption[];
        /**
         * A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
         */
        requestHeadersToRemove?: string[];
        /**
         * Headers to add the response prior to sending the response back to the client.
         */
        responseHeadersToAdd?: Schema$HttpHeaderOption[];
        /**
         * A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
         */
        responseHeadersToRemove?: string[];
    }
    /**
     * matchRule criteria for request header matches.
     */
    interface Schema$HttpHeaderMatch {
        /**
         * The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
         */
        exactMatch?: string;
        /**
         * The name of the HTTP header to match. For matching against the HTTP request&#39;s authority, use a headerMatch with the header name &quot;:authority&quot;. For matching a request&#39;s method, use the headerName &quot;:method&quot;.
         */
        headerName?: string;
        /**
         * If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. The default setting is false.
         */
        invertMatch?: boolean;
        /**
         * The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
         */
        prefixMatch?: string;
        /**
         * A header with the contents of headerName must exist. The match takes place whether or not the request&#39;s header has a value or not. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
         */
        presentMatch?: boolean;
        /**
         * The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will not match.  - 0.25 will not match.  - -3someString will not match.   Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
         */
        rangeMatch?: Schema$Int64RangeMatch;
        /**
         * The value of the header must match the regualar expression specified in regexMatch. For regular expression grammar, please see:  en.cppreference.com/w/cpp/regex/ecmascript  For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header&#39;s port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
         */
        regexMatch?: string;
        /**
         * The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
         */
        suffixMatch?: string;
    }
    /**
     * Specification determining how headers are added to requests or responses.
     */
    interface Schema$HttpHeaderOption {
        /**
         * The name of the header.
         */
        headerName?: string;
        /**
         * The value of the header to add.
         */
        headerValue?: string;
        /**
         * If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
         */
        replace?: boolean;
    }
    interface Schema$HTTPHealthCheck {
        /**
         * The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
         */
        host?: string;
        /**
         * The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
         */
        port?: number;
        /**
         * Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
         */
        portName?: string;
        /**
         * Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.   If not specified, HTTP health check follows behavior specified in port and portName fields.
         */
        portSpecification?: string;
        /**
         * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
         */
        proxyHeader?: string;
        /**
         * The request path of the HTTP health check request. The default value is /.
         */
        requestPath?: string;
        /**
         * The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
         */
        response?: string;
    }
    /**
     * Represents a legacy HTTP Health Check resource.  Legacy health checks are required by network load balancers. For more information, read Health Check Concepts.
     */
    interface Schema$HttpHealthCheck {
        /**
         * How often (in seconds) to send a health check. The default value is 5 seconds.
         */
        checkIntervalSec?: number;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
         */
        healthyThreshold?: number;
        /**
         * The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
         */
        host?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The TCP port number for the HTTP health check request. The default value is 80.
         */
        port?: number;
        /**
         * The request path of the HTTP health check request. The default value is /. This field does not support query parameters.
         */
        requestPath?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
         */
        timeoutSec?: number;
        /**
         * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
         */
        unhealthyThreshold?: number;
    }
    /**
     * Contains a list of HttpHealthCheck resources.
     */
    interface Schema$HttpHealthCheckList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of HttpHealthCheck resources.
         */
        items?: Schema$HttpHealthCheck[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * HttpRouteRuleMatch criteria for a request&#39;s query parameter.
     */
    interface Schema$HttpQueryParameterMatch {
        /**
         * The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch must be set.
         */
        exactMatch?: string;
        /**
         * The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
         */
        name?: string;
        /**
         * Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch and regexMatch must be set.
         */
        presentMatch?: boolean;
        /**
         * The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch, exactMatch and regexMatch must be set.
         */
        regexMatch?: string;
    }
    /**
     * Specifies settings for an HTTP redirect.
     */
    interface Schema$HttpRedirectAction {
        /**
         * The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
         */
        hostRedirect?: string;
        /**
         * If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
         */
        httpsRedirect?: boolean;
        /**
         * The path that will be used in the redirect response instead of the one that was supplied in the request. Only one of pathRedirect or prefixRedirect must be specified. The value must be between 1 and 1024 characters.
         */
        pathRedirect?: string;
        /**
         * The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request.
         */
        prefixRedirect?: string;
        /**
         * The HTTP Status code to use for this RedirectAction. Supported values are:   - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  - FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
         */
        redirectResponseCode?: string;
        /**
         * If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
         */
        stripQuery?: boolean;
    }
    /**
     * The retry policy associates with HttpRouteRule
     */
    interface Schema$HttpRetryPolicy {
        /**
         * Specifies the allowed number retries. This number must be &gt; 0.
         */
        numRetries?: number;
        /**
         * Specifies a non-zero timeout per retry attempt.
         */
        perTryTimeout?: Schema$Duration;
        /**
         * Specfies one or more conditions when this retry rule applies. Valid values are:   - 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.  - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. -  - connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts.  - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409.  - refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.  - cancelledLoadbalancer will retry if the gRPC status code in the response header is set to cancelled  - deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded  - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted  - unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable
         */
        retryConditions?: string[];
    }
    interface Schema$HttpRouteAction {
        /**
         * The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
         */
        corsPolicy?: Schema$CorsPolicy;
        /**
         * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
         */
        faultInjectionPolicy?: Schema$HttpFaultInjection;
        /**
         * Specifies the policy on how requests intended for the route&#39;s backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
         */
        requestMirrorPolicy?: Schema$RequestMirrorPolicy;
        /**
         * Specifies the retry policy associated with this route.
         */
        retryPolicy?: Schema$HttpRetryPolicy;
        /**
         * Specifies the timeout for the selected route. Timeout is computed from the time the request is has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, the default value is 15 seconds.
         */
        timeout?: Schema$Duration;
        /**
         * The spec to modify the URL of the request, prior to forwarding the request to the matched service
         */
        urlRewrite?: Schema$UrlRewrite;
        /**
         * A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one  weightedBackendService with weight set to a non 0 number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
         */
        weightedBackendServices?: Schema$WeightedBackendService[];
    }
    /**
     * An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform.
     */
    interface Schema$HttpRouteRule {
        /**
         * Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction
         */
        headerAction?: Schema$HttpHeaderAction;
        matchRules?: Schema$HttpRouteRuleMatch[];
        /**
         * In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If  routeAction specifies any  weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices. Only one of routeAction or urlRedirect must be set.
         */
        routeAction?: Schema$HttpRouteAction;
        /**
         * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any  weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
         */
        service?: string;
        /**
         * When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set.
         */
        urlRedirect?: Schema$HttpRedirectAction;
    }
    /**
     * HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
     */
    interface Schema$HttpRouteRuleMatch {
        /**
         * For satifying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. FullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
         */
        fullPathMatch?: string;
        /**
         * Specifies a list of header match criteria, all of which must match corresponding headers in the request.
         */
        headerMatches?: Schema$HttpHeaderMatch[];
        /**
         * Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. caseSensitive must not be used with regexMatch.
         */
        ignoreCase?: boolean;
        /**
         * Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata. metadataFilters specified here can be overrides those specified in ForwardingRule that refers to this UrlMap. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
         */
        metadataFilters?: Schema$MetadataFilter[];
        /**
         * For satifying the matchRule condition, the request&#39;s path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
         */
        prefixMatch?: string;
        /**
         * Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
         */
        queryParameterMatches?: Schema$HttpQueryParameterMatch[];
        /**
         * For satifying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
         */
        regexMatch?: string;
    }
    interface Schema$HTTPSHealthCheck {
        /**
         * The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
         */
        host?: string;
        /**
         * The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
         */
        port?: number;
        /**
         * Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
         */
        portName?: string;
        /**
         * Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.   If not specified, HTTPS health check follows behavior specified in port and portName fields.
         */
        portSpecification?: string;
        /**
         * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
         */
        proxyHeader?: string;
        /**
         * The request path of the HTTPS health check request. The default value is /.
         */
        requestPath?: string;
        /**
         * The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
         */
        response?: string;
    }
    /**
     * Represents a legacy HTTPS Health Check resource.  Legacy health checks are required by network load balancers. For more information, read Health Check Concepts.
     */
    interface Schema$HttpsHealthCheck {
        /**
         * How often (in seconds) to send a health check. The default value is 5 seconds.
         */
        checkIntervalSec?: number;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
         */
        healthyThreshold?: number;
        /**
         * The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
         */
        host?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * Type of the resource.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The TCP port number for the HTTPS health check request. The default value is 443.
         */
        port?: number;
        /**
         * The request path of the HTTPS health check request. The default value is &quot;/&quot;.
         */
        requestPath?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
         */
        timeoutSec?: number;
        /**
         * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
         */
        unhealthyThreshold?: number;
    }
    /**
     * Contains a list of HttpsHealthCheck resources.
     */
    interface Schema$HttpsHealthCheckList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of HttpsHealthCheck resources.
         */
        items?: Schema$HttpsHealthCheck[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents an Image resource.  You can use images to create boot disks for your VM instances. For more information, read Images. (== resource_for beta.images ==) (== resource_for v1.images ==)
     */
    interface Schema$Image {
        /**
         * Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
         */
        archiveSizeBytes?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * The deprecation status associated with this image.
         */
        deprecated?: Schema$DeprecationStatus;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Size of the image when restored onto a persistent disk (in GB).
         */
        diskSizeGb?: string;
        /**
         * The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.
         */
        family?: string;
        /**
         * A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.
         */
        guestOsFeatures?: Schema$GuestOsFeature[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * Encrypts the image using a customer-supplied encryption key.  After you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g. to create a disk from the image).  Customer-supplied encryption keys do not protect access to metadata of the disk.  If you do not provide an encryption key when creating the image, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the image later.
         */
        imageEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] Type of the resource. Always compute#image for images.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an image.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this image. These can be later modified by the setLabels method.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Integer license codes indicating which licenses are attached to this image.
         */
        licenseCodes?: string[];
        /**
         * Any applicable license URI.
         */
        licenses?: string[];
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The parameters of the raw disk image.
         */
        rawDisk?: {
            containerType?: string;
            sha1Checksum?: string;
            source?: string;
        };
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource&#39;s resource id.
         */
        selfLinkWithId?: string;
        /**
         * Set the secure boot keys of shielded instance.
         */
        shieldedInstanceInitialState?: Schema$InitialStateConfig;
        /**
         * URL of the source disk used to create this image. This can be a full or valid partial URL. You must provide either this property or the rawDisk.source property but not both to create an image. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk
         */
        sourceDisk?: string;
        /**
         * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
         */
        sourceDiskEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name.
         */
        sourceDiskId?: string;
        /**
         * URL of the source image used to create this image. This can be a full or valid partial URL. You must provide exactly one of:   - this property, or   - the rawDisk.source property, or   - the sourceDisk property   in order to create an image.
         */
        sourceImage?: string;
        /**
         * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
         */
        sourceImageEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name.
         */
        sourceImageId?: string;
        /**
         * URL of the source snapshot used to create this image. This can be a full or valid partial URL. You must provide exactly one of:   - this property, or   - the sourceImage property, or   - the rawDisk.source property, or   - the sourceDisk property   in order to create an image.
         */
        sourceSnapshot?: string;
        /**
         * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
         */
        sourceSnapshotEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name.
         */
        sourceSnapshotId?: string;
        /**
         * The type of the image used to create this disk. The default and only value is RAW
         */
        sourceType?: string;
        /**
         * [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY.
         */
        status?: string;
        /**
         * GCS bucket storage location of the image (regional or multi-regional).
         */
        storageLocations?: string[];
    }
    /**
     * Contains a list of images.
     */
    interface Schema$ImageList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Image resources.
         */
        items?: Schema$Image[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Initial State for shielded instance, these are public keys which are safe to store in public
     */
    interface Schema$InitialStateConfig {
        /**
         * The Key Database (db).
         */
        dbs?: Schema$FileContentBuffer[];
        /**
         * The forbidden key database (dbx).
         */
        dbxs?: Schema$FileContentBuffer[];
        /**
         * The Key Exchange Key (KEK).
         */
        keks?: Schema$FileContentBuffer[];
        /**
         * The Platform Key (PK).
         */
        pk?: Schema$FileContentBuffer;
    }
    /**
     * Represents an Instance resource.  An instance is a virtual machine that is hosted on Google Cloud Platform. For more information, read Virtual Machine Instances. (== resource_for beta.instances ==) (== resource_for v1.instances ==)
     */
    interface Schema$Instance {
        /**
         * Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding.
         */
        canIpForward?: boolean;
        /**
         * [Output Only] The CPU platform used by this instance.
         */
        cpuPlatform?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * Whether the resource should be protected against deletion.
         */
        deletionProtection?: boolean;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Array of disks associated with this instance. Persistent disks must be created before you can assign them.
         */
        disks?: Schema$AttachedDisk[];
        /**
         * Enables display device for the instance.
         */
        displayDevice?: Schema$DisplayDevice;
        /**
         * Specifies whether the disks restored from source snapshots or source machine image should erase Windows specific VSS signature.
         */
        eraseWindowsVssSignature?: boolean;
        /**
         * A list of the type and count of accelerator cards attached to the instance.
         */
        guestAccelerators?: Schema$AcceleratorConfig[];
        hostname?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * Encrypts or decrypts data for an instance with a customer-supplied encryption key.  If you are creating a new instance, this field encrypts the local SSD and in-memory contents of the instance using a key that you provide.  If you are restarting an instance protected with a customer-supplied encryption key, you must provide the correct key in order to successfully restart the instance.  If you do not provide an encryption key when creating the instance, then the local SSD and in-memory contents will be encrypted using an automatically generated key and you do not need to provide a key to start the instance later.  Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt local SSDs and in-memory content in a managed instance group.
         */
        instanceEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] Type of the resource. Always compute#instance for instances.
         */
        kind?: string;
        /**
         * A fingerprint for this request, which is essentially a hash of the label&#39;s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels.  To see the latest fingerprint, make get() request to the instance.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this instance. These can be later modified by the setLabels method.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type: zones/us-central1-f/machineTypes/n1-standard-1   To create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB): zones/zone/machineTypes/custom-CPUS-MEMORY   For example: zones/us-central1-f/machineTypes/custom-4-5120   For a full list of restrictions, read the Specifications for custom machine types.
         */
        machineType?: string;
        /**
         * The metadata key/value pairs assigned to this instance. This includes custom metadata and predefined keys.
         */
        metadata?: Schema$Metadata;
        /**
         * Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: &quot;Intel Haswell&quot; or minCpuPlatform: &quot;Intel Sandy Bridge&quot;.
         */
        minCpuPlatform?: string;
        /**
         * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet. Multiple interfaces are supported per instance.
         */
        networkInterfaces?: Schema$NetworkInterface[];
        /**
         * Total amount of preserved state for SUSPENDED instances. Read-only in the api.
         */
        preservedStateSizeGb?: string;
        /**
         * Specifies the reservations that this instance can consume from.
         */
        reservationAffinity?: Schema$ReservationAffinity;
        /**
         * Resource policies applied to this instance.
         */
        resourcePolicies?: string[];
        /**
         * Sets the scheduling options for this instance.
         */
        scheduling?: Schema$Scheduling;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported.  Service accounts generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information.
         */
        serviceAccounts?: Schema$ServiceAccount[];
        shieldedInstanceConfig?: Schema$ShieldedInstanceConfig;
        shieldedInstanceIntegrityPolicy?: Schema$ShieldedInstanceIntegrityPolicy;
        shieldedVmConfig?: Schema$ShieldedVmConfig;
        shieldedVmIntegrityPolicy?: Schema$ShieldedVmIntegrityPolicy;
        /**
         * Source machine image
         */
        sourceMachineImage?: string;
        /**
         * Source GMI encryption key when creating an instance from GMI.
         */
        sourceMachineImageEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity.
         */
        startRestricted?: boolean;
        /**
         * [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, STOPPED, SUSPENDING, SUSPENDED, and TERMINATED.
         */
        status?: string;
        /**
         * [Output Only] An optional, human-readable explanation of the status.
         */
        statusMessage?: string;
        /**
         * Tags to apply to this instance. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during instance creation. The tags can be later modified by the setTags method. Each tag within the list must comply with RFC1035. Multiple tags can be specified via the &#39;tags.items&#39; field.
         */
        tags?: Schema$Tags;
        /**
         * [Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        zone?: string;
    }
    interface Schema$InstanceAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * An object that contains a list of instances scoped by zone.
         */
        items?: {
            [key: string]: Schema$InstancesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents an unmanaged Instance Group resource.  Use unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. For more information, read  Instance groups.  For zonal unmanaged Instance Group, use instanceGroups resource.  For regional unmanaged Instance Group, use regionInstanceGroups resource. (== resource_for beta.instanceGroups ==) (== resource_for v1.instanceGroups ==) (== resource_for beta.regionInstanceGroups ==) (== resource_for v1.regionInstanceGroups ==)
     */
    interface Schema$InstanceGroup {
        /**
         * [Output Only] The creation timestamp for this instance group in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently.
         */
        fingerprint?: string;
        /**
         * [Output Only] A unique identifier for this instance group, generated by the server.
         */
        id?: string;
        /**
         * [Output Only] The resource type, which is always compute#instanceGroup for instance groups.
         */
        kind?: string;
        /**
         * The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035.
         */
        name?: string;
        /**
         * Assigns a name to a port number. For example: {name: &quot;http&quot;, port: 80}  This allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: &quot;http&quot;, port: 80},{name: &quot;http&quot;, port: 8080}]   Named ports apply to all instances in this instance group.
         */
        namedPorts?: Schema$NamedPort[];
        /**
         * The URL of the network to which all instances in the instance group belong.
         */
        network?: string;
        /**
         * [Output Only] The URL of the region where the instance group is located (for regional resources).
         */
        region?: string;
        /**
         * [Output Only] The URL for this instance group. The server generates this URL.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The total number of instances in the instance group.
         */
        size?: number;
        /**
         * [Output Only] The URL of the subnetwork to which all instances in the instance group belong.
         */
        subnetwork?: string;
        /**
         * [Output Only] The URL of the zone where the instance group is located (for zonal resources).
         */
        zone?: string;
    }
    interface Schema$InstanceGroupAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceGroupsScopedList resources.
         */
        items?: {
            [key: string]: Schema$InstanceGroupsScopedList;
        };
        /**
         * [Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A list of InstanceGroup resources.
     */
    interface Schema$InstanceGroupList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceGroup resources.
         */
        items?: Schema$InstanceGroup[];
        /**
         * [Output Only] The resource type, which is always compute#instanceGroupList for instance group lists.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Managed Instance Group resource.  An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups.  For zonal Managed Instance Group, use the instanceGroupManagers resource.  For regional Managed Instance Group, use the regionInstanceGroupManagers resource. (== resource_for beta.instanceGroupManagers ==) (== resource_for v1.instanceGroupManagers ==) (== resource_for beta.regionInstanceGroupManagers ==) (== resource_for v1.regionInstanceGroupManagers ==)
     */
    interface Schema$InstanceGroupManager {
        /**
         * The autohealing policy for this managed instance group. You can specify only one value.
         */
        autoHealingPolicies?: Schema$InstanceGroupManagerAutoHealingPolicy[];
        /**
         * The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
         */
        baseInstanceName?: string;
        /**
         * [Output Only] The creation timestamp for this managed instance group in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] The list of instance actions and the number of instances in this managed instance group that are scheduled for each of those actions.
         */
        currentActions?: Schema$InstanceGroupManagerActionsSummary;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Policy specifying intended distribution of instances in regional managed instance group.
         */
        distributionPolicy?: Schema$DistributionPolicy;
        /**
         * The action to perform in case of zone failure. Only one value is supported, NO_FAILOVER. The default is NO_FAILOVER.
         */
        failoverAction?: string;
        /**
         * Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager.
         */
        fingerprint?: string;
        /**
         * [Output Only] A unique identifier for this resource type. The server generates this identifier.
         */
        id?: string;
        /**
         * [Output Only] The URL of the Instance Group resource.
         */
        instanceGroup?: string;
        /**
         * The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group.
         */
        instanceTemplate?: string;
        /**
         * [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups.
         */
        kind?: string;
        /**
         * The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
         */
        name?: string;
        /**
         * Named ports configured for the Instance Groups complementary to this Instance Group Manager.
         */
        namedPorts?: Schema$NamedPort[];
        /**
         * [Deprecated] This field is deprecated and will be removed. Prefer using the status field instead. Please contact cloud-updater-feedback@google.com to leave feedback if your workload relies on this field. [Output Only] The list of instance actions and the number of instances in this managed instance group that are pending for each of those actions.
         */
        pendingActions?: Schema$InstanceGroupManagerPendingActionsSummary;
        /**
         * [Output Only] The URL of the region where the managed instance group resides (for regional resources).
         */
        region?: string;
        /**
         * [Output Only] The URL for this managed instance group. The server defines this URL.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * The service account to be used as credentials for all operations performed by the managed instance group on instances. The service accounts needs all permissions required to create and delete instances. By default, the service account {projectNumber}@cloudservices.gserviceaccount.com is used.
         */
        serviceAccount?: string;
        /**
         * Stateful configuration for this Instanced Group Manager
         */
        statefulPolicy?: Schema$StatefulPolicy;
        /**
         * [Output Only] The status of this managed instance group.
         */
        status?: Schema$InstanceGroupManagerStatus;
        /**
         * The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
         */
        targetPools?: string[];
        /**
         * The target number of running instances for this managed instance group. Deleting or abandoning instances reduces this number. Resizing the group changes this number.
         */
        targetSize?: number;
        /**
         * The update policy for this managed instance group.
         */
        updatePolicy?: Schema$InstanceGroupManagerUpdatePolicy;
        /**
         * Specifies the instance templates used by this managed instance group to create instances.  Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
         */
        versions?: Schema$InstanceGroupManagerVersion[];
        /**
         * [Output Only] The URL of the zone where the managed instance group is located (for zonal resources).
         */
        zone?: string;
    }
    interface Schema$InstanceGroupManagerActionsSummary {
        /**
         * [Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
         */
        abandoning?: number;
        /**
         * [Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully.  If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
         */
        creating?: number;
        /**
         * [Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group&#39;s targetSize value accordingly.
         */
        creatingWithoutRetries?: number;
        /**
         * [Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
         */
        deleting?: number;
        /**
         * [Output Only] The number of instances in the managed instance group that are running and have no scheduled actions.
         */
        none?: number;
        /**
         * [Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
         */
        recreating?: number;
        /**
         * [Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
         */
        refreshing?: number;
        /**
         * [Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
         */
        restarting?: number;
        /**
         * [Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
         */
        verifying?: number;
    }
    interface Schema$InstanceGroupManagerAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceGroupManagersScopedList resources.
         */
        items?: {
            [key: string]: Schema$InstanceGroupManagersScopedList;
        };
        /**
         * [Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstanceGroupManagerAutoHealingPolicy {
        /**
         * The URL for the health check that signals autohealing.
         */
        healthCheck?: string;
        /**
         * The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
         */
        initialDelaySec?: number;
        /**
         * Maximum number of instances that can be unavailable when autohealing. When &#39;percent&#39; is used, the value is rounded UP. The instance is considered available if all of the following conditions are satisfied: 1. Instance&#39;s status is RUNNING. 2. Instance&#39;s currentAction is NONE (in particular its liveness health check result was observed to be HEALTHY at least once as it passed VERIFYING). 3. There is no outgoing action on an instance triggered by IGM.  By default, number of concurrently autohealed instances is smaller than the managed instance group target size. However, if a zonal managed instance group has only one instance, or a regional managed instance group has only one instance per zone, autohealing will recreate these instances when they become unhealthy.
         */
        maxUnavailable?: Schema$FixedOrPercent;
    }
    /**
     * [Output Only] A list of managed instance groups.
     */
    interface Schema$InstanceGroupManagerList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceGroupManager resources.
         */
        items?: Schema$InstanceGroupManager[];
        /**
         * [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstanceGroupManagerPendingActionsSummary {
        /**
         * [Deprecated] This field is deprecated and will be removed. Prefer using the status field instead. Please contact cloud-updater-feedback@google.com to leave feedback if your workload relies on this field. [Output Only] The number of instances in the managed instance group that are pending to be created.
         */
        creating?: number;
        /**
         * [Deprecated] This field is deprecated and will be removed. Prefer using the status field instead. Please contact cloud-updater-feedback@google.com to leave feedback if your workload relies on this field. [Output Only] The number of instances in the managed instance group that are pending to be deleted.
         */
        deleting?: number;
        /**
         * [Deprecated] This field is deprecated and will be removed. Prefer using the status field instead. Please contact cloud-updater-feedback@google.com to leave feedback if your workload relies on this field. [Output Only] The number of instances in the managed instance group that are pending to be recreated.
         */
        recreating?: number;
        /**
         * [Deprecated] This field is deprecated and will be removed. Prefer using the status field instead. Please contact cloud-updater-feedback@google.com to leave feedback if your workload relies on this field. [Output Only] The number of instances in the managed instance group that are pending to be restarted.
         */
        restarting?: number;
    }
    interface Schema$InstanceGroupManagersAbandonInstancesRequest {
        /**
         * The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
    }
    /**
     * InstanceGroupManagers.applyUpdatesToInstances
     */
    interface Schema$InstanceGroupManagersApplyUpdatesRequest {
        /**
         * The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
        /**
         * The maximal action that should be performed on the instances. By default REPLACE. This field is deprecated, please use most_disruptive_allowed_action.
         */
        maximalAction?: string;
        /**
         * The minimal action that you want to perform on each instance during the update:   - REPLACE: At minimum, delete the instance and create it again.  - RESTART: Stop the instance and start it again.  - REFRESH: Do not stop the instance.  - NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
         */
        minimalAction?: string;
        /**
         * The most disruptive action that you want to perform on each instance during the update:   - REPLACE: Delete the instance and create it again.  - RESTART: Stop the instance and start it again.  - REFRESH: Do not stop the instance.  - NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
         */
        mostDisruptiveAllowedAction?: string;
    }
    /**
     * InstanceGroupManagers.createInstances
     */
    interface Schema$InstanceGroupManagersCreateInstancesRequest {
        /**
         * [Required] List of specifications of per-instance configs.
         */
        instances?: Schema$PerInstanceConfig[];
    }
    interface Schema$InstanceGroupManagersDeleteInstancesRequest {
        /**
         * The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
    }
    /**
     * InstanceGroupManagers.deletePerInstanceConfigs
     */
    interface Schema$InstanceGroupManagersDeletePerInstanceConfigsReq {
        /**
         * The list of instances for which we want to delete per-instance configs on this managed instance group.
         */
        instances?: string[];
        /**
         * The list of instance names for which we want to delete per-instance configs on this managed instance group.
         */
        names?: string[];
    }
    interface Schema$InstanceGroupManagersListErrorsResponse {
        /**
         * [Output Only] The list of errors of the managed instance group.
         */
        items?: Schema$InstanceManagedByIgmError[];
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
    }
    interface Schema$InstanceGroupManagersListManagedInstancesResponse {
        /**
         * [Output Only] The list of instances in the managed instance group.
         */
        managedInstances?: Schema$ManagedInstance[];
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
    }
    interface Schema$InstanceGroupManagersListPerInstanceConfigsResp {
        /**
         * [Output Only] The list of PerInstanceConfig.
         */
        items?: Schema$PerInstanceConfig[];
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * InstanceGroupManagers.patchPerInstanceConfigs
     */
    interface Schema$InstanceGroupManagersPatchPerInstanceConfigsReq {
        /**
         * The list of per-instance configs to insert or patch on this managed instance group.
         */
        perInstanceConfigs?: Schema$PerInstanceConfig[];
    }
    interface Schema$InstanceGroupManagersRecreateInstancesRequest {
        /**
         * The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
    }
    interface Schema$InstanceGroupManagersResizeAdvancedRequest {
        /**
         * If this flag is true, the managed instance group attempts to create all instances initiated by this resize request only once. If there is an error during creation, the managed instance group does not retry create this instance, and we will decrease the targetSize of the request instead. If the flag is false, the group attempts to recreate each instance continuously until it succeeds.  This flag matters only in the first attempt of creation of an instance. After an instance is successfully created while this flag is enabled, the instance behaves the same way as all the other instances created with a regular resize request. In particular, if a running instance dies unexpectedly at a later time and needs to be recreated, this mode does not affect the recreation behavior in that scenario.  This flag is applicable only to the current resize request. It does not influence other resize requests in any way.  You can see which instances is being creating in which mode by calling the get or listManagedInstances API.
         */
        noCreationRetries?: boolean;
        /**
         * The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter.
         */
        targetSize?: number;
    }
    interface Schema$InstanceGroupManagersScopedList {
        /**
         * [Output Only] The list of managed instance groups that are contained in the specified project and zone.
         */
        instanceGroupManagers?: Schema$InstanceGroupManager[];
        /**
         * [Output Only] The warning that replaces the list of managed instance groups when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstanceGroupManagersSetAutoHealingRequest {
        autoHealingPolicies?: Schema$InstanceGroupManagerAutoHealingPolicy[];
    }
    interface Schema$InstanceGroupManagersSetInstanceTemplateRequest {
        /**
         * The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group.
         */
        instanceTemplate?: string;
    }
    interface Schema$InstanceGroupManagersSetTargetPoolsRequest {
        /**
         * The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request.
         */
        fingerprint?: string;
        /**
         * The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group. Existing instances and new instances in the group all receive these target pool settings.
         */
        targetPools?: string[];
    }
    interface Schema$InstanceGroupManagerStatus {
        /**
         * [Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
         */
        isStable?: boolean;
        /**
         * [Output Only] Stateful status of the given Instance Group Manager.
         */
        stateful?: Schema$InstanceGroupManagerStatusStateful;
        /**
         * [Output Only] A status of consistency of Instances&#39; versions with their target version specified by version field on Instance Group Manager.
         */
        versionTarget?: Schema$InstanceGroupManagerStatusVersionTarget;
    }
    interface Schema$InstanceGroupManagerStatusStateful {
        /**
         * [Output Only] A bit indicating whether the managed instance group is stateful, i.e. has any disks in Stateful Policy or at least one per-instance config. This is determined based on the user intent, the group may be reported as not stateful even when there is still some preserved state on managed instances.
         */
        isStateful?: boolean;
    }
    interface Schema$InstanceGroupManagerStatusVersionTarget {
        /**
         * [Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances&#39; target version are specified by version field on Instance Group Manager.
         */
        isReached?: boolean;
    }
    /**
     * InstanceGroupManagers.updatePerInstanceConfigs
     */
    interface Schema$InstanceGroupManagersUpdatePerInstanceConfigsReq {
        /**
         * The list of per-instance configs to insert or patch on this managed instance group.
         */
        perInstanceConfigs?: Schema$PerInstanceConfig[];
    }
    interface Schema$InstanceGroupManagerUpdatePolicy {
        instanceRedistributionType?: string;
        /**
         * The maximum number of instances that can be created above the specified targetSize during the update process. By default, a fixed value of 1 is used. This value can be either a fixed number or a percentage if the instance group has 10 or more instances. If you set a percentage, the number of instances will be rounded up if necessary.  At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
         */
        maxSurge?: Schema$FixedOrPercent;
        /**
         * The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied:    - The instance&#39;s status is RUNNING.  - If there is a health check on the instance group, the instance&#39;s liveness health check result must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available.  By default, a fixed value of 1 is used. This value can be either a fixed number or a percentage if the instance group has 10 or more instances. If you set a percentage, the number of instances will be rounded up if necessary.  At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
         */
        maxUnavailable?: Schema$FixedOrPercent;
        /**
         * Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
         */
        minimalAction?: string;
        /**
         * Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600].
         */
        minReadySec?: number;
        /**
         * What action should be used to replace instances. See minimal_action.REPLACE
         */
        replacementMethod?: string;
        /**
         * The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
         */
        type?: string;
    }
    interface Schema$InstanceGroupManagerVersion {
        /**
         * The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached.
         */
        instanceTemplate?: string;
        /**
         * Name of the version. Unique among all versions in the scope of this managed instance group.
         */
        name?: string;
        /**
         * Tag describing the version. Used to trigger rollout of a target version even if instance_template remains unchanged. Deprecated in favor of &#39;name&#39;.
         */
        tag?: string;
        /**
         * Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to:   - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used.  - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded up.  If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
         */
        targetSize?: Schema$FixedOrPercent;
    }
    interface Schema$InstanceGroupsAddInstancesRequest {
        /**
         * The list of instances to add to the instance group.
         */
        instances?: Schema$InstanceReference[];
    }
    interface Schema$InstanceGroupsListInstances {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceWithNamedPorts resources.
         */
        items?: Schema$InstanceWithNamedPorts[];
        /**
         * [Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstanceGroupsListInstancesRequest {
        /**
         * A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state.
         */
        instanceState?: string;
    }
    interface Schema$InstanceGroupsRemoveInstancesRequest {
        /**
         * The list of instances to remove from the instance group.
         */
        instances?: Schema$InstanceReference[];
    }
    interface Schema$InstanceGroupsScopedList {
        /**
         * [Output Only] The list of instance groups that are contained in this scope.
         */
        instanceGroups?: Schema$InstanceGroup[];
        /**
         * [Output Only] An informational warning that replaces the list of instance groups when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstanceGroupsSetNamedPortsRequest {
        /**
         * The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet.
         */
        fingerprint?: string;
        /**
         * The list of named ports to set for this instance group.
         */
        namedPorts?: Schema$NamedPort[];
    }
    /**
     * Contains a list of instances.
     */
    interface Schema$InstanceList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Instance resources.
         */
        items?: Schema$Instance[];
        /**
         * [Output Only] Type of resource. Always compute#instanceList for lists of Instance resources.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of instance referrers.
     */
    interface Schema$InstanceListReferrers {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Reference resources.
         */
        items?: Schema$Reference[];
        /**
         * [Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstanceManagedByIgmError {
        /**
         * [Output Only] Contents of the error.
         */
        error?: Schema$InstanceManagedByIgmErrorManagedInstanceError;
        /**
         * [Output Only] Details of the instance action that triggered this error. May be null, if the error was not caused by an action on an instance. This field is optional.
         */
        instanceActionDetails?: Schema$InstanceManagedByIgmErrorInstanceActionDetails;
        /**
         * [Output Only] The time that this error occurred. This value is in RFC3339 text format.
         */
        timestamp?: string;
    }
    interface Schema$InstanceManagedByIgmErrorInstanceActionDetails {
        /**
         * [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values:
         */
        action?: string;
        /**
         * [Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created.
         */
        instance?: string;
        /**
         * [Output Only] Version this instance was created from, or was being created from, but the creation failed. Corresponds to one of the versions that were set on the Instance Group Manager resource at the time this instance was being created.
         */
        version?: Schema$ManagedInstanceVersion;
    }
    interface Schema$InstanceManagedByIgmErrorManagedInstanceError {
        /**
         * [Output Only] Error code.
         */
        code?: string;
        /**
         * [Output Only] Error message.
         */
        message?: string;
    }
    interface Schema$InstanceMoveRequest {
        /**
         * The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone  - projects/project/zones/zone  - zones/zone
         */
        destinationZone?: string;
        /**
         * The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance  - projects/project/zones/zone/instances/instance  - zones/zone/instances/instance
         */
        targetInstance?: string;
    }
    interface Schema$InstanceProperties {
        /**
         * Enables instances created based on this template to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
         */
        canIpForward?: boolean;
        /**
         * An optional text description for the instances that are created from this instance template.
         */
        description?: string;
        /**
         * An array of disks that are associated with the instances that are created from this template.
         */
        disks?: Schema$AttachedDisk[];
        /**
         * Display Device properties to enable support for remote display products like: Teradici, VNC and TeamViewer
         */
        displayDevice?: Schema$DisplayDevice;
        /**
         * A list of guest accelerator cards&#39; type and count to use for instances created from the instance template.
         */
        guestAccelerators?: Schema$AcceleratorConfig[];
        /**
         * Labels to apply to instances that are created from this template.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * The machine type to use for instances that are created from this template.
         */
        machineType?: string;
        /**
         * The metadata key/value pairs to assign to instances that are created from this template. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
         */
        metadata?: Schema$Metadata;
        /**
         * Minimum cpu/platform to be used by this instance. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: &quot;Intel Haswell&quot; or minCpuPlatform: &quot;Intel Sandy Bridge&quot;. For more information, read Specifying a Minimum CPU Platform.
         */
        minCpuPlatform?: string;
        /**
         * An array of network access configurations for this interface.
         */
        networkInterfaces?: Schema$NetworkInterface[];
        /**
         * Specifies the reservations that this instance can consume from.
         */
        reservationAffinity?: Schema$ReservationAffinity;
        /**
         * Specifies the scheduling options for the instances that are created from this template.
         */
        scheduling?: Schema$Scheduling;
        /**
         * A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this template. Use metadata queries to obtain the access tokens for these instances.
         */
        serviceAccounts?: Schema$ServiceAccount[];
        shieldedInstanceConfig?: Schema$ShieldedInstanceConfig;
        /**
         * Specifies the Shielded VM options for the instances that are created from this template.
         */
        shieldedVmConfig?: Schema$ShieldedVmConfig;
        /**
         * A list of tags to apply to the instances that are created from this template. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
         */
        tags?: Schema$Tags;
    }
    interface Schema$InstanceReference {
        /**
         * The URL for a specific instance.
         */
        instance?: string;
    }
    interface Schema$InstancesAddResourcePoliciesRequest {
        /**
         * Resource policies to be added to this instance.
         */
        resourcePolicies?: string[];
    }
    interface Schema$InstancesGetEffectiveFirewallsResponse {
        /**
         * Effective firewalls on the instance.
         */
        firewalls?: Schema$Firewall[];
        /**
         * Effective firewalls from organization policies.
         */
        organizationFirewalls?: Schema$InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy[];
    }
    /**
     * A pruned SecurityPolicy containing ID and any applicable firewall rules.
     */
    interface Schema$InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy {
        /**
         * The unique identifier for the security policy. This identifier is defined by the server.
         */
        id?: string;
        /**
         * The rules that apply to the network.
         */
        rules?: Schema$SecurityPolicyRule[];
    }
    interface Schema$InstancesRemoveResourcePoliciesRequest {
        /**
         * Resource policies to be removed from this instance.
         */
        resourcePolicies?: string[];
    }
    interface Schema$InstancesResumeRequest {
        /**
         * Array of disks associated with this instance that are protected with a customer-supplied encryption key.  In order to resume the instance, the disk url and its corresponding key must be provided.  If the disk is not protected with a customer-supplied encryption key it should not be specified.
         */
        disks?: Schema$CustomerEncryptionKeyProtectedDisk[];
        /**
         * Decrypts data associated with an instance that is protected with a customer-supplied encryption key.  If the instance you are starting is protected with a customer-supplied encryption key, the correct key must be provided otherwise the instance resume will not succeed.
         */
        instanceEncryptionKey?: Schema$CustomerEncryptionKey;
    }
    interface Schema$InstancesScopedList {
        /**
         * [Output Only] A list of instances contained in this scope.
         */
        instances?: Schema$Instance[];
        /**
         * [Output Only] Informational warning which replaces the list of instances when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstancesSetLabelsRequest {
        /**
         * Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels.
         */
        labelFingerprint?: string;
        labels?: {
            [key: string]: string;
        };
    }
    interface Schema$InstancesSetMachineResourcesRequest {
        /**
         * A list of the type and count of accelerator cards attached to the instance.
         */
        guestAccelerators?: Schema$AcceleratorConfig[];
    }
    interface Schema$InstancesSetMachineTypeRequest {
        /**
         * Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1
         */
        machineType?: string;
    }
    interface Schema$InstancesSetMinCpuPlatformRequest {
        /**
         * Minimum cpu/platform this instance should be started at.
         */
        minCpuPlatform?: string;
    }
    interface Schema$InstancesSetNameRequest {
        /**
         * The current name of this resource, used to prevent conflicts. Provide the latest name when making a request to change name.
         */
        currentName?: string;
        /**
         * The name to be applied to the instance. Needs to be RFC 1035 compliant.
         */
        name?: string;
    }
    interface Schema$InstancesSetServiceAccountRequest {
        /**
         * Email address of the service account.
         */
        email?: string;
        /**
         * The list of scopes to be made available for this service account.
         */
        scopes?: string[];
    }
    interface Schema$InstancesStartWithEncryptionKeyRequest {
        /**
         * Array of disks associated with this instance that are protected with a customer-supplied encryption key.  In order to start the instance, the disk url and its corresponding key must be provided.  If the disk is not protected with a customer-supplied encryption key it should not be specified.
         */
        disks?: Schema$CustomerEncryptionKeyProtectedDisk[];
        /**
         * Decrypts data associated with an instance that is protected with a customer-supplied encryption key.  If the instance you are starting is protected with a customer-supplied encryption key, the correct key must be provided otherwise the instance start will not succeed.
         */
        instanceEncryptionKey?: Schema$CustomerEncryptionKey;
    }
    /**
     * Represents an Instance Template resource.  You can use instance templates to create VM instances and managed instance groups. For more information, read Instance Templates. (== resource_for beta.instanceTemplates ==) (== resource_for v1.instanceTemplates ==)
     */
    interface Schema$InstanceTemplate {
        /**
         * [Output Only] The creation timestamp for this instance template in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] A unique identifier for this instance template. The server defines this identifier.
         */
        id?: string;
        /**
         * [Output Only] The resource type, which is always compute#instanceTemplate for instance templates.
         */
        kind?: string;
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The instance properties for this instance template.
         */
        properties?: Schema$InstanceProperties;
        /**
         * [Output Only] The URL for this instance template. The server defines this URL.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance  - projects/project/zones/zone/instances/instance
         */
        sourceInstance?: string;
        /**
         * The source instance params to use to create this instance template.
         */
        sourceInstanceParams?: Schema$SourceInstanceParams;
    }
    /**
     * A list of instance templates.
     */
    interface Schema$InstanceTemplateList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceTemplate resources.
         */
        items?: Schema$InstanceTemplate[];
        /**
         * [Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$InstanceWithNamedPorts {
        /**
         * [Output Only] The URL of the instance.
         */
        instance?: string;
        /**
         * [Output Only] The named ports that belong to this instance group.
         */
        namedPorts?: Schema$NamedPort[];
        /**
         * [Output Only] The status of the instance.
         */
        status?: string;
    }
    /**
     * HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
     */
    interface Schema$Int64RangeMatch {
        /**
         * The end of the range (exclusive) in signed long integer format.
         */
        rangeEnd?: string;
        /**
         * The start of the range (inclusive) in signed long integer format.
         */
        rangeStart?: string;
    }
    /**
     * Represents an Interconnect resource.  An Interconnect resource is a dedicated connection between the GCP network and your on-premises network. For more information, read the  Dedicated Interconnect Overview. (== resource_for v1.interconnects ==) (== resource_for beta.interconnects ==)
     */
    interface Schema$Interconnect {
        /**
         * Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
         */
        adminEnabled?: boolean;
        /**
         * [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG.
         */
        circuitInfos?: Schema$InterconnectCircuitInfo[];
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
         */
        customerName?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] A list of outages expected for this Interconnect.
         */
        expectedOutages?: Schema$InterconnectOutageNotification[];
        /**
         * [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests.
         */
        googleIpAddress?: string;
        /**
         * [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.
         */
        googleReferenceId?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect.
         */
        interconnectAttachments?: string[];
        /**
         * Type of interconnect, which can take one of the following values:  - PARTNER: A partner-managed interconnection shared between customers though a partner.  - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
         */
        interconnectType?: string;
        /**
         * [Output Only] Type of the resource. Always compute#interconnect for interconnects.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an Interconnect.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this Interconnect resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Type of link requested, which can take one of the following values:  - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics  - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
         */
        linkType?: string;
        /**
         * URL of the InterconnectLocation object that represents where this connection is to be provisioned.
         */
        location?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Stackdriver logs alerting and Cloud Notifications.
         */
        nocContactEmail?: string;
        /**
         * [Output Only] The current status of this Interconnect&#39;s functionality, which can take one of the following values:  - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect.  - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect.  - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
         */
        operationalStatus?: string;
        /**
         * [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests.
         */
        peerIpAddress?: string;
        /**
         * [Output Only] Number of links actually provisioned in this interconnect.
         */
        provisionedLinkCount?: number;
        /**
         * Target number of physical links in the link bundle, as requested by the customer.
         */
        requestedLinkCount?: number;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The current state of Interconnect functionality, which can take one of the following values:  - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect.  - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect.  - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
         */
        state?: string;
    }
    /**
     * Represents an Interconnect Attachment (VLAN) resource.  You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read  Creating VLAN Attachments. (== resource_for beta.interconnectAttachments ==) (== resource_for v1.interconnectAttachments ==)
     */
    interface Schema$InterconnectAttachment {
        /**
         * Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER.
         */
        adminEnabled?: boolean;
        /**
         * Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values:  - BPS_50M: 50 Mbit/s  - BPS_100M: 100 Mbit/s  - BPS_200M: 200 Mbit/s  - BPS_300M: 300 Mbit/s  - BPS_400M: 400 Mbit/s  - BPS_500M: 500 Mbit/s  - BPS_1G: 1 Gbit/s  - BPS_2G: 2 Gbit/s  - BPS_5G: 5 Gbit/s  - BPS_10G: 10 Gbit/s
         */
        bandwidth?: string;
        /**
         * Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google?s edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.
         */
        candidateSubnets?: string[];
        /**
         * [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
         */
        cloudRouterIpAddress?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
         */
        customerRouterIpAddress?: string;
        /**
         * An optional description of this resource.
         */
        description?: string;
        /**
         * Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values:  - AVAILABILITY_DOMAIN_ANY  - AVAILABILITY_DOMAIN_1  - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
         */
        edgeAvailabilityDomain?: string;
        /**
         * [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
         */
        googleReferenceId?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * URL of the underlying Interconnect object that this attachment&#39;s traffic will traverse through.
         */
        interconnect?: string;
        /**
         * [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this InterconnectAttachment, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an InterconnectAttachment.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this InterconnectAttachment resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values:  - OS_ACTIVE: The attachment has been turned up and is ready to use.  - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
         */
        operationalStatus?: string;
        /**
         * [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form &quot;XXXXX/region/domain&quot;
         */
        pairingKey?: string;
        /**
         * Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED.
         */
        partnerAsn?: string;
        /**
         * Informational metadata about Partner attachments from Partners to display to customers. Output only for for PARTNER type, mutable for PARTNER_PROVIDER, not available for DEDICATED.
         */
        partnerMetadata?: Schema$InterconnectAttachmentPartnerMetadata;
        /**
         * [Output Only] Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED.
         */
        privateInterconnectInfo?: Schema$InterconnectAttachmentPrivateInfo;
        /**
         * [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network &amp; region within which the Cloud Router is configured.
         */
        router?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The current state of this attachment&#39;s functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values:  - ACTIVE: The attachment has been turned up and is ready to use.  - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.  - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side.  - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it.  - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it.  - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
         */
        state?: string;
        /**
         * The type of interconnect attachment this is, which can take one of the following values:  - DEDICATED: an attachment to a Dedicated Interconnect.  - PARTNER: an attachment to a Partner Interconnect, created by the customer.  - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
         */
        type?: string;
        /**
         * The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time.
         */
        vlanTag8021q?: number;
    }
    interface Schema$InterconnectAttachmentAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InterconnectAttachmentsScopedList resources.
         */
        items?: {
            [key: string]: Schema$InterconnectAttachmentsScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Response to the list request, and contains a list of interconnect attachments.
     */
    interface Schema$InterconnectAttachmentList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InterconnectAttachment resources.
         */
        items?: Schema$InterconnectAttachment[];
        /**
         * [Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
     */
    interface Schema$InterconnectAttachmentPartnerMetadata {
        /**
         * Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner?s portal. For instance &quot;Chicago 1&quot;. This value may be validated to match approved Partner values.
         */
        interconnectName?: string;
        /**
         * Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
         */
        partnerName?: string;
        /**
         * URL of the Partner?s portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
         */
        portalUrl?: string;
    }
    /**
     * Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
     */
    interface Schema$InterconnectAttachmentPrivateInfo {
        /**
         * [Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
         */
        tag8021q?: number;
    }
    interface Schema$InterconnectAttachmentsScopedList {
        /**
         * A list of interconnect attachments contained in this scope.
         */
        interconnectAttachments?: Schema$InterconnectAttachment[];
        /**
         * Informational warning which replaces the list of addresses when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only. Next id: 4
     */
    interface Schema$InterconnectCircuitInfo {
        /**
         * Customer-side demarc ID for this circuit.
         */
        customerDemarcId?: string;
        /**
         * Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
         */
        googleCircuitId?: string;
        /**
         * Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA.
         */
        googleDemarcId?: string;
    }
    /**
     * Diagnostics information about interconnect, contains detailed and current technical information about Google?s side of the connection.
     */
    interface Schema$InterconnectDiagnostics {
        /**
         * A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty when the Interconnect is not bundled.
         */
        arpCaches?: Schema$InterconnectDiagnosticsARPEntry[];
        /**
         * A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect.
         */
        links?: Schema$InterconnectDiagnosticsLinkStatus[];
        /**
         * The MAC address of the Interconnect&#39;s bundle interface.
         */
        macAddress?: string;
    }
    /**
     * Describing the ARP neighbor entries seen on this link
     */
    interface Schema$InterconnectDiagnosticsARPEntry {
        /**
         * The IP address of this ARP neighbor.
         */
        ipAddress?: string;
        /**
         * The MAC address of this ARP neighbor.
         */
        macAddress?: string;
    }
    interface Schema$InterconnectDiagnosticsLinkLACPStatus {
        /**
         * System ID of the port on Google?s side of the LACP exchange.
         */
        googleSystemId?: string;
        /**
         * System ID of the port on the neighbor?s side of the LACP exchange.
         */
        neighborSystemId?: string;
        /**
         * The state of a LACP link, which can take one of the following values:  - ACTIVE: The link is configured and active within the bundle.  - DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty.
         */
        state?: string;
    }
    interface Schema$InterconnectDiagnosticsLinkOpticalPower {
        /**
         * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include:   - OK: The value has not crossed a warning threshold.  - LOW_WARNING: The value has crossed below the low warning threshold.  - HIGH_WARNING: The value has crossed above the high warning threshold.  - LOW_ALARM: The value has crossed below the low alarm threshold.  - HIGH_ALARM: The value has crossed above the high alarm threshold.
         */
        state?: string;
        /**
         * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
         */
        value?: number;
    }
    interface Schema$InterconnectDiagnosticsLinkStatus {
        /**
         * A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled
         */
        arpCaches?: Schema$InterconnectDiagnosticsARPEntry[];
        /**
         * The unique ID for this link assigned during turn up by Google.
         */
        circuitId?: string;
        /**
         * The Demarc address assigned by Google and provided in the LoA.
         */
        googleDemarc?: string;
        lacpStatus?: Schema$InterconnectDiagnosticsLinkLACPStatus;
        /**
         * An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the received light level.
         */
        receivingOpticalPower?: Schema$InterconnectDiagnosticsLinkOpticalPower;
        /**
         * An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the transmitted light level.
         */
        transmittingOpticalPower?: Schema$InterconnectDiagnosticsLinkOpticalPower;
    }
    /**
     * Response to the list request, and contains a list of interconnects.
     */
    interface Schema$InterconnectList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Interconnect resources.
         */
        items?: Schema$Interconnect[];
        /**
         * [Output Only] Type of resource. Always compute#interconnectList for lists of interconnects.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents an Interconnect Attachment (VLAN) Location resource.  You can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read  Creating VLAN Attachments.
     */
    interface Schema$InterconnectLocation {
        /**
         * [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character.
         */
        address?: string;
        /**
         * [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: &quot;zone1&quot; or &quot;zone2&quot;.
         */
        availabilityZone?: string;
        /**
         * [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: &quot;Chicago, IL&quot;, &quot;Amsterdam, Netherlands&quot;.
         */
        city?: string;
        /**
         * [Output Only] Continent for this location, which can take one of the following values:  - AFRICA  - ASIA_PAC  - EUROPE  - NORTH_AMERICA  - SOUTH_AMERICA
         */
        continent?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] An optional description of the resource.
         */
        description?: string;
        /**
         * [Output Only] The name of the provider for this facility (e.g., EQUINIX).
         */
        facilityProvider?: string;
        /**
         * [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1).
         */
        facilityProviderFacilityId?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations.
         */
        kind?: string;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb).
         */
        peeringdbFacilityId?: string;
        /**
         * [Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud regions.
         */
        regionInfos?: Schema$InterconnectLocationRegionInfo[];
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The status of this InterconnectLocation, which can take one of the following values:  - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects.  - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects.
         */
        status?: string;
    }
    /**
     * Response to the list request, and contains a list of interconnect locations.
     */
    interface Schema$InterconnectLocationList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InterconnectLocation resources.
         */
        items?: Schema$InterconnectLocation[];
        /**
         * [Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Information about any potential InterconnectAttachments between an Interconnect at a specific InterconnectLocation, and a specific Cloud Region.
     */
    interface Schema$InterconnectLocationRegionInfo {
        /**
         * Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region.
         */
        expectedRttMs?: string;
        /**
         * Identifies the network presence of this location.
         */
        locationPresence?: string;
        /**
         * URL for the region of this location.
         */
        region?: string;
    }
    /**
     * Description of a planned outage on this Interconnect. Next id: 9
     */
    interface Schema$InterconnectOutageNotification {
        /**
         * If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected.
         */
        affectedCircuits?: string[];
        /**
         * A description about the purpose of the outage.
         */
        description?: string;
        /**
         * Scheduled end time for the outage (milliseconds since Unix epoch).
         */
        endTime?: string;
        /**
         * Form this outage is expected to take, which can take one of the following values:  - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window.  - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with &quot;IT_&quot; have been deprecated in favor of the unprefixed values.
         */
        issueType?: string;
        /**
         * Unique identifier for this outage notification.
         */
        name?: string;
        /**
         * The party that generated this notification, which can take the following value:  - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
         */
        source?: string;
        /**
         * Scheduled start time for the outage (milliseconds since Unix epoch).
         */
        startTime?: string;
        /**
         * State of this notification, which can take one of the following values:  - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling.  - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. Note that the versions of this enum prefixed with &quot;NS_&quot; have been deprecated in favor of the unprefixed values.
         */
        state?: string;
    }
    /**
     * Response for the InterconnectsGetDiagnosticsRequest.
     */
    interface Schema$InterconnectsGetDiagnosticsResponse {
        result?: Schema$InterconnectDiagnostics;
    }
    interface Schema$InternalIpAddress {
        /**
         * IP CIDR address or range.
         */
        cidr?: string;
        /**
         * The owner of the internal IP address.
         */
        owner?: string;
        /**
         * The purpose of the internal IP address if applicable.
         */
        purpose?: string;
        /**
         * The region of the internal IP address if applicable.
         */
        region?: string;
        /**
         * The type of the internal IP address.
         */
        type?: string;
    }
    interface Schema$InternalIpOwner {
        /**
         * IP CIDR range being owned.
         */
        ipCidrRange?: string;
        /**
         * URLs of the IP owners of the IP CIDR range.
         */
        owners?: string[];
        /**
         * Whether this IP CIDR range is reserved for system use.
         */
        systemOwned?: boolean;
    }
    interface Schema$IpAddressesList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InternalIpAddress resources.
         */
        items?: Schema$InternalIpAddress[];
        /**
         * [Output Only] Type of resource. Always compute#ipAddressesList for IP addresses lists.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of IP owners.
     */
    interface Schema$IpOwnerList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InternalIpOwner resources.
         */
        items?: Schema$InternalIpOwner[];
        /**
         * [Output Only] Type of resource. Always compute#ipOwnerList for lists of IP owners.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * JWT configuration for origin authentication.
     */
    interface Schema$Jwt {
        /**
         * A JWT containing any of these audiences will be accepted. The service name will be accepted if audiences is empty. Examples: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
         */
        audiences?: string[];
        /**
         * Identifies the issuer that issued the JWT, which is usually a URL or an email address. Examples: https://securetoken.google.com, 1234567-compute@developer.gserviceaccount.com
         */
        issuer?: string;
        /**
         * The provider?s public key set to validate the signature of the JWT.
         */
        jwksPublicKeys?: string;
        /**
         * jwt_headers and jwt_params define where to extract the JWT from an HTTP request. If no explicit location is specified, the following default locations are tried in order:  1. The Authorization header using the Bearer schema. See `here `_. Example:  Authorization: Bearer .  2. `access_token` query parameter. See `this `_  Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations its issuer specified or from the default locations.  This field is set if JWT is sent in a request header. This field specifies the header name. For example, if `header=x-goog-iap-jwt-assertion`, the header format will be x-goog-iap-jwt-assertion: .
         */
        jwtHeaders?: Schema$JwtHeader[];
        /**
         * This field is set if JWT is sent in a query parameter. This field specifies the query parameter name. For example, if jwt_params[0] is jwt_token, the JWT format in the query parameter is /path?jwt_token=.
         */
        jwtParams?: string[];
    }
    /**
     * This message specifies a header location to extract JWT token.
     */
    interface Schema$JwtHeader {
        /**
         * The HTTP header name.
         */
        name?: string;
        /**
         * The value prefix. The value format is &quot;value_prefix&quot; For example, for &quot;Authorization: Bearer &quot;, value_prefix=&quot;Bearer &quot; with a space at the end.
         */
        valuePrefix?: string;
    }
    /**
     * A license resource.
     */
    interface Schema$License {
        /**
         * [Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee.
         */
        chargesUseFee?: boolean;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional textual description of the resource; provided by the client when the resource is created.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#license for licenses.
         */
        kind?: string;
        /**
         * [Output Only] The unique code used to attach this license to images, snapshots, and disks.
         */
        licenseCode?: string;
        /**
         * Name of the resource. The name must be 1-63 characters long and comply with RFC1035.
         */
        name?: string;
        resourceRequirements?: Schema$LicenseResourceRequirements;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk.
         */
        transferable?: boolean;
    }
    interface Schema$LicenseCode {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] Description of this License Code.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#licenseCode for licenses.
         */
        kind?: string;
        /**
         * [Output Only] URL and description aliases of Licenses with the same License Code.
         */
        licenseAlias?: Schema$LicenseCodeLicenseAlias[];
        /**
         * [Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer.
         */
        name?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Current state of this License Code.
         */
        state?: string;
        /**
         * [Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred.
         */
        transferable?: boolean;
    }
    interface Schema$LicenseCodeLicenseAlias {
        /**
         * [Output Only] Description of this License Code.
         */
        description?: string;
        /**
         * [Output Only] URL of license corresponding to this License Code.
         */
        selfLink?: string;
    }
    interface Schema$LicenseResourceRequirements {
        /**
         * Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
         */
        minGuestCpuCount?: number;
        /**
         * Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
         */
        minMemoryMb?: number;
    }
    interface Schema$LicensesListResponse {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of License resources.
         */
        items?: Schema$License[];
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$LocalDisk {
        /**
         * Specifies the number of such disks.
         */
        diskCount?: string;
        /**
         * Specifies the size of the disk in base-2 GB.
         */
        diskSizeGb?: string;
        /**
         * Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
         */
        diskType?: string;
    }
    /**
     * Specifies what kind of log the caller must write
     */
    interface Schema$LogConfig {
        /**
         * Cloud audit options.
         */
        cloudAudit?: Schema$LogConfigCloudAuditOptions;
        /**
         * Counter options.
         */
        counter?: Schema$LogConfigCounterOptions;
        /**
         * Data access options.
         */
        dataAccess?: Schema$LogConfigDataAccessOptions;
    }
    /**
     * Write a Cloud Audit log
     */
    interface Schema$LogConfigCloudAuditOptions {
        /**
         * Information used by the Cloud Audit Logging pipeline.
         */
        authorizationLoggingOptions?: Schema$AuthorizationLoggingOptions;
        /**
         * The log_name to populate in the Cloud Audit Record.
         */
        logName?: string;
    }
    /**
     * Increment a streamz counter with the specified metric and field names.  Metric names should start with a &#39;/&#39;, generally be lowercase-only, and end in &quot;_count&quot;. Field names should not contain an initial slash. The actual exported metric names will have &quot;/iam/policy&quot; prepended.  Field names correspond to IAM request parameters and field values are their respective values.  Supported field names: - &quot;authority&quot;, which is &quot;[token]&quot; if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - &quot;iam_principal&quot;, a representation of IAMContext.principal even if a token or authority selector is present; or - &quot;&quot; (empty string), resulting in a counter with no fields.  Examples: counter { metric: &quot;/debug_access_count&quot; field: &quot;iam_principal&quot; } ==&gt; increment counter /iam/policy/backend_debug_access_count {iam_principal=[value of IAMContext.principal]}  At this time we do not support multiple field names (though this may be supported in the future).
     */
    interface Schema$LogConfigCounterOptions {
        /**
         * The field value to attribute.
         */
        field?: string;
        /**
         * The metric to update.
         */
        metric?: string;
    }
    /**
     * Write a Data Access (Gin) log
     */
    interface Schema$LogConfigDataAccessOptions {
        /**
         * Whether Gin logging should happen in a fail-closed manner at the caller. This is relevant only in the LocalIAM implementation, for now.
         */
        logMode?: string;
    }
    /**
     * Machine image resource.
     */
    interface Schema$MachineImage {
        /**
         * [Output Only] The creation timestamp for this machine image in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Input Only] Specifies to create an application consistent machine image by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
         */
        guestFlush?: boolean;
        /**
         * [Output Only] A unique identifier for this machine image. The server defines this identifier.
         */
        id?: string;
        /**
         * [Output Only] The resource type, which is always compute#machineImage for machine image.
         */
        kind?: string;
        /**
         * Encrypts the machine image using a customer-supplied encryption key.  After you encrypt a machine image using a customer-supplied key, you must provide the same key if you use the machine image later. For example, you must provide the encryption key when you create an instance from the encrypted machine image in a future request.  Customer-supplied encryption keys do not protect access to metadata of the machine image.  If you do not provide an encryption key when creating the machine image, then the machine image will be encrypted using an automatically generated key and you do not need to provide a key to use the machine image later.
         */
        machineImageEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] The URL for this machine image. The server defines this URL.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Input Only] The customer-supplied encryption key of the disks attached to the source instance. Required if the source disk is protected by a customer-supplied encryption key.
         */
        sourceDiskEncryptionKeys?: Schema$SourceDiskEncryptionKey[];
        /**
         * The source instance used to create the machine image. You can provide this as a partial or full URL to the resource. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance  - projects/project/zones/zone/instances/instance
         */
        sourceInstance?: string;
        /**
         * [Output Only] Properties of source instance.
         */
        sourceInstanceProperties?: Schema$SourceInstanceProperties;
        /**
         * [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING.
         */
        status?: string;
        /**
         * GCS bucket storage location of the machine image (regional or multi-regional).
         */
        storageLocations?: string[];
    }
    /**
     * A list of machine images.
     */
    interface Schema$MachineImageList {
        etag?: string;
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of MachineImage resources.
         */
        items?: Schema$MachineImage[];
        /**
         * [Output Only] The resource type, which is always compute#machineImagesListResponse for machine image lists.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Machine Type resource.  You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types. (== resource_for v1.machineTypes ==) (== resource_for beta.machineTypes ==)
     */
    interface Schema$MachineType {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] The deprecation status associated with this machine type.
         */
        deprecated?: Schema$DeprecationStatus;
        /**
         * [Output Only] An optional textual description of the resource.
         */
        description?: string;
        /**
         * [Output Only] The number of virtual CPUs that are available to the instance.
         */
        guestCpus?: number;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information.
         */
        isSharedCpu?: boolean;
        /**
         * [Output Only] The type of the resource. Always compute#machineType for machine types.
         */
        kind?: string;
        /**
         * [Output Only] Maximum persistent disks allowed.
         */
        maximumPersistentDisks?: number;
        /**
         * [Output Only] Maximum total persistent disks size (GB) allowed.
         */
        maximumPersistentDisksSizeGb?: string;
        /**
         * [Output Only] The amount of physical memory available to the instance, defined in MB.
         */
        memoryMb?: number;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The name of the zone where the machine type resides, such as us-central1-a.
         */
        zone?: string;
    }
    interface Schema$MachineTypeAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of MachineTypesScopedList resources.
         */
        items?: {
            [key: string]: Schema$MachineTypesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of machine types.
     */
    interface Schema$MachineTypeList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of MachineType resources.
         */
        items?: Schema$MachineType[];
        /**
         * [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$MachineTypesScopedList {
        /**
         * [Output Only] A list of machine types contained in this scope.
         */
        machineTypes?: Schema$MachineType[];
        /**
         * [Output Only] An informational warning that appears when the machine types list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A Managed Instance resource.
     */
    interface Schema$ManagedInstance {
        /**
         * [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values:  - NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance.  - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful.  - CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group&#39;s targetSize value is decreased instead.  - RECREATING The managed instance group is recreating this instance.  - DELETING The managed instance group is permanently deleting this instance.  - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group.  - RESTARTING The managed instance group is restarting the instance.  - REFRESHING The managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance.  - VERIFYING The managed instance group has created the instance and it is in the process of being verified.
         */
        currentAction?: string;
        /**
         * [Output only] The unique identifier for this resource. This field is empty when instance does not exist.
         */
        id?: string;
        /**
         * [Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created.
         */
        instance?: string;
        /**
         * [Output Only] Health state of the instance per health-check.
         */
        instanceHealth?: Schema$ManagedInstanceInstanceHealth[];
        /**
         * [Output Only] The status of the instance. This field is empty when the instance does not exist.
         */
        instanceStatus?: string;
        /**
         * [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }.
         */
        instanceTemplate?: string;
        /**
         * [Output Only] Information about the last attempt to create or delete the instance.
         */
        lastAttempt?: Schema$ManagedInstanceLastAttempt;
        /**
         * [Output Only] Preserved state applied from per-instance config for this instance.
         */
        preservedStateFromConfig?: Schema$PreservedState;
        /**
         * [Output Only] Preserved state generated based on stateful policy for this instance.
         */
        preservedStateFromPolicy?: Schema$PreservedState;
        /**
         * [Output Only] Tag describing the version.
         */
        tag?: string;
        /**
         * [Output Only] Intended version of this instance.
         */
        version?: Schema$ManagedInstanceVersion;
    }
    interface Schema$ManagedInstanceInstanceHealth {
        /**
         * [Output Only] The current detailed instance health state.
         */
        detailedHealthState?: string;
        /**
         * [Output Only] The URL for the health check that verifies whether the instance is healthy.
         */
        healthCheck?: string;
        /**
         * [Output Only] The current instance health state.
         */
        healthState?: string;
    }
    interface Schema$ManagedInstanceLastAttempt {
        /**
         * [Output Only] Encountered errors during the last attempt to create or delete the instance.
         */
        errors?: {
            errors?: Array<{
                code?: string;
                location?: string;
                message?: string;
            }>;
        };
    }
    interface Schema$ManagedInstanceVersion {
        /**
         * [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }.
         */
        instanceTemplate?: string;
        /**
         * [Output Only] Name of the version.
         */
        name?: string;
    }
    /**
     * A metadata key/value entry.
     */
    interface Schema$Metadata {
        /**
         * Specifies a fingerprint for this request, which is essentially a hash of the metadata&#39;s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve the resource.
         */
        fingerprint?: string;
        /**
         * Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
         */
        items?: Array<{
            key?: string;
            value?: string;
        }>;
        /**
         * [Output Only] Type of the resource. Always compute#metadata for metadata.
         */
        kind?: string;
    }
    /**
     * Custom authenticator credentials.
     */
    interface Schema$MetadataCredentialsFromPlugin {
        /**
         * Plugin name.
         */
        name?: string;
        /**
         * A text proto that conforms to a Struct type definition interpreted by the plugin.
         */
        structConfig?: string;
    }
    /**
     * Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata. An example for using metadataFilters would be: if loadbalancing involves  Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in &lt;a href=&quot;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/base.proto#envoy-api-msg-core-node&quot; Node metadata of their XDS requests to loadbalancers.
     */
    interface Schema$MetadataFilter {
        /**
         * The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria  This list must not be empty and can have at the most 64 entries.
         */
        filterLabels?: Schema$MetadataFilterLabelMatch[];
        /**
         * Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are:   - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata.  - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
         */
        filterMatchCriteria?: string;
    }
    /**
     * MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer.
     */
    interface Schema$MetadataFilterLabelMatch {
        /**
         * Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
         */
        name?: string;
        /**
         * The value of the label must match the specified value. value can have a maximum length of 1024 characters.
         */
        value?: string;
    }
    /**
     * Configuration for the mutual Tls mode for peer authentication.
     */
    interface Schema$MutualTls {
        /**
         * Specifies if the server TLS is configured to be strict or permissive. This field can be set to one of the following: STRICT: Client certificate must be presented, connection is in TLS. PERMISSIVE: Client certificate can be omitted, connection can be either plaintext or TLS.
         */
        mode?: string;
    }
    /**
     * The named port. For example: .
     */
    interface Schema$NamedPort {
        /**
         * The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
         */
        name?: string;
        /**
         * The port number, which can be a value between 1 and 65535.
         */
        port?: number;
    }
    /**
     * Represents a VPC Network resource.  Networks connect resources to each other and to the internet. For more information, read Virtual Private Cloud (VPC) Network. (== resource_for v1.networks ==) (== resource_for beta.networks ==)
     */
    interface Schema$Network {
        /**
         * When set to true, the VPC network is created in &quot;auto&quot; mode. When set to false, the VPC network is created in &quot;custom&quot; mode.  An auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges.
         */
        autoCreateSubnetworks?: boolean;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] Type of VM-to-VM traffic encryption for this network.
         */
        crossVmEncryption?: string;
        /**
         * An optional description of this resource. Provide this field when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The gateway address for default routing out of the network, selected by GCP.
         */
        gatewayIPv4?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16. Provided by the client when the network is created.
         */
        IPv4Range?: string;
        /**
         * [Output Only] Type of the resource. Always compute#network for networks.
         */
        kind?: string;
        /**
         * [Output Only] Type of LB-to-VM traffic encryption for this network.
         */
        loadBalancerVmEncryption?: string;
        /**
         * Maximum Transmission Unit in bytes. The minimum value for this field is 1460 and the maximum value is 1600 bytes.
         */
        mtu?: number;
        /**
         * The multicast mode for this network. If set to ZONAL, multicast is allowed within a zone. If set to DISABLED, multicast is disabled for this network. The default is DISABLED.
         */
        multicastMode?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
         */
        name?: string;
        /**
         * [Output Only] A list of network peerings for the resource.
         */
        peerings?: Schema$NetworkPeering[];
        /**
         * The network-level routing configuration for this network. Used by Cloud Router to determine what type of network-wide routing behavior to enforce.
         */
        routingConfig?: Schema$NetworkRoutingConfig;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network.
         */
        subnetworks?: string[];
    }
    /**
     * The network endpoint.
     */
    interface Schema$NetworkEndpoint {
        /**
         * Metadata defined as annotations on the network endpoint.
         */
        annotations?: {
            [key: string]: string;
        };
        /**
         * Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network_endpoint_type is NON_GCP_FQDN_PORT.
         */
        fqdn?: string;
        /**
         * The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group.  The name must be 1-63 characters long, and comply with RFC1035.
         */
        instance?: string;
        /**
         * Optional IPv4 address of network endpoint. The IP address must belong to a VM in GCE (either the primary IP or as part of an aliased IP range). If the IP address is not specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used.
         */
        ipAddress?: string;
        /**
         * Optional port number of network endpoint. If not specified and the NetworkEndpointGroup.network_endpoint_type is GCE_IP_PORT, the defaultPort for the network endpoint group will be used.
         */
        port?: number;
    }
    /**
     * Represents a collection of network endpoints.
     */
    interface Schema$NetworkEndpointGroup {
        /**
         * Metadata defined as annotations on the network endpoint group.
         */
        annotations?: {
            [key: string]: string;
        };
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * The default port used if the port number is not specified in the network endpoint.
         */
        defaultPort?: number;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group.
         */
        kind?: string;
        /**
         * This field is only valid when the network endpoint group is used for load balancing. [Deprecated] This field is deprecated.
         */
        loadBalancer?: Schema$NetworkEndpointGroupLbNetworkEndpointGroup;
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The URL of the network to which all network endpoints in the NEG belong. Uses &quot;default&quot; project network if unspecified.
         */
        network?: string;
        /**
         * Type of network endpoints in this network endpoint group. Currently the only supported value is GCE_VM_IP_PORT.
         */
        networkEndpointType?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output only] Number of network endpoints in the network endpoint group.
         */
        size?: number;
        /**
         * Optional URL of the subnetwork to which all network endpoints in the NEG belong.
         */
        subnetwork?: string;
        /**
         * Specify the type of this network endpoint group. Only LOAD_BALANCING is valid for now.
         */
        type?: string;
        /**
         * [Output Only] The URL of the zone where the network endpoint group is located.
         */
        zone?: string;
    }
    interface Schema$NetworkEndpointGroupAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NetworkEndpointGroupsScopedList resources.
         */
        items?: {
            [key: string]: Schema$NetworkEndpointGroupsScopedList;
        };
        /**
         * [Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Load balancing specific fields for network endpoint group.
     */
    interface Schema$NetworkEndpointGroupLbNetworkEndpointGroup {
        /**
         * The default port used if the port number is not specified in the network endpoint. [Deprecated] This field is deprecated.
         */
        defaultPort?: number;
        /**
         * The URL of the network to which all network endpoints in the NEG belong. Uses &quot;default&quot; project network if unspecified. [Deprecated] This field is deprecated.
         */
        network?: string;
        /**
         * Optional URL of the subnetwork to which all network endpoints in the NEG belong. [Deprecated] This field is deprecated.
         */
        subnetwork?: string;
        /**
         * [Output Only] The URL of the zone where the network endpoint group is located. [Deprecated] This field is deprecated.
         */
        zone?: string;
    }
    interface Schema$NetworkEndpointGroupList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NetworkEndpointGroup resources.
         */
        items?: Schema$NetworkEndpointGroup[];
        /**
         * [Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NetworkEndpointGroupsAttachEndpointsRequest {
        /**
         * The list of network endpoints to be attached.
         */
        networkEndpoints?: Schema$NetworkEndpoint[];
    }
    interface Schema$NetworkEndpointGroupsDetachEndpointsRequest {
        /**
         * The list of network endpoints to be detached.
         */
        networkEndpoints?: Schema$NetworkEndpoint[];
    }
    interface Schema$NetworkEndpointGroupsListEndpointsRequest {
        /**
         * Optional list of endpoints to query. This is a more efficient but also limited version of filter parameter. Endpoints in the filter must have ip_address and port fields populated, other fields are not supported.
         */
        endpointFilters?: Schema$NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter[];
        /**
         * Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don&#39;t specifiy this parameter, the health status of network endpoints will not be provided.
         */
        healthStatus?: string;
    }
    interface Schema$NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter {
        networkEndpoint?: Schema$NetworkEndpoint;
    }
    interface Schema$NetworkEndpointGroupsListNetworkEndpoints {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NetworkEndpointWithHealthStatus resources.
         */
        items?: Schema$NetworkEndpointWithHealthStatus[];
        /**
         * [Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NetworkEndpointGroupsScopedList {
        /**
         * [Output Only] The list of network endpoint groups that are contained in this scope.
         */
        networkEndpointGroups?: Schema$NetworkEndpointGroup[];
        /**
         * [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NetworkEndpointWithHealthStatus {
        /**
         * [Output only] The health status of network endpoint;
         */
        healths?: Schema$HealthStatusForNetworkEndpoint[];
        /**
         * [Output only] The network endpoint;
         */
        networkEndpoint?: Schema$NetworkEndpoint;
    }
    /**
     * A network interface resource attached to an instance.
     */
    interface Schema$NetworkInterface {
        /**
         * An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
         */
        accessConfigs?: Schema$AccessConfig[];
        /**
         * An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
         */
        aliasIpRanges?: Schema$AliasIpRange[];
        /**
         * Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface, otherwise the request will fail with error 412 conditionNotMet.
         */
        fingerprint?: string;
        /**
         * [Output Only] An IPv6 internal network address for this network interface.
         */
        ipv6Address?: string;
        /**
         * [Output Only] Type of the resource. Always compute#networkInterface for network interfaces.
         */
        kind?: string;
        /**
         * [Output Only] The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.
         */
        name?: string;
        /**
         * URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred.  If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/project/global/networks/network  - projects/project/global/networks/network  - global/networks/default
         */
        network?: string;
        /**
         * An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
         */
        networkIP?: string;
        /**
         * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork  - regions/region/subnetworks/subnetwork
         */
        subnetwork?: string;
    }
    /**
     * Contains a list of networks.
     */
    interface Schema$NetworkList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Network resources.
         */
        items?: Schema$Network[];
        /**
         * [Output Only] Type of resource. Always compute#networkList for lists of networks.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
     */
    interface Schema$NetworkPeering {
        /**
         * Whether Cloud Routers in this network can automatically advertise subnets from the peer network.
         */
        advertisePeerSubnetsViaRouters?: boolean;
        /**
         * This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
         */
        autoCreateRoutes?: boolean;
        /**
         * Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
         */
        exchangeSubnetRoutes?: boolean;
        /**
         * Whether to export the custom routes to peer network.
         */
        exportCustomRoutes?: boolean;
        /**
         * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
         */
        exportSubnetRoutesWithPublicIp?: boolean;
        /**
         * Whether to import the custom routes from peer network.
         */
        importCustomRoutes?: boolean;
        /**
         * Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
         */
        importSubnetRoutesWithPublicIp?: boolean;
        /**
         * Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
         */
        network?: string;
        /**
         * Maximum Transmission Unit in bytes.
         */
        peerMtu?: number;
        /**
         * [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there&#39;s a matching configuration in the peer network.
         */
        state?: string;
        /**
         * [Output Only] Details about the current state of the peering.
         */
        stateDetails?: string;
    }
    /**
     * A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
     */
    interface Schema$NetworkRoutingConfig {
        /**
         * The network-wide routing mode to use. If set to REGIONAL, this network&#39;s Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network&#39;s Cloud Routers will advertise routes with all subnets of this network, across regions.
         */
        routingMode?: string;
    }
    interface Schema$NetworksAddPeeringRequest {
        /**
         * This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
         */
        autoCreateRoutes?: boolean;
        /**
         * This field will be deprecated soon. Use export_custom_routes in network_peering instead. Whether to export the custom routes to peer network.
         */
        exportCustomRoutes?: boolean;
        /**
         * This field will be deprecated soon. Use import_custom_routes in network_peering instead. Whether to import the custom routes from peer network.
         */
        importCustomRoutes?: boolean;
        /**
         * Name of the peering, which should conform to RFC1035.
         */
        name?: string;
        /**
         * Network peering parameters. In order to specify route policies for peering using import and export custom routes, you must specify all peering related parameters (name, peer network, exchange_subnet_routes) in the network_peering field. The corresponding fields in NetworksAddPeeringRequest will be deprecated soon.
         */
        networkPeering?: Schema$NetworkPeering;
        /**
         * URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
         */
        peerNetwork?: string;
    }
    interface Schema$NetworksGetEffectiveFirewallsResponse {
        /**
         * Effective firewalls on the network.
         */
        firewalls?: Schema$Firewall[];
        /**
         * Effective firewalls from organization policies.
         */
        organizationFirewalls?: Schema$NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy[];
    }
    /**
     * A pruned SecurityPolicy containing ID and any applicable firewall rules.
     */
    interface Schema$NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy {
        /**
         * [Output Only] The unique identifier for the security policy. This identifier is defined by the server.
         */
        id?: string;
        /**
         * The rules that apply to the network.
         */
        rules?: Schema$SecurityPolicyRule[];
    }
    interface Schema$NetworksRemovePeeringRequest {
        /**
         * Name of the peering, which should conform to RFC1035.
         */
        name?: string;
    }
    interface Schema$NetworksUpdatePeeringRequest {
        networkPeering?: Schema$NetworkPeering;
    }
    /**
     * Represent a sole-tenant Node Group resource.  A sole-tenant node is a physical server that is dedicated to hosting VM instances only for your specific project. Use sole-tenant nodes to keep your instances physically separated from instances in other projects, or to group your instances together on the same host hardware. For more information, read Sole-tenant nodes. (== resource_for beta.nodeGroups ==) (== resource_for v1.nodeGroups ==) NextID: 15
     */
    interface Schema$NodeGroup {
        autoscalingPolicy?: Schema$NodeGroupAutoscalingPolicy;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] The type of the resource. Always compute#nodeGroup for node group.
         */
        kind?: string;
        maintenancePolicy?: string;
        /**
         * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The URL of the node template to which this node group belongs.
         */
        nodeTemplate?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The total number of nodes in the node group.
         */
        size?: number;
        status?: string;
        /**
         * [Output Only] The name of the zone where the node group resides, such as us-central1-a.
         */
        zone?: string;
    }
    interface Schema$NodeGroupAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NodeGroupsScopedList resources.
         */
        items?: {
            [key: string]: Schema$NodeGroupsScopedList;
        };
        /**
         * [Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NodeGroupAutoscalingPolicy {
        maxSize?: number;
        minSize?: number;
    }
    /**
     * Contains a list of nodeGroups.
     */
    interface Schema$NodeGroupList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NodeGroup resources.
         */
        items?: Schema$NodeGroup[];
        /**
         * [Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NodeGroupNode {
        /**
         * Local disk configurations.
         */
        disks?: Schema$LocalDisk[];
        /**
         * Instances scheduled on this node.
         */
        instances?: string[];
        /**
         * The name of the node.
         */
        name?: string;
        /**
         * The type of this node.
         */
        nodeType?: string;
        /**
         * Binding properties for the physical server.
         */
        serverBinding?: Schema$ServerBinding;
        status?: string;
    }
    interface Schema$NodeGroupsAddNodesRequest {
        /**
         * Count of additional nodes to be added to the node group.
         */
        additionalNodeCount?: number;
    }
    interface Schema$NodeGroupsDeleteNodesRequest {
        nodes?: string[];
    }
    interface Schema$NodeGroupsListNodes {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Node resources.
         */
        items?: Schema$NodeGroupNode[];
        /**
         * [Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NodeGroupsScopedList {
        /**
         * [Output Only] A list of node groups contained in this scope.
         */
        nodeGroups?: Schema$NodeGroup[];
        /**
         * [Output Only] An informational warning that appears when the nodeGroup list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NodeGroupsSetAutoscalingPolicyRequest {
        autoscalingPolicy?: Schema$NodeGroupAutoscalingPolicy;
    }
    interface Schema$NodeGroupsSetNodeTemplateRequest {
        /**
         * Full or partial URL of the node template resource to be updated for this node group.
         */
        nodeTemplate?: string;
    }
    /**
     * Represent a sole-tenant Node Template resource.  You can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances. (== resource_for beta.nodeTemplates ==) (== resource_for v1.nodeTemplates ==) (== NextID: 16 ==)
     */
    interface Schema$NodeTemplate {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        disks?: Schema$LocalDisk[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] The type of the resource. Always compute#nodeTemplate for node templates.
         */
        kind?: string;
        /**
         * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Labels to use for node affinity, which will be used in instance scheduling.
         */
        nodeAffinityLabels?: {
            [key: string]: string;
        };
        /**
         * The node type to use for nodes group that are created from this template.
         */
        nodeType?: string;
        /**
         * The flexible properties of the desired node type. Node groups that use this node template will create nodes of a type that matches these properties.  This field is mutually exclusive with the node_type property; you can only define one or the other, but not both.
         */
        nodeTypeFlexibility?: Schema$NodeTemplateNodeTypeFlexibility;
        /**
         * [Output Only] The name of the region where the node template resides, such as us-central1.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * Sets the binding properties for the physical server. Valid values include:   - [Default] RESTART_NODE_ON_ANY_SERVER: Restarts VMs on any available physical server  - RESTART_NODE_ON_MINIMAL_SERVER: Restarts VMs on the same physical server whenever possible    See Sole-tenant node options for more information.
         */
        serverBinding?: Schema$ServerBinding;
        /**
         * [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING.
         */
        status?: string;
        /**
         * [Output Only] An optional, human-readable explanation of the status.
         */
        statusMessage?: string;
    }
    interface Schema$NodeTemplateAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NodeTemplatesScopedList resources.
         */
        items?: {
            [key: string]: Schema$NodeTemplatesScopedList;
        };
        /**
         * [Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of node templates.
     */
    interface Schema$NodeTemplateList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NodeTemplate resources.
         */
        items?: Schema$NodeTemplate[];
        /**
         * [Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NodeTemplateNodeTypeFlexibility {
        cpus?: string;
        localSsd?: string;
        memory?: string;
    }
    interface Schema$NodeTemplatesScopedList {
        /**
         * [Output Only] A list of node templates contained in this scope.
         */
        nodeTemplates?: Schema$NodeTemplate[];
        /**
         * [Output Only] An informational warning that appears when the node templates list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represent a sole-tenant Node Type resource.  Each node within a node group must have a node type. A node type specifies the total amount of cores and memory for that node. Currently, the only available node type is n1-node-96-624 node type that has 96 vCPUs and 624 GB of memory, available in multiple zones. For more information read Node types. (== resource_for beta.nodeTypes ==) (== resource_for v1.nodeTypes ==)
     */
    interface Schema$NodeType {
        /**
         * [Output Only] The CPU platform used by this node type.
         */
        cpuPlatform?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] The deprecation status associated with this node type.
         */
        deprecated?: Schema$DeprecationStatus;
        /**
         * [Output Only] An optional textual description of the resource.
         */
        description?: string;
        /**
         * [Output Only] The number of virtual CPUs that are available to the node type.
         */
        guestCpus?: number;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] The type of the resource. Always compute#nodeType for node types.
         */
        kind?: string;
        /**
         * [Output Only] Local SSD available to the node type, defined in GB.
         */
        localSsdGb?: number;
        /**
         * [Output Only] The amount of physical memory available to the node type, defined in MB.
         */
        memoryMb?: number;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The name of the zone where the node type resides, such as us-central1-a.
         */
        zone?: string;
    }
    interface Schema$NodeTypeAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NodeTypesScopedList resources.
         */
        items?: {
            [key: string]: Schema$NodeTypesScopedList;
        };
        /**
         * [Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of node types.
     */
    interface Schema$NodeTypeList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NodeType resources.
         */
        items?: Schema$NodeType[];
        /**
         * [Output Only] Type of resource.Always compute#nodeTypeList for lists of node types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$NodeTypesScopedList {
        /**
         * [Output Only] A list of node types contained in this scope.
         */
        nodeTypes?: Schema$NodeType[];
        /**
         * [Output Only] An informational warning that appears when the node types list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A notification endpoint resource defines an endpoint to receive notifications when there are status changes detected by the associated health check service.
     */
    interface Schema$NotificationEndpoint {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Settings of the gRPC notification endpoint including the endpoint URL and the retry duration.
         */
        grpcSettings?: Schema$NotificationEndpointGrpcSettings;
        /**
         * [Output Only] A unique identifier for this resource type. The server generates this identifier.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
    }
    /**
     * Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
     */
    interface Schema$NotificationEndpointGrpcSettings {
        /**
         * Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
         */
        authority?: string;
        /**
         * Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
         */
        endpoint?: string;
        /**
         * Optional. If specified, this field is used to populate the ?name? field in gRPC requests.
         */
        payloadName?: string;
        /**
         * How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
         */
        retryDurationSec?: number;
    }
    interface Schema$NotificationEndpointList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of NotificationEndpoint resources.
         */
        items?: Schema$NotificationEndpoint[];
        /**
         * [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents an Operation resource.  You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses.  Operations can be global, regional or zonal.   - For global operations, use the globalOperations resource.  - For regional operations, use the regionOperations resource.  - For zonal operations, use the zonalOperations resource.    For more information, read  Global, Regional, and Zonal Resources. (== resource_for v1.globalOperations ==) (== resource_for beta.globalOperations ==) (== resource_for v1.regionOperations ==) (== resource_for beta.regionOperations ==) (== resource_for v1.zoneOperations ==) (== resource_for beta.zoneOperations ==)
     */
    interface Schema$Operation {
        /**
         * [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
         */
        clientOperationId?: string;
        /**
         * [Deprecated] This field is deprecated.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] A textual description of the operation, which is set when the operation is created.
         */
        description?: string;
        /**
         * [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
         */
        endTime?: string;
        /**
         * [Output Only] If errors are generated during processing of the operation, this field will be populated.
         */
        error?: {
            errors?: Array<{
                code?: string;
                location?: string;
                message?: string;
            }>;
        };
        /**
         * [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.
         */
        httpErrorMessage?: string;
        /**
         * [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.
         */
        httpErrorStatusCode?: number;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
         */
        insertTime?: string;
        /**
         * [Output Only] Type of the resource. Always compute#operation for Operation resources.
         */
        kind?: string;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] The type of operation, such as insert, update, or delete, and so on.
         */
        operationType?: string;
        /**
         * [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
         */
        progress?: number;
        /**
         * [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
         */
        startTime?: string;
        /**
         * [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.
         */
        status?: string;
        /**
         * [Output Only] An optional textual description of the current status of the operation.
         */
        statusMessage?: string;
        /**
         * [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
         */
        targetId?: string;
        /**
         * [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
         */
        targetLink?: string;
        /**
         * [Output Only] User who requested the operation, for example: user@example.com.
         */
        user?: string;
        /**
         * [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
         */
        warnings?: Array<{
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        }>;
        /**
         * [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
         */
        zone?: string;
    }
    interface Schema$OperationAggregatedList {
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] A map of scoped operation lists.
         */
        items?: {
            [key: string]: Schema$OperationsScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#operationAggregatedList for aggregated lists of operations.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of Operation resources.
     */
    interface Schema$OperationList {
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] A list of Operation resources.
         */
        items?: Schema$Operation[];
        /**
         * [Output Only] Type of resource. Always compute#operations for Operations resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$OperationsScopedList {
        /**
         * [Output Only] A list of operations contained in this scope.
         */
        operations?: Schema$Operation[];
        /**
         * [Output Only] Informational warning which replaces the list of operations when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$OrganizationSecurityPoliciesListAssociationsResponse {
        /**
         * A list of associations.
         */
        associations?: Schema$SecurityPolicyAssociation[];
        /**
         * [Output Only] Type of securityPolicy associations. Always compute#organizationSecurityPoliciesListAssociations for lists of securityPolicy associations.
         */
        kind?: string;
    }
    /**
     * Configuration for the origin authentication method.
     */
    interface Schema$OriginAuthenticationMethod {
        jwt?: Schema$Jwt;
    }
    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool.
     */
    interface Schema$OutlierDetection {
        /**
         * The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
         */
        baseEjectionTime?: Schema$Duration;
        /**
         * Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
         */
        consecutiveErrors?: number;
        /**
         * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 5.
         */
        consecutiveGatewayFailure?: number;
        /**
         * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
         */
        enforcingConsecutiveErrors?: number;
        /**
         * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
         */
        enforcingConsecutiveGatewayFailure?: number;
        /**
         * The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
         */
        enforcingSuccessRate?: number;
        /**
         * Time interval between ejection sweep analysis. This can result in both new ejections as well as hosts being returned to service. Defaults to 10 seconds.
         */
        interval?: Schema$Duration;
        /**
         * Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 10%.
         */
        maxEjectionPercent?: number;
        /**
         * The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
         */
        successRateMinimumHosts?: number;
        /**
         * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
         */
        successRateRequestVolume?: number;
        /**
         * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
         */
        successRateStdevFactor?: number;
    }
    /**
     * Next free: 7
     */
    interface Schema$PacketIntervals {
        /**
         * Average observed inter-packet interval in milliseconds.
         */
        avgMs?: string;
        /**
         * From how long ago in the past these intervals were observed.
         */
        duration?: string;
        /**
         * Maximum observed inter-packet interval in milliseconds.
         */
        maxMs?: string;
        /**
         * Minimum observed inter-packet interval in milliseconds.
         */
        minMs?: string;
        /**
         * Number of inter-packet intervals from which these statistics were derived.
         */
        numIntervals?: string;
        /**
         * The type of packets for which inter-packet intervals were computed.
         */
        type?: string;
    }
    /**
     * Represents a PacketMirroring resource.
     */
    interface Schema$PacketMirroring {
        /**
         * The Forwarding Rule resource of type loadBalancingScheme=INTERNAL that will be used as collector for mirrored traffic. The specified forwarding rule must have isMirroringCollector set to true.
         */
        collectorIlb?: Schema$PacketMirroringForwardingRuleInfo;
        /**
         * PacketMirroring collectorInfos. Each collectorInfo specifies a set of collector VM instances, preferably in the same zone as the mirrored VM(s)
         */
        collectors?: Schema$PacketMirroringCollectorInfo;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network.  The default is TRUE.
         */
        enable?: string;
        /**
         * Filter for mirrored traffic. If unspecified, all traffic is mirrored.
         */
        filter?: Schema$PacketMirroringFilter;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings.
         */
        kind?: string;
        /**
         * PacketMirroring mirroredResourceInfos. Each mirroredResourceInfo specifies a set of mirrored VM instances and/or a set of subnetworks for which traffic from/to all VM instances will be mirrored.
         */
        mirroredResources?: Schema$PacketMirroringMirroredResourceInfo;
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network.
         */
        network?: Schema$PacketMirroringNetworkInfo;
        /**
         * PacketMirroring packetMatchers. Each packetMatcher specifies a CIRD filter that will apply to the source or destination IP in the IP header for the mirrored VM traffic.
         */
        packetMatchers?: Schema$PacketMirroringPacketMatcher[];
        /**
         * The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins.  Default value is 1000. Valid range is 0 through 65535.
         */
        priority?: number;
        /**
         * [Output Only] URI of the region where the packetMirroring resides.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
    }
    /**
     * Contains a list of packetMirrorings.
     */
    interface Schema$PacketMirroringAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of PacketMirroring resources.
         */
        items?: {
            [key: string]: Schema$PacketMirroringsScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$PacketMirroringCollectorInfo {
        /**
         * A set of virtual machines configured as destination of the mirrored traffic. They must live in zones contained in the same region as this packetMirroring.
         */
        instances?: Schema$PacketMirroringCollectorInfoInstanceInfo[];
    }
    interface Schema$PacketMirroringCollectorInfoInstanceInfo {
        /**
         * Resource URL to the virtual machine instance configured as destination of the mirrored traffic.
         */
        url?: string;
    }
    interface Schema$PacketMirroringFilter {
        /**
         * IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
         */
        cidrRanges?: string[];
        /**
         * Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
         */
        IPProtocols?: string[];
    }
    interface Schema$PacketMirroringForwardingRuleInfo {
        /**
         * [Output Only] Unique identifier for the forwarding rule; defined by the server.
         */
        canonicalUrl?: string;
        /**
         * Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
         */
        url?: string;
    }
    /**
     * Contains a list of PacketMirroring resources.
     */
    interface Schema$PacketMirroringList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of PacketMirroring resources.
         */
        items?: Schema$PacketMirroring[];
        /**
         * [Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$PacketMirroringMirroredResourceInfo {
        /**
         * A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring.  Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring.  You may specify a maximum of 50 Instances.
         */
        instances?: Schema$PacketMirroringMirroredResourceInfoInstanceInfo[];
        /**
         * A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in zones contained in the same region as this packetMirroring.  You may specify a maximum of 5 subnetworks.
         */
        subnetworks?: Schema$PacketMirroringMirroredResourceInfoSubnetInfo[];
        /**
         * A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
         */
        tags?: string[];
    }
    interface Schema$PacketMirroringMirroredResourceInfoInstanceInfo {
        /**
         * [Output Only] Unique identifier for the instance; defined by the server.
         */
        canonicalUrl?: string;
        /**
         * Resource URL to the virtual machine instance which is being mirrored.
         */
        url?: string;
    }
    interface Schema$PacketMirroringMirroredResourceInfoSubnetInfo {
        /**
         * [Output Only] Unique identifier for the subnetwork; defined by the server.
         */
        canonicalUrl?: string;
        /**
         * Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
         */
        url?: string;
    }
    interface Schema$PacketMirroringNetworkInfo {
        /**
         * [Output Only] Unique identifier for the network; defined by the server.
         */
        canonicalUrl?: string;
        /**
         * URL of the network resource.
         */
        url?: string;
    }
    interface Schema$PacketMirroringPacketMatcher {
        /**
         * IP CIDR range that applies as filter on the source or destination IP in the IP header. Only IPv4 is supported.
         */
        cidrRange?: string;
    }
    interface Schema$PacketMirroringsScopedList {
        /**
         * A list of packetMirrorings contained in this scope.
         */
        packetMirrorings?: Schema$PacketMirroring[];
        /**
         * Informational warning which replaces the list of packetMirrorings when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used.
     */
    interface Schema$PathMatcher {
        /**
         * defaultRouteAction takes effect when none of the  pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any  weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set.
         */
        defaultRouteAction?: Schema$HttpRouteAction;
        /**
         * The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource:   - https://www.googleapis.com/compute/v1/projects/project/global/backendServices/backendService  - compute/v1/projects/project/global/backendServices/backendService  - global/backendServices/backendService  If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service:   - compute.backendBuckets.use  - compute.backendServices.use
         */
        defaultService?: string;
        /**
         * When when none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.
         */
        defaultUrlRedirect?: Schema$HttpRedirectAction;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap
         */
        headerAction?: Schema$HttpHeaderAction;
        /**
         * The name to which this PathMatcher is referred by the HostRule.
         */
        name?: string;
        /**
         * The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that&#39;s required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Only one of pathRules or routeRules must be set.
         */
        pathRules?: Schema$PathRule[];
        /**
         * The list of ordered HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. The order of specifying routeRules matters: the first rule that matches will cause its specified routing action to take effect. Only one of pathRules or routeRules must be set.
         */
        routeRules?: Schema$HttpRouteRule[];
    }
    /**
     * A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
     */
    interface Schema$PathRule {
        /**
         * The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
         */
        paths?: string[];
        /**
         * In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any  weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices. Only one of routeAction or urlRedirect must be set.
         */
        routeAction?: Schema$HttpRouteAction;
        /**
         * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any  weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
         */
        service?: string;
        /**
         * When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set.
         */
        urlRedirect?: Schema$HttpRedirectAction;
    }
    /**
     * Configuration for the peer authentication method.
     */
    interface Schema$PeerAuthenticationMethod {
        /**
         * Set if mTLS is used for peer authentication.
         */
        mtls?: Schema$MutualTls;
    }
    interface Schema$PerInstanceConfig {
        /**
         * Fingerprint of this per-instance config. This field may be used in optimistic locking. It will be ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance config or the field needs to be unset.
         */
        fingerprint?: string;
        /**
         * The name of the per-instance config and the corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operation, i.e. if per-instance config with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance config for a VM instance that either doesn&#39;t exist or is not part of the group will result in a failure.
         */
        name?: string;
        /**
         * Intended preserved state for the given instance. Does not contain state generated based on Stateful Policy.
         */
        preservedState?: Schema$PreservedState;
    }
    /**
     * All fields defined in a permission are ANDed.
     */
    interface Schema$Permission {
        /**
         * Extra custom constraints. The constraints are ANDed together.
         */
        constraints?: Schema$PermissionConstraint[];
        /**
         * Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
         */
        hosts?: string[];
        /**
         * HTTP method.
         */
        methods?: string[];
        /**
         * Negate of hosts. Specifies exclusions.
         */
        notHosts?: string[];
        /**
         * Negate of methods. Specifies exclusions.
         */
        notMethods?: string[];
        /**
         * Negate of paths. Specifies exclusions.
         */
        notPaths?: string[];
        /**
         * Negate of ports. Specifies exclusions.
         */
        notPorts?: string[];
        /**
         * HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
         */
        paths?: string[];
        /**
         * Port names or numbers.
         */
        ports?: string[];
    }
    /**
     * Custom constraint that specifies a key and a list of allowed values for Istio attributes.
     */
    interface Schema$PermissionConstraint {
        /**
         * Key of the constraint.
         */
        key?: string;
        /**
         * A list of allowed values.
         */
        values?: string[];
    }
    /**
     * Defines an Identity and Access Management (IAM) policy. It is used to specify access control policies for Cloud Platform resources.    A `Policy` consists of a list of `bindings`. A `binding` binds a list of `members` to a `role`, where the members can be user accounts, Google groups, Google domains, and service accounts. A `role` is a named list of permissions defined by IAM.  **JSON Example**  { &quot;bindings&quot;: [ { &quot;role&quot;: &quot;roles/owner&quot;, &quot;members&quot;: [ &quot;user:mike@example.com&quot;, &quot;group:admins@example.com&quot;, &quot;domain:google.com&quot;, &quot;serviceAccount:my-other-app@appspot.gserviceaccount.com&quot; ] }, { &quot;role&quot;: &quot;roles/viewer&quot;, &quot;members&quot;: [&quot;user:sean@example.com&quot;] } ] }  **YAML Example**  bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-other-app@appspot.gserviceaccount.com role: roles/owner - members: - user:sean@example.com role: roles/viewer    For a description of IAM and its features, see the [IAM developer&#39;s guide](https://cloud.google.com/iam/docs).
     */
    interface Schema$Policy {
        /**
         * Specifies cloud audit logging configuration for this policy.
         */
        auditConfigs?: Schema$AuditConfig[];
        /**
         * Associates a list of `members` to a `role`. `bindings` with no members will result in an error.
         */
        bindings?: Schema$Binding[];
        /**
         * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.  If no `etag` is provided in the call to `setIamPolicy`, then the existing policy is overwritten blindly.
         */
        etag?: string;
        iamOwned?: boolean;
        /**
         * If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied.
         */
        rules?: Schema$Rule[];
        /**
         * Deprecated.
         */
        version?: number;
    }
    interface Schema$PreconfiguredWafSet {
        /**
         * List of entities that are currently supported for WAF rules.
         */
        expressionSets?: Schema$WafExpressionSet[];
    }
    /**
     * Preserved state for a given instance.
     */
    interface Schema$PreservedState {
        /**
         * Preserved disks defined for this instance. This map is keyed with the device names of the disks.
         */
        disks?: {
            [key: string]: Schema$PreservedStatePreservedDisk;
        };
        /**
         * Preserved metadata defined for this instance.
         */
        metadata?: {
            [key: string]: string;
        };
    }
    interface Schema$PreservedStatePreservedDisk {
        /**
         * These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
         */
        autoDelete?: string;
        /**
         * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
         */
        mode?: string;
        /**
         * The URL of the disk resource that is stateful and should be attached to the VM instance.
         */
        source?: string;
    }
    /**
     * All fields defined in a principal are ANDed.
     */
    interface Schema$Principal {
        /**
         * An expression to specify custom condition.
         */
        condition?: string;
        /**
         * The groups the principal belongs to. Exact match, prefix match, and suffix match are supported.
         */
        groups?: string[];
        /**
         * IPv4 or IPv6 address or range (In CIDR format)
         */
        ips?: string[];
        /**
         * The namespaces. Exact match, prefix match, and suffix match are supported.
         */
        namespaces?: string[];
        /**
         * Negate of groups. Specifies exclusions.
         */
        notGroups?: string[];
        /**
         * Negate of IPs. Specifies exclusions.
         */
        notIps?: string[];
        /**
         * Negate of namespaces. Specifies exclusions.
         */
        notNamespaces?: string[];
        /**
         * Negate of users. Specifies exclusions.
         */
        notUsers?: string[];
        /**
         * A map of Istio attribute to expected values. Exact match, prefix match, and suffix match are supported for values. For example, `request.headers[version]: ?v1?`. The properties are ANDed together.
         */
        properties?: {
            [key: string]: string;
        };
        /**
         * The user names/IDs or service accounts. Exact match, prefix match, and suffix match are supported.
         */
        users?: string[];
    }
    /**
     * Represents a Project resource.  A project is used to organize resources in a Google Cloud Platform environment. For more information, read about the  Resource Hierarchy. (== resource_for v1.projects ==) (== resource_for beta.projects ==)
     */
    interface Schema$Project {
        /**
         * Metadata key/value pairs available to all instances contained in this project. See Custom metadata for more information.
         */
        commonInstanceMetadata?: Schema$Metadata;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM.
         */
        defaultNetworkTier?: string;
        /**
         * [Output Only] Default service account used by VMs running in this project.
         */
        defaultServiceAccount?: string;
        /**
         * An optional textual description of the resource.
         */
        description?: string;
        /**
         * Restricted features enabled for use on this project.
         */
        enabledFeatures?: string[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server. This is not the project ID, and is just a unique ID used by Compute Engine to identify resources.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#project for projects.
         */
        kind?: string;
        /**
         * The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine.
         */
        name?: string;
        /**
         * [Output Only] Quotas assigned to this project.
         */
        quotas?: Schema$Quota[];
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * The naming prefix for daily usage reports and the Google Cloud Storage bucket where they are stored.
         */
        usageExportLocation?: Schema$UsageExportLocation;
        /**
         * [Output Only] The role this project has in a shared VPC configuration. Currently only HOST projects are differentiated.
         */
        xpnProjectStatus?: string;
    }
    interface Schema$ProjectsDisableXpnResourceRequest {
        /**
         * Service resource (a.k.a service project) ID.
         */
        xpnResource?: Schema$XpnResourceId;
    }
    interface Schema$ProjectsEnableXpnResourceRequest {
        /**
         * Service resource (a.k.a service project) ID.
         */
        xpnResource?: Schema$XpnResourceId;
    }
    interface Schema$ProjectsGetXpnResources {
        /**
         * [Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects)
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * Service resources (a.k.a service projects) attached to this project as their shared VPC host.
         */
        resources?: Schema$XpnResourceId[];
    }
    interface Schema$ProjectsListXpnHostsRequest {
        /**
         * Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project.
         */
        organization?: string;
    }
    interface Schema$ProjectsSetDefaultNetworkTierRequest {
        /**
         * Default network tier to be set.
         */
        networkTier?: string;
    }
    interface Schema$ProjectsSetDefaultServiceAccountRequest {
        /**
         * Email address of the service account.
         */
        email?: string;
    }
    /**
     * A quotas entry.
     */
    interface Schema$Quota {
        /**
         * [Output Only] Quota limit for this metric.
         */
        limit?: number;
        /**
         * [Output Only] Name of the quota metric.
         */
        metric?: string;
        /**
         * [Output Only] Owning resource. This is the resource on which this quota is applied.
         */
        owner?: string;
        /**
         * [Output Only] Current usage of this metric.
         */
        usage?: number;
    }
    interface Schema$RbacPolicy {
        /**
         * Name of the RbacPolicy.
         */
        name?: string;
        /**
         * The list of permissions.
         */
        permissions?: Schema$Permission[];
        /**
         * The list of principals.
         */
        principals?: Schema$Principal[];
    }
    /**
     * Represents a reference to a resource.
     */
    interface Schema$Reference {
        /**
         * [Output Only] Type of the resource. Always compute#reference for references.
         */
        kind?: string;
        /**
         * A description of the reference type with no implied semantics. Possible values include:   - MEMBER_OF
         */
        referenceType?: string;
        /**
         * URL of the resource which refers to the target.
         */
        referrer?: string;
        /**
         * URL of the resource to which this reference points.
         */
        target?: string;
    }
    /**
     * Represents a Region resource.  A region is a geographical area where a resource is located. For more information, read Regions and Zones. (== resource_for beta.regions ==) (== resource_for v1.regions ==)
     */
    interface Schema$Region {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] The deprecation status associated with this region.
         */
        deprecated?: Schema$DeprecationStatus;
        /**
         * [Output Only] Textual description of the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#region for regions.
         */
        kind?: string;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] Quotas assigned to this region.
         */
        quotas?: Schema$Quota[];
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] Status of the region, either UP or DOWN.
         */
        status?: string;
        /**
         * [Output Only] A list of zones available in this region, in the form of resource URLs.
         */
        zones?: string[];
    }
    /**
     * Contains a list of autoscalers.
     */
    interface Schema$RegionAutoscalerList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Autoscaler resources.
         */
        items?: Schema$Autoscaler[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$RegionCommitmentsUpdateReservationsRequest {
        /**
         * List of reservations for the capacity move of VMs with accelerators and local ssds.
         */
        reservations?: Schema$Reservation[];
    }
    interface Schema$RegionDisksAddResourcePoliciesRequest {
        /**
         * Resource policies to be added to this disk.
         */
        resourcePolicies?: string[];
    }
    interface Schema$RegionDisksRemoveResourcePoliciesRequest {
        /**
         * Resource policies to be removed from this disk.
         */
        resourcePolicies?: string[];
    }
    interface Schema$RegionDisksResizeRequest {
        /**
         * The new size of the regional persistent disk, which is specified in GB.
         */
        sizeGb?: string;
    }
    interface Schema$RegionDiskTypeList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of DiskType resources.
         */
        items?: Schema$DiskType[];
        /**
         * [Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of InstanceGroup resources.
     */
    interface Schema$RegionInstanceGroupList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceGroup resources.
         */
        items?: Schema$InstanceGroup[];
        /**
         * The resource type.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * RegionInstanceGroupManagers.deletePerInstanceConfigs
     */
    interface Schema$RegionInstanceGroupManagerDeleteInstanceConfigReq {
        /**
         * The list of instances for which we want to delete per-instance configs on this managed instance group.
         */
        instances?: string[];
        /**
         * The list of instance names for which we want to delete per-instance configs on this managed instance group.
         */
        names?: string[];
    }
    /**
     * Contains a list of managed instance groups.
     */
    interface Schema$RegionInstanceGroupManagerList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceGroupManager resources.
         */
        items?: Schema$InstanceGroupManager[];
        /**
         * [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * RegionInstanceGroupManagers.patchPerInstanceConfigs
     */
    interface Schema$RegionInstanceGroupManagerPatchInstanceConfigReq {
        /**
         * The list of per-instance configs to insert or patch on this managed instance group.
         */
        perInstanceConfigs?: Schema$PerInstanceConfig[];
    }
    interface Schema$RegionInstanceGroupManagersAbandonInstancesRequest {
        /**
         * The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
    }
    /**
     * InstanceGroupManagers.applyUpdatesToInstances
     */
    interface Schema$RegionInstanceGroupManagersApplyUpdatesRequest {
        /**
         * The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
        /**
         * The maximal action that should be performed on the instances. By default REPLACE. This field is deprecated, please use most_disruptive_allowed_action.
         */
        maximalAction?: string;
        /**
         * The minimal action that you want to perform on each instance during the update:   - REPLACE: At minimum, delete the instance and create it again.  - RESTART: Stop the instance and start it again.  - REFRESH: Do not stop the instance.  - NONE: Do not disrupt the instance at all.  By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
         */
        minimalAction?: string;
        /**
         * The most disruptive action that you want to perform on each instance during the update:   - REPLACE: Delete the instance and create it again.  - RESTART: Stop the instance and start it again.  - REFRESH: Do not stop the instance.  - NONE: Do not disrupt the instance at all.  By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
         */
        mostDisruptiveAllowedAction?: string;
    }
    /**
     * RegionInstanceGroupManagers.createInstances
     */
    interface Schema$RegionInstanceGroupManagersCreateInstancesRequest {
        /**
         * [Required] List of specifications of per-instance configs.
         */
        instances?: Schema$PerInstanceConfig[];
    }
    interface Schema$RegionInstanceGroupManagersDeleteInstancesRequest {
        /**
         * The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
    }
    interface Schema$RegionInstanceGroupManagersListErrorsResponse {
        /**
         * [Output Only] The list of errors of the managed instance group.
         */
        items?: Schema$InstanceManagedByIgmError[];
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
    }
    interface Schema$RegionInstanceGroupManagersListInstanceConfigsResp {
        /**
         * [Output Only] The list of PerInstanceConfig.
         */
        items?: Schema$PerInstanceConfig[];
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$RegionInstanceGroupManagersListInstancesResponse {
        /**
         * A list of managed instances.
         */
        managedInstances?: Schema$ManagedInstance[];
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
    }
    interface Schema$RegionInstanceGroupManagersRecreateRequest {
        /**
         * The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME].
         */
        instances?: string[];
    }
    interface Schema$RegionInstanceGroupManagersSetAutoHealingRequest {
        autoHealingPolicies?: Schema$InstanceGroupManagerAutoHealingPolicy[];
    }
    interface Schema$RegionInstanceGroupManagersSetTargetPoolsRequest {
        /**
         * Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional.
         */
        fingerprint?: string;
        /**
         * The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
         */
        targetPools?: string[];
    }
    interface Schema$RegionInstanceGroupManagersSetTemplateRequest {
        /**
         * URL of the InstanceTemplate resource from which all new instances will be created.
         */
        instanceTemplate?: string;
    }
    /**
     * RegionInstanceGroupManagers.updatePerInstanceConfigs
     */
    interface Schema$RegionInstanceGroupManagerUpdateInstanceConfigReq {
        /**
         * The list of per-instance configs to insert or patch on this managed instance group.
         */
        perInstanceConfigs?: Schema$PerInstanceConfig[];
    }
    interface Schema$RegionInstanceGroupsListInstances {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of InstanceWithNamedPorts resources.
         */
        items?: Schema$InstanceWithNamedPorts[];
        /**
         * The resource type.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$RegionInstanceGroupsListInstancesRequest {
        /**
         * Instances in which state should be returned. Valid options are: &#39;ALL&#39;, &#39;RUNNING&#39;. By default, it lists all instances.
         */
        instanceState?: string;
        /**
         * Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances.
         */
        portName?: string;
    }
    interface Schema$RegionInstanceGroupsSetNamedPortsRequest {
        /**
         * The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request.
         */
        fingerprint?: string;
        /**
         * The list of named ports to set for this instance group.
         */
        namedPorts?: Schema$NamedPort[];
    }
    /**
     * Contains a list of region resources.
     */
    interface Schema$RegionList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Region resources.
         */
        items?: Schema$Region[];
        /**
         * [Output Only] Type of resource. Always compute#regionList for lists of regions.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$RegionSetLabelsRequest {
        /**
         * The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint.
         */
        labelFingerprint?: string;
        /**
         * The labels to set for this resource.
         */
        labels?: {
            [key: string]: string;
        };
    }
    interface Schema$RegionSetPolicyRequest {
        /**
         * Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use &#39;policy&#39; to specify bindings.
         */
        bindings?: Schema$Binding[];
        /**
         * Flatten Policy to create a backward compatible wire-format. Deprecated. Use &#39;policy&#39; to specify the etag.
         */
        etag?: string;
        /**
         * REQUIRED: The complete policy to be applied to the &#39;resource&#39;. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
         */
        policy?: Schema$Policy;
    }
    interface Schema$RegionTargetHttpsProxiesSetSslCertificatesRequest {
        /**
         * New set of SslCertificate resources to associate with this TargetHttpsProxy resource. Currently exactly one SslCertificate resource must be specified.
         */
        sslCertificates?: string[];
    }
    interface Schema$RegionUrlMapsValidateRequest {
        /**
         * Content of the UrlMap to be validated.
         */
        resource?: Schema$UrlMap;
    }
    /**
     * A policy that specifies how requests intended for the route&#39;s backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
     */
    interface Schema$RequestMirrorPolicy {
        /**
         * The full or partial URL to the BackendService resource being mirrored to.
         */
        backendService?: string;
    }
    /**
     * Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read  Reserving zonal resources. (== resource_for beta.reservations ==) (== resource_for v1.reservations ==) (== NextID: 13 ==)
     */
    interface Schema$Reservation {
        /**
         * [OutputOnly] Full or partial url for parent commitment for reservations which are tied to a commitment.
         */
        commitment?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#reservations for reservations.
         */
        kind?: string;
        /**
         * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] Server-defined fully-qualified URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * Reservation for instances with specific machine shapes.
         */
        specificReservation?: Schema$AllocationSpecificSKUReservation;
        /**
         * Indicates whether the reservation can be consumed by VMs with affinity for &quot;any&quot; reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
         */
        specificReservationRequired?: boolean;
        /**
         * [Output Only] The status of the reservation.
         */
        status?: string;
        /**
         * Zone in which the reservation resides, must be provided if reservation is created with commitment creation.
         */
        zone?: string;
    }
    /**
     * Specifies the reservations that this instance can consume from.
     */
    interface Schema$ReservationAffinity {
        /**
         * Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See  Consuming reserved instances for examples.
         */
        consumeReservationType?: string;
        /**
         * Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
         */
        key?: string;
        /**
         * Corresponds to the label values of a reservation resource.
         */
        values?: string[];
    }
    /**
     * Contains a list of reservations.
     */
    interface Schema$ReservationAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Allocation resources.
         */
        items?: {
            [key: string]: Schema$ReservationsScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$ReservationList {
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] A list of Allocation resources.
         */
        items?: Schema$Reservation[];
        /**
         * [Output Only] Type of resource.Always compute#reservationsList for listsof reservations
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$ReservationsResizeRequest {
        /**
         * Number of allocated resources can be resized with minimum = 1 and maximum = 1000.
         */
        specificSkuCount?: string;
    }
    interface Schema$ReservationsScopedList {
        /**
         * A list of reservations contained in this scope.
         */
        reservations?: Schema$Reservation[];
        /**
         * Informational warning which replaces the list of reservations when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Commitment for a particular resource (a Commitment is composed of one or more of these).
     */
    interface Schema$ResourceCommitment {
        /**
         * Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
         */
        acceleratorType?: string;
        /**
         * The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
         */
        amount?: string;
        /**
         * Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
         */
        type?: string;
    }
    interface Schema$ResourceGroupReference {
        /**
         * A URI referencing one of the instance groups or network endpoint groups listed in the backend service.
         */
        group?: string;
    }
    interface Schema$ResourcePoliciesScopedList {
        /**
         * A list of resourcePolicies contained in this scope.
         */
        resourcePolicies?: Schema$ResourcePolicy[];
        /**
         * Informational warning which replaces the list of resourcePolicies when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$ResourcePolicy {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        description?: string;
        /**
         * Resource policy for instacnes for placement configuration.
         */
        groupPlacementPolicy?: Schema$ResourcePolicyGroupPlacementPolicy;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#resource_policies for resource policies.
         */
        kind?: string;
        /**
         * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        region?: string;
        /**
         * [Output Only] Server-defined fully-qualified URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * Resource policy for persistent disks for creating snapshots.
         */
        snapshotSchedulePolicy?: Schema$ResourcePolicySnapshotSchedulePolicy;
        /**
         * [Output Only] The status of resource policy creation.
         */
        status?: string;
        /**
         * Resource policy applicable to VMs for infrastructure maintenance.
         */
        vmMaintenancePolicy?: Schema$ResourcePolicyVmMaintenancePolicy;
    }
    /**
     * Contains a list of resourcePolicies.
     */
    interface Schema$ResourcePolicyAggregatedList {
        etag?: string;
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of ResourcePolicy resources.
         */
        items?: {
            [key: string]: Schema$ResourcePoliciesScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Time window specified for daily operations.
     */
    interface Schema$ResourcePolicyDailyCycle {
        /**
         * Defines a schedule that runs every nth day of the month.
         */
        daysInCycle?: number;
        /**
         * [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
         */
        duration?: string;
        /**
         * Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
         */
        startTime?: string;
    }
    /**
     * A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
     */
    interface Schema$ResourcePolicyGroupPlacementPolicy {
        /**
         * Specifies network locality
         */
        locality?: string;
        /**
         * Specifies instances to hosts placement relationship
         */
        style?: string;
        /**
         * Number of vms in this placement group
         */
        vmCount?: number;
    }
    /**
     * Time window specified for hourly operations.
     */
    interface Schema$ResourcePolicyHourlyCycle {
        /**
         * [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
         */
        duration?: string;
        /**
         * Allows to define schedule that runs every nth hour.
         */
        hoursInCycle?: number;
        /**
         * Time within the window to start the operations. It must be in format &quot;HH:MM&quot;, where HH : [00-23] and MM : [00-00] GMT.
         */
        startTime?: string;
    }
    interface Schema$ResourcePolicyList {
        etag?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] A list of ResourcePolicy resources.
         */
        items?: Schema$ResourcePolicy[];
        /**
         * [Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
     */
    interface Schema$ResourcePolicySnapshotSchedulePolicy {
        /**
         * Retention policy applied to snapshots created by this resource policy.
         */
        retentionPolicy?: Schema$ResourcePolicySnapshotSchedulePolicyRetentionPolicy;
        /**
         * A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
         */
        schedule?: Schema$ResourcePolicySnapshotSchedulePolicySchedule;
        /**
         * Properties with which snapshots are created such as labels, encryption keys.
         */
        snapshotProperties?: Schema$ResourcePolicySnapshotSchedulePolicySnapshotProperties;
    }
    /**
     * Policy for retention of scheduled snapshots.
     */
    interface Schema$ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
        /**
         * Maximum age of the snapshot that is allowed to be kept.
         */
        maxRetentionDays?: number;
        /**
         * Specifies the behavior to apply to existing, scheduled snapshots snapshots if the policy is changed.
         */
        onPolicySwitch?: string;
        /**
         * Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
         */
        onSourceDiskDelete?: string;
    }
    /**
     * A schedule for disks where the schedueled operations are performed.
     */
    interface Schema$ResourcePolicySnapshotSchedulePolicySchedule {
        dailySchedule?: Schema$ResourcePolicyDailyCycle;
        hourlySchedule?: Schema$ResourcePolicyHourlyCycle;
        weeklySchedule?: Schema$ResourcePolicyWeeklyCycle;
    }
    /**
     * Specified snapshot properties for scheduled snapshots created by this policy.
     */
    interface Schema$ResourcePolicySnapshotSchedulePolicySnapshotProperties {
        /**
         * Indication to perform a ?guest aware? snapshot.
         */
        guestFlush?: boolean;
        /**
         * Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * GCS bucket storage location of the auto snapshot (regional or multi-regional).
         */
        storageLocations?: string[];
    }
    interface Schema$ResourcePolicyVmMaintenancePolicy {
        concurrencyControlGroup?: Schema$ResourcePolicyVmMaintenancePolicyConcurrencyControl;
        /**
         * Maintenance windows that are applied to VMs covered by this policy.
         */
        maintenanceWindow?: Schema$ResourcePolicyVmMaintenancePolicyMaintenanceWindow;
    }
    /**
     * A concurrency control configuration. Defines a group config that, when attached to an instance, recognizes that instance as part of a group of instances where only up the concurrency_limit of instances in that group can undergo simultaneous maintenance. For more information: go/concurrency-control-design-doc
     */
    interface Schema$ResourcePolicyVmMaintenancePolicyConcurrencyControl {
        concurrencyLimit?: number;
    }
    /**
     * A maintenance window for VMs. When set, we restrict our maintenance operations to this window.
     */
    interface Schema$ResourcePolicyVmMaintenancePolicyMaintenanceWindow {
        dailyMaintenanceWindow?: Schema$ResourcePolicyDailyCycle;
    }
    /**
     * Time window specified for weekly operations.
     */
    interface Schema$ResourcePolicyWeeklyCycle {
        /**
         * Up to 7 intervals/windows, one for each day of the week.
         */
        dayOfWeeks?: Schema$ResourcePolicyWeeklyCycleDayOfWeek[];
    }
    interface Schema$ResourcePolicyWeeklyCycleDayOfWeek {
        /**
         * Allows to define schedule that runs specified day of the week.
         */
        day?: string;
        /**
         * [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
         */
        duration?: string;
        /**
         * Time within the window to start the operations. It must be in format &quot;HH:MM&quot;, where HH : [00-23] and MM : [00-00] GMT.
         */
        startTime?: string;
    }
    /**
     * Represents a Route resource.  A route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview. (== resource_for beta.routes ==) (== resource_for v1.routes ==)
     */
    interface Schema$Route {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this field when you create the resource.
         */
        description?: string;
        /**
         * The destination range of outgoing packets that this route applies to. Only IPv4 is supported.
         */
        destRange?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of this resource. Always compute#routes for Route resources.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
         */
        name?: string;
        /**
         * Fully-qualified URL of the network that this route applies to.
         */
        network?: string;
        /**
         * The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL:  projects/project/global/gateways/default-internet-gateway
         */
        nextHopGateway?: string;
        /**
         * The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets. You can only specify the forwarding rule as a partial or full URL. For example, the following are all valid URLs:   - https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule  - regions/region/forwardingRules/forwardingRule  Note that this can only be used when the destination_range is a public (non-RFC 1918) IP CIDR range.
         */
        nextHopIlb?: string;
        /**
         * The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/
         */
        nextHopInstance?: string;
        /**
         * [Output Only] The URL to an InterconnectAttachment which is the next hop for the route. This field will only be populated for the dynamic routes generated by Cloud Router with a linked interconnectAttachment.
         */
        nextHopInterconnectAttachment?: string;
        /**
         * The network IP address of an instance that should handle matching packets. Only IPv4 is supported.
         */
        nextHopIp?: string;
        /**
         * The URL of the local network if it should handle matching packets.
         */
        nextHopNetwork?: string;
        /**
         * [Output Only] The network peering name that should handle matching packets, which should conform to RFC1035.
         */
        nextHopPeering?: string;
        /**
         * The URL to a VpnTunnel that should handle matching packets.
         */
        nextHopVpnTunnel?: string;
        /**
         * The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive.
         */
        priority?: number;
        /**
         * [Output Only] Server-defined fully-qualified URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * A list of instance tags to which this route applies.
         */
        tags?: string[];
        /**
         * [Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages.
         */
        warnings?: Array<{
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        }>;
    }
    /**
     * Contains a list of Route resources.
     */
    interface Schema$RouteList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Route resources.
         */
        items?: Schema$Route[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Cloud Router resource.  For more information about Cloud Router, read the the Cloud Router overview.
     */
    interface Schema$Router {
        /**
         * BGP information specific to this router.
         */
        bgp?: Schema$RouterBgp;
        /**
         * BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or peer IP address. Please refer to RFC4273.
         */
        bgpPeers?: Schema$RouterBgpPeer[];
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * Router interfaces. Each interface requires either one linked resource, (for example, linkedVpnTunnel), or IP address and IP address range (for example, ipRange), or both.
         */
        interfaces?: Schema$RouterInterface[];
        /**
         * [Output Only] Type of resource. Always compute#router for routers.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * A list of NAT services created in this router.
         */
        nats?: Schema$RouterNat[];
        /**
         * URI of the network to which this router belongs.
         */
        network?: string;
        /**
         * [Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
    }
    /**
     * Description-tagged IP ranges for the router to advertise.
     */
    interface Schema$RouterAdvertisedIpRange {
        /**
         * User-specified description for the IP range.
         */
        description?: string;
        /**
         * The IP range to advertise. The value must be a CIDR-formatted string.
         */
        range?: string;
    }
    /**
     * Contains a list of routers.
     */
    interface Schema$RouterAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Router resources.
         */
        items?: {
            [key: string]: Schema$RoutersScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$RouterBgp {
        /**
         * User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
         */
        advertisedGroups?: string[];
        /**
         * User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
         */
        advertisedIpRanges?: Schema$RouterAdvertisedIpRange[];
        /**
         * User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
         */
        advertiseMode?: string;
        /**
         * Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
         */
        asn?: number;
        /**
         * The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer?s hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 1 and 120. The default is 20.
         */
        keepaliveInterval?: number;
    }
    interface Schema$RouterBgpPeer {
        /**
         * User-specified list of prefix groups to advertise in custom mode, which can take one of the following options:  - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets.  - ALL_VPC_SUBNETS: Advertises the router&#39;s own VPC subnets.  - ALL_PEER_VPC_SUBNETS: Advertises peer subnets of the router&#39;s VPC network. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the &quot;bgp&quot; message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
         */
        advertisedGroups?: string[];
        /**
         * User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the &quot;bgp&quot; message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
         */
        advertisedIpRanges?: Schema$RouterAdvertisedIpRange[];
        /**
         * The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
         */
        advertisedRoutePriority?: number;
        /**
         * User-specified flag to indicate which mode to use for advertisement.
         */
        advertiseMode?: string;
        /**
         * BFD configuration for the BGP peering.
         */
        bfd?: Schema$RouterBgpPeerBfd;
        /**
         * The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
         */
        enable?: string;
        /**
         * Name of the interface the BGP peer is associated with.
         */
        interfaceName?: string;
        /**
         * IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
         */
        ipAddress?: string;
        /**
         * [Output Only] The resource that configures and manages this BGP peer.  - MANAGED_BY_USER is the default value and can be managed by you or other users  - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
         */
        managementType?: string;
        /**
         * Name of this BGP peer. The name must be 1-63 characters long and comply with RFC1035.
         */
        name?: string;
        /**
         * Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
         */
        peerAsn?: number;
        /**
         * IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
         */
        peerIpAddress?: string;
    }
    interface Schema$RouterBgpPeerBfd {
        /**
         * The minimum interval, in milliseconds, between BFD packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router. If BFD echo mode is enabled on this router and the peer router, this value is used to negotiate the interval between BFD echo packets transmitted by the peer router. Otherwise, it will be used to determine the interval between BFD control packets. If set, this value must be between 100 and 30000. The default is 300.
         */
        minReceiveInterval?: number;
        /**
         * The minimum interval, in milliseconds, between BFD packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router. If BFD echo mode is enabled on this router and the peer router, this value is used to negotiate the interval between BFD echo packets transmitted by this router. Otherwise, it will be used to determine the interval between BFD control packets. If set, this value must be between 100 and 30000. The default is 300.
         */
        minTransmitInterval?: number;
        /**
         * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE.
         */
        mode?: string;
        /**
         * The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 2 and 16. The default is 3.
         */
        multiplier?: number;
        /**
         * The BFD packet mode for this BGP peer. If set to CONTROL_AND_ECHO, BFD echo mode is enabled for this BGP peer. In this mode, if the peer router also has BFD echo mode enabled, BFD echo packets will be sent to the other router. If the peer router does not have BFD echo mode enabled, only control packets will be sent. If set to CONTROL_ONLY, BFD echo mode is disabled for this BGP peer. If this router and the peer router have a multihop connection, this should be set to CONTROL_ONLY as BFD echo mode is only supported on singlehop connections. The default is CONTROL_AND_ECHO.
         */
        packetMode?: string;
        /**
         * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE.
         */
        sessionInitializationMode?: string;
        /**
         * The minimum interval, in milliseconds, between BFD control packets transmitted to and received from the peer router when BFD echo mode is enabled on both routers. The actual transmit and receive intervals are negotiated between the two routers and are equal to the greater of this value and the corresponding interval on the other router. If set, this value must be between 1000 and 30000. The default is 5000.
         */
        slowTimerInterval?: number;
    }
    interface Schema$RouterInterface {
        /**
         * IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
         */
        ipRange?: string;
        /**
         * URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be either be a VPN tunnel or an Interconnect attachment.
         */
        linkedInterconnectAttachment?: string;
        /**
         * URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be either a VPN tunnel or an Interconnect attachment.
         */
        linkedVpnTunnel?: string;
        /**
         * [Output Only] The resource that configures and manages this interface.  - MANAGED_BY_USER is the default value and can be managed directly by users.  - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
         */
        managementType?: string;
        /**
         * Name of this interface entry. The name must be 1-63 characters long and comply with RFC1035.
         */
        name?: string;
    }
    /**
     * Contains a list of Router resources.
     */
    interface Schema$RouterList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Router resources.
         */
        items?: Schema$Router[];
        /**
         * [Output Only] Type of resource. Always compute#router for routers.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
     */
    interface Schema$RouterNat {
        /**
         * A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
         */
        drainNatIps?: string[];
        /**
         * Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
         */
        icmpIdleTimeoutSec?: number;
        /**
         * Configure logging on this NAT.
         */
        logConfig?: Schema$RouterNatLogConfig;
        /**
         * Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
         */
        minPortsPerVm?: number;
        /**
         * Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
         */
        name?: string;
        /**
         * Specify the NatIpAllocateOption, which can take one of the following values:  - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs.  - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can&#39;t specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
         */
        natIpAllocateOption?: string;
        /**
         * A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
         */
        natIps?: string[];
        /**
         * Specify the Nat option, which can take one of the following values:  - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat.  - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat.  - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
         */
        sourceSubnetworkIpRangesToNat?: string;
        /**
         * A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
         */
        subnetworks?: Schema$RouterNatSubnetworkToNat[];
        /**
         * Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
         */
        tcpEstablishedIdleTimeoutSec?: number;
        /**
         * Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
         */
        tcpTransitoryIdleTimeoutSec?: number;
        /**
         * Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
         */
        udpIdleTimeoutSec?: number;
    }
    /**
     * Configuration of logging on a NAT.
     */
    interface Schema$RouterNatLogConfig {
        /**
         * Indicates whether or not to export logs. This is false by default.
         */
        enable?: boolean;
        /**
         * Specifies the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT.
         */
        filter?: string;
    }
    /**
     * Defines the IP ranges that want to use NAT for a subnetwork.
     */
    interface Schema$RouterNatSubnetworkToNat {
        /**
         * URL for the subnetwork resource that will use NAT.
         */
        name?: string;
        /**
         * A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if &quot;LIST_OF_SECONDARY_IP_RANGES&quot; is one of the values in source_ip_ranges_to_nat.
         */
        secondaryIpRangeNames?: string[];
        /**
         * Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: [&quot;PRIMARY_IP_RANGE&quot;, &quot;LIST_OF_SECONDARY_IP_RANGES&quot;] Default: [ALL_IP_RANGES]
         */
        sourceIpRangesToNat?: string[];
    }
    interface Schema$RoutersPreviewResponse {
        /**
         * Preview of given router.
         */
        resource?: Schema$Router;
    }
    interface Schema$RoutersScopedList {
        /**
         * A list of routers contained in this scope.
         */
        routers?: Schema$Router[];
        /**
         * Informational warning which replaces the list of routers when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$RouterStatus {
        /**
         * Best routes for this router&#39;s network.
         */
        bestRoutes?: Schema$Route[];
        /**
         * Best routes learned by this router.
         */
        bestRoutesForRouter?: Schema$Route[];
        bgpPeerStatus?: Schema$RouterStatusBgpPeerStatus[];
        natStatus?: Schema$RouterStatusNatStatus[];
        /**
         * URI of the network to which this router belongs.
         */
        network?: string;
    }
    interface Schema$RouterStatusBgpPeerStatus {
        /**
         * Routes that were advertised to the remote BGP peer
         */
        advertisedRoutes?: Schema$Route[];
        bfdStatus?: Schema$BfdStatus;
        /**
         * IP address of the local BGP interface.
         */
        ipAddress?: string;
        /**
         * URL of the VPN tunnel that this BGP peer controls.
         */
        linkedVpnTunnel?: string;
        /**
         * Name of this BGP peer. Unique within the Routers resource.
         */
        name?: string;
        /**
         * Number of routes learned from the remote BGP Peer.
         */
        numLearnedRoutes?: number;
        /**
         * IP address of the remote BGP interface.
         */
        peerIpAddress?: string;
        /**
         * BGP state as specified in RFC1771.
         */
        state?: string;
        /**
         * Status of the BGP peer: {UP, DOWN}
         */
        status?: string;
        /**
         * Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds
         */
        uptime?: string;
        /**
         * Time this session has been up, in seconds. Format: 145
         */
        uptimeSeconds?: string;
    }
    /**
     * Status of a NAT contained in this router. Next tag: 9
     */
    interface Schema$RouterStatusNatStatus {
        /**
         * A list of IPs auto-allocated for NAT. Example: [&quot;1.1.1.1&quot;, &quot;129.2.16.89&quot;]
         */
        autoAllocatedNatIps?: string[];
        /**
         * A list of IPs auto-allocated for NAT that are in drain mode. Example: [&quot;1.1.1.1&quot;, ?179.12.26.133?].
         */
        drainAutoAllocatedNatIps?: string[];
        /**
         * A list of IPs user-allocated for NAT that are in drain mode. Example: [&quot;1.1.1.1&quot;, ?179.12.26.133?].
         */
        drainUserAllocatedNatIps?: string[];
        /**
         * The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when auto-allocation of NAT IPs is *not* used.
         */
        minExtraNatIpsNeeded?: number;
        /**
         * Unique name of this NAT.
         */
        name?: string;
        /**
         * Number of VM endpoints (i.e., Nics) that can use NAT.
         */
        numVmEndpointsWithNatMappings?: number;
        /**
         * A list of fully qualified URLs of reserved IP address resources.
         */
        userAllocatedNatIpResources?: string[];
        /**
         * A list of IPs user-allocated for NAT. They will be raw IP strings like &quot;179.12.26.133&quot;.
         */
        userAllocatedNatIps?: string[];
    }
    interface Schema$RouterStatusResponse {
        /**
         * Type of resource.
         */
        kind?: string;
        result?: Schema$RouterStatus;
    }
    /**
     * A rule to be applied in a Policy.
     */
    interface Schema$Rule {
        /**
         * Required
         */
        action?: string;
        /**
         * Additional restrictions that must be met. All conditions must pass for the rule to match.
         */
        conditions?: Schema$Condition[];
        /**
         * Human-readable description of the rule.
         */
        description?: string;
        /**
         * If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
         */
        ins?: string[];
        /**
         * The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action.
         */
        logConfigs?: Schema$LogConfig[];
        /**
         * If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.
         */
        notIns?: string[];
        /**
         * A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.
         */
        permissions?: string[];
    }
    /**
     * An instance-attached disk resource.
     */
    interface Schema$SavedAttachedDisk {
        /**
         * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
         */
        autoDelete?: boolean;
        /**
         * Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
         */
        boot?: boolean;
        /**
         * Specifies the name of the disk attached to the source instance.
         */
        deviceName?: string;
        /**
         * The encryption key for the disk.
         */
        diskEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * The size of the disk in base-2 GB.
         */
        diskSizeGb?: string;
        /**
         * A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.
         */
        guestOsFeatures?: Schema$GuestOsFeature[];
        /**
         * Specifies zero-based index of the disk that is attached to the source instance.
         */
        index?: number;
        /**
         * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
         */
        interface?: string;
        /**
         * [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
         */
        kind?: string;
        /**
         * [Output Only] Any valid publicly visible licenses.
         */
        licenses?: string[];
        /**
         * The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY.
         */
        mode?: string;
        /**
         * Specifies a URL of the disk attached to the source instance.
         */
        source?: string;
        /**
         * [Output Only] A size of the storage used by the disk&#39;s snapshot by this machine image.
         */
        storageBytes?: string;
        /**
         * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
         */
        storageBytesStatus?: string;
        /**
         * Specifies the type of the attached disk, either SCRATCH or PERSISTENT.
         */
        type?: string;
    }
    /**
     * Sets the scheduling options for an Instance. NextID: 9
     */
    interface Schema$Scheduling {
        /**
         * Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted.  By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
         */
        automaticRestart?: boolean;
        /**
         * Defines whether the instance is tolerant of higher cpu latency. This can only be set during instance creation, or when the instance is not currently running. It must not be set if the preemptible option is also set.
         */
        latencyTolerant?: boolean;
        /**
         * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
         */
        minNodeCpus?: number;
        /**
         * A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information.
         */
        nodeAffinities?: Schema$SchedulingNodeAffinity[];
        /**
         * Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
         */
        onHostMaintenance?: string;
        /**
         * Defines whether the instance is preemptible. This can only be set during instance creation, it cannot be set or changed after the instance has been created.
         */
        preemptible?: boolean;
    }
    /**
     * Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
     */
    interface Schema$SchedulingNodeAffinity {
        /**
         * Corresponds to the label key of Node resource.
         */
        key?: string;
        /**
         * Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
         */
        operator?: string;
        /**
         * Corresponds to the label values of Node resource.
         */
        values?: string[];
    }
    /**
     * The configuration to access the SDS server.
     */
    interface Schema$SdsConfig {
        /**
         * The configuration to access the SDS server over GRPC.
         */
        grpcServiceConfig?: Schema$GrpcServiceConfig;
    }
    interface Schema$SecurityPoliciesListPreconfiguredExpressionSetsResponse {
        preconfiguredExpressionSets?: Schema$SecurityPoliciesWafConfig;
    }
    interface Schema$SecurityPoliciesWafConfig {
        wafRules?: Schema$PreconfiguredWafSet;
    }
    /**
     * Represents a Cloud Armor Security Policy resource.  Only external backend services that use load balancers can reference a Security Policy. For more information, read  Cloud Armor Security Policy Concepts. (== resource_for v1.securityPolicies ==) (== resource_for beta.securityPolicies ==)
     */
    interface Schema$SecurityPolicy {
        /**
         * A list of assocations that belong to this policy.
         */
        associations?: Schema$SecurityPolicyAssociation[];
        cloudArmorConfig?: Schema$SecurityPolicyCloudArmorConfig;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Specifies a fingerprint for this resource, which is essentially a hash of the metadata&#39;s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make get() request to the security policy.
         */
        fingerprint?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output only] Type of the resource. Always compute#securityPolicyfor security policies
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this security policy, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels.  To see the latest fingerprint, make get() request to the security policy.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this security policy resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match &quot;*&quot;). If no rules are provided when creating a security policy, a default rule with action &quot;allow&quot; will be added.
         */
        rules?: Schema$SecurityPolicyRule[];
        /**
         * [Output Only] Total count of all security policy rule tuples. A security policy can not exceed a set number of tuples.
         */
        ruleTupleCount?: number;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * The type indicates the intended use of the security policy. CLOUD_ARMOR policies apply to backend services. FIREWALL policies apply to organizations.
         */
        type?: string;
    }
    interface Schema$SecurityPolicyAssociation {
        /**
         * The resource that the security policy is attached to.
         */
        attachmentId?: string;
        /**
         * The name for an association.
         */
        name?: string;
        /**
         * [Output Only] The security policy ID of the association.
         */
        securityPolicyId?: string;
    }
    /**
     * Configuration options for Cloud Armor.
     */
    interface Schema$SecurityPolicyCloudArmorConfig {
        /**
         * If set to true, enables Cloud Armor Machine Learning.
         */
        enableMl?: boolean;
    }
    interface Schema$SecurityPolicyList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of SecurityPolicy resources.
         */
        items?: Schema$SecurityPolicy[];
        /**
         * [Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$SecurityPolicyReference {
        securityPolicy?: string;
    }
    /**
     * Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
     */
    interface Schema$SecurityPolicyRule {
        /**
         * The Action to preform when the client connection triggers the rule. Can currently be either &quot;allow&quot; or &quot;deny()&quot; where valid values for status are 403, 404, and 502.
         */
        action?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * The direction in which this rule applies. This field may only be specified when versioned_expr is set to FIREWALL.
         */
        direction?: string;
        /**
         * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on &quot;goto_next&quot; rules.  This field may only be specified when the versioned_expr is set to FIREWALL.
         */
        enableLogging?: boolean;
        /**
         * [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
         */
        kind?: string;
        /**
         * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding ?action? is enforced.
         */
        match?: Schema$SecurityPolicyRuleMatcher;
        /**
         * If set to true, the specified action is not enforced.
         */
        preview?: boolean;
        /**
         * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
         */
        priority?: number;
        /**
         * Must be specified if the action is &quot;rate_based_blacklist&quot; or &quot;throttle&quot;. Cannot be specified for any other actions.
         */
        rateLimitOptions?: Schema$SecurityPolicyRuleRateLimitOptions;
        /**
         * [Output Only] Calculation of the complexity of a single firewall security policy rule.
         */
        ruleTupleCount?: number;
        /**
         * A list of network resource URLs to which this rule applies. This field allows you to control which network?s VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.  This field may only be specified when versioned_expr is set to FIREWALL.
         */
        targetResources?: string[];
    }
    /**
     * Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
     */
    interface Schema$SecurityPolicyRuleMatcher {
        /**
         * The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
         */
        config?: Schema$SecurityPolicyRuleMatcherConfig;
        /**
         * User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
         */
        expr?: Schema$Expr;
        /**
         * Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
         */
        versionedExpr?: string;
    }
    interface Schema$SecurityPolicyRuleMatcherConfig {
        /**
         * CIDR IP address range.  This field may only be specified when versioned_expr is set to FIREWALL.
         */
        destIpRanges?: string[];
        /**
         * Pairs of IP protocols and ports that the rule should match.  This field may only be specified when versioned_expr is set to FIREWALL.
         */
        destPorts?: Schema$SecurityPolicyRuleMatcherConfigDestinationPort[];
        /**
         * CIDR IP address range.
         */
        srcIpRanges?: string[];
    }
    interface Schema$SecurityPolicyRuleMatcherConfigDestinationPort {
        /**
         * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
         */
        ipProtocol?: string;
        /**
         * An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.  Example inputs include: [&quot;22&quot;], [&quot;80&quot;,&quot;443&quot;], and [&quot;12345-12349&quot;].  This field may only be specified when versioned_expr is set to FIREWALL.
         */
        ports?: string[];
    }
    interface Schema$SecurityPolicyRuleRateLimitOptions {
        /**
         * Can only be specifed if the action for the rule is &quot;rate_based_blacklist&quot; If specified, determines the time (in seconds) the traffic will continue to be blocked by the rate limit after the rate falls below the threshold. The default value is 0 seconds.
         */
        blockDuration?: number;
        /**
         * Action to take when requests are under the given threshold. When requests are throttled, this is also the action for all requests which are not dropped. Valid options are &quot;allow&quot;, &quot;fairshare&quot;, and &quot;drop_overload&quot;.
         */
        conformAction?: string;
        /**
         * Determines the key to enforce the threshold_rps limit on. If key is &quot;IP&quot;, each IP has this limit enforced separately, whereas &quot;ALL_IPs&quot; means a single limit is applied to all requests matching this rule.
         */
        enforceOnKey?: string;
        /**
         * When a request is denied, returns the HTTP response code specified. Valid options are &quot;deny()&quot; where valid values for status are 403, 404, 429, and 502.
         */
        exceedAction?: string;
        /**
         * Rate in requests per second at which to begin ratelimiting.
         */
        thresholdRps?: number;
    }
    /**
     * The authentication and authorization settings for a BackendService.
     */
    interface Schema$SecuritySettings {
        /**
         * Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal.
         */
        authenticationPolicy?: Schema$AuthenticationPolicy;
        /**
         * Authorization config defines the Role Based Access Control (RBAC) config.
         */
        authorizationConfig?: Schema$AuthorizationConfig;
        /**
         * TLS Settings for the backend service.
         */
        clientTlsSettings?: Schema$ClientTlsSettings;
    }
    /**
     * An instance&#39;s serial console output.
     */
    interface Schema$SerialPortOutput {
        /**
         * [Output Only] The contents of the console output.
         */
        contents?: string;
        /**
         * [Output Only] Type of the resource. Always compute#serialPortOutput for serial port output.
         */
        kind?: string;
        /**
         * [Output Only] The position of the next byte of content from the serial console output. Use this value in the next request as the start parameter.
         */
        next?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer, older output will be overwritten by newer content and the start values will be mismatched.
         */
        start?: string;
    }
    interface Schema$ServerBinding {
        type?: string;
    }
    /**
     * The TLS settings for the server.
     */
    interface Schema$ServerTlsSettings {
        /**
         * Configures the mechanism to obtain security certificates and identity information.
         */
        proxyTlsContext?: Schema$TlsContext;
        /**
         * A list of alternate names to verify the subject identity in the certificate presented by the client.
         */
        subjectAltNames?: string[];
        /**
         * Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following:   - SIMPLE Secure connections with standard TLS semantics.   - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
         */
        tlsMode?: string;
    }
    /**
     * A service account.
     */
    interface Schema$ServiceAccount {
        /**
         * Email address of the service account.
         */
        email?: string;
        /**
         * The list of scopes to be made available for this service account.
         */
        scopes?: string[];
    }
    /**
     * A set of Shielded Instance options.
     */
    interface Schema$ShieldedInstanceConfig {
        /**
         * Defines whether the instance has integrity monitoring enabled.
         */
        enableIntegrityMonitoring?: boolean;
        /**
         * Defines whether the instance has Secure Boot enabled.
         */
        enableSecureBoot?: boolean;
        /**
         * Defines whether the instance has the vTPM enabled.
         */
        enableVtpm?: boolean;
    }
    /**
     * A shielded Instance identity entry.
     */
    interface Schema$ShieldedInstanceIdentity {
        /**
         * An Endorsement Key (EK) issued to the Shielded Instance&#39;s vTPM.
         */
        encryptionKey?: Schema$ShieldedInstanceIdentityEntry;
        /**
         * [Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry.
         */
        kind?: string;
        /**
         * An Attestation Key (AK) issued to the Shielded Instance&#39;s vTPM.
         */
        signingKey?: Schema$ShieldedInstanceIdentityEntry;
    }
    /**
     * A Shielded Instance Identity Entry.
     */
    interface Schema$ShieldedInstanceIdentityEntry {
        /**
         * A PEM-encoded X.509 certificate. This field can be empty.
         */
        ekCert?: string;
        /**
         * A PEM-encoded public key.
         */
        ekPub?: string;
    }
    /**
     * The policy describes the baseline against which Instance boot integrity is measured.
     */
    interface Schema$ShieldedInstanceIntegrityPolicy {
        /**
         * Updates the integrity policy baseline using the measurements from the VM instance&#39;s most recent boot.
         */
        updateAutoLearnPolicy?: boolean;
    }
    /**
     * A set of Shielded VM options.
     */
    interface Schema$ShieldedVmConfig {
        /**
         * Defines whether the instance has integrity monitoring enabled.
         */
        enableIntegrityMonitoring?: boolean;
        /**
         * Defines whether the instance has Secure Boot enabled.
         */
        enableSecureBoot?: boolean;
        /**
         * Defines whether the instance has the vTPM enabled.
         */
        enableVtpm?: boolean;
    }
    /**
     * A shielded VM identity entry.
     */
    interface Schema$ShieldedVmIdentity {
        /**
         * An Endorsement Key (EK) issued to the Shielded VM&#39;s vTPM.
         */
        encryptionKey?: Schema$ShieldedVmIdentityEntry;
        /**
         * [Output Only] Type of the resource. Always compute#shieldedVmIdentity for shielded VM identity entry.
         */
        kind?: string;
        /**
         * An Attestation Key (AK) issued to the Shielded VM&#39;s vTPM.
         */
        signingKey?: Schema$ShieldedVmIdentityEntry;
    }
    /**
     * A Shielded Instance Identity Entry.
     */
    interface Schema$ShieldedVmIdentityEntry {
        /**
         * A PEM-encoded X.509 certificate. This field can be empty.
         */
        ekCert?: string;
        /**
         * A PEM-encoded public key.
         */
        ekPub?: string;
    }
    /**
     * The policy describes the baseline against which VM instance boot integrity is measured.
     */
    interface Schema$ShieldedVmIntegrityPolicy {
        /**
         * Updates the integrity policy baseline using the measurements from the VM instance&#39;s most recent boot.
         */
        updateAutoLearnPolicy?: boolean;
    }
    /**
     * Represents a customer-supplied Signing Key used by Cloud CDN Signed URLs
     */
    interface Schema$SignedUrlKey {
        /**
         * Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        keyName?: string;
        /**
         * 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string.
         */
        keyValue?: string;
    }
    /**
     * Represents a Persistent Disk Snapshot resource.  You can use snapshots to back up data on a regular interval. For more information, read  Creating persistent disk snapshots. (== resource_for beta.snapshots ==) (== resource_for v1.snapshots ==)
     */
    interface Schema$Snapshot {
        /**
         * [Output Only] Set to true if snapshots are automatically by applying resource policy on the target disk.
         */
        autoCreated?: boolean;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] Size of the snapshot, specified in GB.
         */
        diskSizeGb?: string;
        /**
         * [Output Only] A list of features to enable on the guest operating system. Applicable only for bootable images. Read  Enabling guest operating system features to see a list of available options.
         */
        guestOsFeatures?: Schema$GuestOsFeature[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a snapshot.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
         */
        licenseCodes?: string[];
        /**
         * [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
         */
        licenses?: string[];
        /**
         * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource&#39;s resource id.
         */
        selfLinkWithId?: string;
        /**
         * Encrypts the snapshot using a customer-supplied encryption key.  After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request.  Customer-supplied encryption keys do not protect access to metadata of the snapshot.  If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
         */
        snapshotEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] The source disk used to create this snapshot.
         */
        sourceDisk?: string;
        /**
         * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
         */
        sourceDiskEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
         */
        sourceDiskId?: string;
        /**
         * [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
         */
        status?: string;
        /**
         * [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
         */
        storageBytes?: string;
        /**
         * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
         */
        storageBytesStatus?: string;
        /**
         * GCS bucket storage location of the snapshot (regional or multi-regional).
         */
        storageLocations?: string[];
    }
    /**
     * Contains a list of Snapshot resources.
     */
    interface Schema$SnapshotList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Snapshot resources.
         */
        items?: Schema$Snapshot[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$SourceDiskEncryptionKey {
        /**
         * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
         */
        diskEncryptionKey?: Schema$CustomerEncryptionKey;
        /**
         * URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values:   - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk  - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk
         */
        sourceDisk?: string;
    }
    /**
     * A specification of the parameters to use when creating the instance template from a source instance.
     */
    interface Schema$SourceInstanceParams {
        /**
         * Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
         */
        diskConfigs?: Schema$DiskInstantiationConfig[];
    }
    interface Schema$SourceInstanceProperties {
        /**
         * Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
         */
        canIpForward?: boolean;
        /**
         * Whether the instance created from this machine image should be protected against deletion.
         */
        deletionProtection?: boolean;
        /**
         * An optional text description for the instances that are created from this machine image.
         */
        description?: string;
        /**
         * An array of disks that are associated with the instances that are created from this machine image.
         */
        disks?: Schema$SavedAttachedDisk[];
        /**
         * A list of guest accelerator cards&#39; type and count to use for instances created from this machine image.
         */
        guestAccelerators?: Schema$AcceleratorConfig[];
        /**
         * Labels to apply to instances that are created from this machine image.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * The machine type to use for instances that are created from this machine image.
         */
        machineType?: string;
        /**
         * The metadata key/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
         */
        metadata?: Schema$Metadata;
        /**
         * Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: &quot;Intel Haswell&quot; or minCpuPlatform: &quot;Intel Sandy Bridge&quot;. For more information, read Specifying a Minimum CPU Platform.
         */
        minCpuPlatform?: string;
        /**
         * An array of network access configurations for this interface.
         */
        networkInterfaces?: Schema$NetworkInterface[];
        /**
         * Specifies the scheduling options for the instances that are created from this machine image.
         */
        scheduling?: Schema$Scheduling;
        /**
         * A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances.
         */
        serviceAccounts?: Schema$ServiceAccount[];
        /**
         * A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
         */
        tags?: Schema$Tags;
    }
    /**
     * Represents an SSL Certificate resource.  This SSL certificate resource also contains a private key. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read  Creating and Using SSL Certificates. (== resource_for beta.sslCertificates ==) (== resource_for v1.sslCertificates ==)
     */
    interface Schema$SslCertificate {
        /**
         * A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
         */
        certificate?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] Expire time of the certificate. RFC3339
         */
        expireTime?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
         */
        kind?: string;
        /**
         * Configuration and status of a managed SSL certificate.
         */
        managed?: Schema$SslCertificateManagedSslCertificate;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * A write-only private key in PEM format. Only insert requests will include this field.
         */
        privateKey?: string;
        /**
         * [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
         */
        region?: string;
        /**
         * [Output only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * Configuration and status of a self-managed SSL certificate.
         */
        selfManaged?: Schema$SslCertificateSelfManagedSslCertificate;
        /**
         * [Output Only] Domains associated with the certificate via Subject Alternative Name.
         */
        subjectAlternativeNames?: string[];
        /**
         * (Optional) Specifies the type of SSL certificate, either &quot;SELF_MANAGED&quot; or &quot;MANAGED&quot;. If not specified, the certificate is self-managed and the fields certificate and private_key are used.
         */
        type?: string;
    }
    interface Schema$SslCertificateAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of SslCertificatesScopedList resources.
         */
        items?: {
            [key: string]: Schema$SslCertificatesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of SslCertificate resources.
     */
    interface Schema$SslCertificateList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of SslCertificate resources.
         */
        items?: Schema$SslCertificate[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Configuration and status of a managed SSL certificate.
     */
    interface Schema$SslCertificateManagedSslCertificate {
        /**
         * The domains for which a managed SSL certificate will be generated. Currently only single-domain certs are supported.
         */
        domains?: string[];
        /**
         * [Output only] Detailed statuses of the domains specified for managed certificate resource.
         */
        domainStatus?: {
            [key: string]: string;
        };
        /**
         * [Output only] Status of the managed certificate resource.
         */
        status?: string;
    }
    /**
     * Configuration and status of a self-managed SSL certificate.
     */
    interface Schema$SslCertificateSelfManagedSslCertificate {
        /**
         * A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
         */
        certificate?: string;
        /**
         * A write-only private key in PEM format. Only insert requests will include this field.
         */
        privateKey?: string;
    }
    interface Schema$SslCertificatesScopedList {
        /**
         * List of SslCertificates contained in this scope.
         */
        sslCertificates?: Schema$SslCertificate[];
        /**
         * Informational warning which replaces the list of backend services when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$SSLHealthCheck {
        /**
         * The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
         */
        port?: number;
        /**
         * Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
         */
        portName?: string;
        /**
         * Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.   If not specified, SSL health check follows behavior specified in port and portName fields.
         */
        portSpecification?: string;
        /**
         * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
         */
        proxyHeader?: string;
        /**
         * The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
         */
        request?: string;
        /**
         * The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
         */
        response?: string;
    }
    interface Schema$SslPoliciesList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of SslPolicy resources.
         */
        items?: Schema$SslPolicy[];
        /**
         * [Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$SslPoliciesListAvailableFeaturesResponse {
        features?: string[];
    }
    /**
     * Represents a Cloud Armor Security Policy resource.  Only external backend services used by HTTP or HTTPS load balancers can reference a Security Policy. For more information, read read  Cloud Armor Security Policy Concepts. (== resource_for beta.sslPolicies ==) (== resource_for v1.sslPolicies ==)
     */
    interface Schema$SslPolicy {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * A list of features enabled when the selected profile is CUSTOM. The - method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM.
         */
        customFeatures?: string[];
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The list of features enabled in the SSL policy.
         */
        enabledFeatures?: string[];
        /**
         * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an SslPolicy.
         */
        fingerprint?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies.
         */
        kind?: string;
        /**
         * The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
         */
        minTlsVersion?: string;
        /**
         * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
         */
        profile?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * Security settings for the proxy. This field is only applicable to a global backend service with the loadBalancingScheme set to INTERNAL_SELF_MANAGED.
         */
        tlsSettings?: Schema$ServerTlsSettings;
        /**
         * [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages.
         */
        warnings?: Array<{
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        }>;
    }
    interface Schema$SslPolicyReference {
        /**
         * URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource.
         */
        sslPolicy?: string;
    }
    interface Schema$StatefulPolicy {
        preservedState?: Schema$StatefulPolicyPreservedState;
    }
    /**
     * Configuration of preserved resources.
     */
    interface Schema$StatefulPolicyPreservedState {
        /**
         * Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
         */
        disks?: {
            [key: string]: Schema$StatefulPolicyPreservedStateDiskDevice;
        };
    }
    interface Schema$StatefulPolicyPreservedStateDiskDevice {
        /**
         * These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
         */
        autoDelete?: string;
    }
    /**
     * Represents a Subnetwork resource.  A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read  Virtual Private Cloud (VPC) Network. (== resource_for beta.subnetworks ==) (== resource_for v1.subnetworks ==)
     */
    interface Schema$Subnetwork {
        /**
         * Can only be specified if VPC flow logging for this subnetwork is enabled. Sets the aggregation interval for collecting flow logs. Increasing the interval time reduces the amount of generated flow logs for long-lasting connections. Default is an interval of 5 seconds per connection. Valid values: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN.
         */
        aggregationInterval?: string;
        /**
         * Whether this subnetwork can conflict with static routes. Setting this to true allows this subnetwork&#39;s primary and secondary ranges to conflict with routes that have already been configured on the corresponding network. Static routes will take precedence over the subnetwork route if the route prefix length is at least as large as the subnetwork prefix length.  Also, packets destined to IPs within subnetwork may contain private/sensitive data and are prevented from leaving the virtual network. Setting this field to true will disable this feature.  The default value is false and applies to all existing subnetworks and automatically created subnetworks.  This field cannot be set to true at resource creation time.
         */
        allowSubnetCidrRoutesOverlap?: boolean;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
         */
        description?: string;
        /**
         * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
         */
        enableFlowLogs?: boolean;
        /**
         * Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch.
         */
        enablePrivateV6Access?: boolean;
        /**
         * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
         */
        fingerprint?: string;
        /**
         * Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
         */
        flowSampling?: number;
        /**
         * [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork.
         */
        gatewayAddress?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field can be set only at resource creation time.
         */
        ipCidrRange?: string;
        /**
         * [Output Only] The range of internal IPv6 addresses that are owned by this subnetwork.
         */
        ipv6CidrRange?: string;
        /**
         * [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources.
         */
        kind?: string;
        /**
         * This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Stackdriver.
         */
        logConfig?: Schema$SubnetworkLogConfig;
        /**
         * Can only be specified if VPC flow logging for this subnetwork is enabled. Configures whether metadata fields should be added to the reported VPC flow logs. Default is INCLUDE_ALL_METADATA.
         */
        metadata?: string;
        /**
         * The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. Only networks that are in the distributed mode can have subnetworks. This field can be set only at resource creation time.
         */
        network?: string;
        /**
         * Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
         */
        privateIpGoogleAccess?: boolean;
        /**
         * The private IPv6 google access type for the VMs in this subnet. This is an expanded field of enablePrivateV6Access. If both fields are set, privateIpv6GoogleAccess will take priority.  This field can be both set at resource creation time and updated using patch.
         */
        privateIpv6GoogleAccess?: string;
        /**
         * The service accounts can be used to selectively turn on Private IPv6 Google Access only on the VMs primary service account matching the value. This value only takes effect when PrivateIpv6GoogleAccess is ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE_FOR_SERVICE_ACCOUNTS or ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE_FOR_SERVICE_ACCOUNTS.
         */
        privateIpv6GoogleAccessServiceAccounts?: string[];
        /**
         * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918.
         */
        purpose?: string;
        /**
         * The type of IP CIDR range to associate with this subnetwork. The default is RFC_1918. When creating a subnetwork in non-RFC 1918 range, this field must be set to NON_RFC_1918.
         */
        rangeType?: string;
        /**
         * URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
         */
        region?: string;
        /**
         * The role of subnetwork. Currenly, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
         */
        role?: string;
        /**
         * An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
         */
        secondaryIpRanges?: Schema$SubnetworkSecondaryRange[];
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] The state of the subnetwork, which can be one of READY or DRAINING. A subnetwork that is READY is ready to be used. The state of DRAINING is only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY.
         */
        state?: string;
    }
    interface Schema$SubnetworkAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of SubnetworksScopedList resources.
         */
        items?: {
            [key: string]: Schema$SubnetworksScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of Subnetwork resources.
     */
    interface Schema$SubnetworkList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Subnetwork resources.
         */
        items?: Schema$Subnetwork[];
        /**
         * [Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * The available logging options for this subnetwork.
     */
    interface Schema$SubnetworkLogConfig {
        /**
         * Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
         */
        aggregationInterval?: string;
        /**
         * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
         */
        enable?: boolean;
        /**
         * Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
         */
        flowSampling?: number;
        /**
         * Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is INCLUDE_ALL_METADATA.
         */
        metadata?: string;
    }
    /**
     * Represents a secondary IP range of a subnetwork.
     */
    interface Schema$SubnetworkSecondaryRange {
        /**
         * The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported.
         */
        ipCidrRange?: string;
        /**
         * The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
         */
        rangeName?: string;
        /**
         * The type of IP CIDR range to associate with this subnetwork secondary range. The default is RFC_1918. When creating a subnetwork in non-RFC 1918 range, this field must be set to NON_RFC_1918.
         */
        rangeType?: string;
    }
    interface Schema$SubnetworksExpandIpCidrRangeRequest {
        /**
         * The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update.
         */
        ipCidrRange?: string;
        /**
         * The type of IP CIDR range to associate with this subnetwork. The default is RFC_1918. When expanding to a non-RFC 1918 range, this field must be be set to NON_RFC_1918.
         */
        rangeType?: string;
    }
    interface Schema$SubnetworksScopedList {
        /**
         * A list of subnetworks contained in this scope.
         */
        subnetworks?: Schema$Subnetwork[];
        /**
         * An informational warning that appears when the list of addresses is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$SubnetworksSetPrivateIpGoogleAccessRequest {
        privateIpGoogleAccess?: boolean;
    }
    /**
     * A set of instance tags.
     */
    interface Schema$Tags {
        /**
         * Specifies a fingerprint for this request, which is essentially a hash of the tags&#39; contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags.  To see the latest fingerprint, make get() request to the instance.
         */
        fingerprint?: string;
        /**
         * An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
         */
        items?: string[];
    }
    interface Schema$TargetHttpProxiesScopedList {
        /**
         * A list of TargetHttpProxies contained in this scope.
         */
        targetHttpProxies?: Schema$TargetHttpProxy[];
        /**
         * Informational warning which replaces the list of backend services when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Target HTTP Proxy resource.  A target HTTP proxy is a component of certain types of load balancers. Global forwarding rules reference a target HTTP proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies. (== resource_for beta.targetHttpProxies ==) (== resource_for v1.targetHttpProxies ==)
     */
    interface Schema$TargetHttpProxy {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * This field only applies when the loadBalancingScheme is INTERNAL_SELF_MANAGED. When set to true the Envoy binds on the IP address specified by the forwarding rule. Default is false.
         */
        proxyBind?: boolean;
        /**
         * [Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * URL to the UrlMap resource that defines the mapping from URL to the BackendService.
         */
        urlMap?: string;
    }
    interface Schema$TargetHttpProxyAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetHttpProxiesScopedList resources.
         */
        items?: {
            [key: string]: Schema$TargetHttpProxiesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * A list of TargetHttpProxy resources.
     */
    interface Schema$TargetHttpProxyList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetHttpProxy resources.
         */
        items?: Schema$TargetHttpProxy[];
        /**
         * Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetHttpsProxiesScopedList {
        /**
         * A list of TargetHttpsProxies contained in this scope.
         */
        targetHttpsProxies?: Schema$TargetHttpsProxy[];
        /**
         * Informational warning which replaces the list of backend services when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetHttpsProxiesSetQuicOverrideRequest {
        /**
         * QUIC policy for the TargetHttpsProxy resource.
         */
        quicOverride?: string;
    }
    interface Schema$TargetHttpsProxiesSetSslCertificatesRequest {
        /**
         * New set of SslCertificate resources to associate with this TargetHttpsProxy resource. Currently exactly one SslCertificate resource must be specified.
         */
        sslCertificates?: string[];
    }
    /**
     * Represents a Target HTTPS Proxy resource.  A target HTTPS proxy is a component of certain types of load balancers. Global forwarding rules reference a target HTTPS proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies. (== resource_for beta.targetHttpsProxies ==) (== resource_for v1.targetHttpsProxies ==)
     */
    interface Schema$TargetHttpsProxy {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * This field only applies when the loadBalancingScheme is INTERNAL_SELF_MANAGED. When set to true the Envoy binds on the IP address specified by the forwarding rule. Default is false.
         */
        proxyBind?: boolean;
        /**
         * Specifies the QUIC override policy for this TargetHttpsProxy resource. This determines whether the load balancer will attempt to negotiate QUIC with clients or not. Can specify one of NONE, ENABLE, or DISABLE. Specify ENABLE to always enable QUIC, Enables QUIC when set to ENABLE, and disables QUIC when set to DISABLE. If NONE is specified, uses the QUIC policy with no user overrides, which is equivalent to DISABLE. Not specifying this field is equivalent to specifying NONE.
         */
        quicOverride?: string;
        /**
         * [Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
         */
        sslCertificates?: string[];
        /**
         * URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource will not have any SSL policy configured.
         */
        sslPolicy?: string;
        /**
         * A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map:   - https://www.googleapis.compute/v1/projects/project/global/urlMaps/url-map  - projects/project/global/urlMaps/url-map  - global/urlMaps/url-map
         */
        urlMap?: string;
    }
    interface Schema$TargetHttpsProxyAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetHttpsProxiesScopedList resources.
         */
        items?: {
            [key: string]: Schema$TargetHttpsProxiesScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of TargetHttpsProxy resources.
     */
    interface Schema$TargetHttpsProxyList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetHttpsProxy resources.
         */
        items?: Schema$TargetHttpsProxy[];
        /**
         * Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Target Instance resource.  You can use a target instance to handle traffic for one or more forwarding rules, which is ideal for forwarding protocol traffic that is managed by a single source. For example, ESP, AH, TCP, or UDP. For more information, read Target instances. (== resource_for beta.targetInstances ==) (== resource_for v1.targetInstances ==)
     */
    interface Schema$TargetInstance {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs:  - https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance  - projects/project/zones/zone/instances/instance  - zones/zone/instances/instance
         */
        instance?: string;
        /**
         * [Output Only] The type of the resource. Always compute#targetInstance for target instances.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * NAT option controlling how IPs are NAT&#39;ed to the instance. Currently only NO_NAT (default value) is supported.
         */
        natPolicy?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * [Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        zone?: string;
    }
    interface Schema$TargetInstanceAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetInstance resources.
         */
        items?: {
            [key: string]: Schema$TargetInstancesScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of TargetInstance resources.
     */
    interface Schema$TargetInstanceList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetInstance resources.
         */
        items?: Schema$TargetInstance[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetInstancesScopedList {
        /**
         * A list of target instances contained in this scope.
         */
        targetInstances?: Schema$TargetInstance[];
        /**
         * Informational warning which replaces the list of addresses when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Target Pool resource.  Target pools are used for network TCP/UDP load balancing. A target pool references member instances, an associated legacy HttpHealthCheck resource, and, optionally, a backup target pool. For more information, read Using target pools. (== resource_for beta.targetPools ==) (== resource_for v1.targetPools ==)
     */
    interface Schema$TargetPool {
        /**
         * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1].  backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool.  In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the &quot;force&quot; mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
         */
        backupPool?: string;
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1].  If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool.  In case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the &quot;force&quot; mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
         */
        failoverRatio?: number;
        /**
         * The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. An empty list means all member instances will be considered healthy at all times. Only HttpHealthChecks are supported. Only one health check may be specified.
         */
        healthChecks?: string[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool.
         */
        instances?: string[];
        /**
         * [Output Only] Type of the resource. Always compute#targetPool for target pools.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * [Output Only] URL of the region where the target pool resides.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Server-defined URL for this resource with the resource id.
         */
        selfLinkWithId?: string;
        /**
         * Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
         */
        sessionAffinity?: string;
    }
    interface Schema$TargetPoolAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetPool resources.
         */
        items?: {
            [key: string]: Schema$TargetPoolsScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetPoolInstanceHealth {
        healthStatus?: Schema$HealthStatus[];
        /**
         * [Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance.
         */
        kind?: string;
    }
    /**
     * Contains a list of TargetPool resources.
     */
    interface Schema$TargetPoolList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetPool resources.
         */
        items?: Schema$TargetPool[];
        /**
         * [Output Only] Type of resource. Always compute#targetPoolList for lists of target pools.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetPoolsAddHealthCheckRequest {
        /**
         * The HttpHealthCheck to add to the target pool.
         */
        healthChecks?: Schema$HealthCheckReference[];
    }
    interface Schema$TargetPoolsAddInstanceRequest {
        /**
         * A full or partial URL to an instance to add to this target pool. This can be a full or partial URL. For example, the following are valid URLs:   - https://www.googleapis.com/compute/v1/projects/project-id/zones/zone/instances/instance-name  - projects/project-id/zones/zone/instances/instance-name  - zones/zone/instances/instance-name
         */
        instances?: Schema$InstanceReference[];
    }
    interface Schema$TargetPoolsRemoveHealthCheckRequest {
        /**
         * Health check URL to be removed. This can be a full or valid partial URL. For example, the following are valid URLs:   - https://www.googleapis.com/compute/beta/projects/project/global/httpHealthChecks/health-check  - projects/project/global/httpHealthChecks/health-check  - global/httpHealthChecks/health-check
         */
        healthChecks?: Schema$HealthCheckReference[];
    }
    interface Schema$TargetPoolsRemoveInstanceRequest {
        /**
         * URLs of the instances to be removed from target pool.
         */
        instances?: Schema$InstanceReference[];
    }
    interface Schema$TargetPoolsScopedList {
        /**
         * A list of target pools contained in this scope.
         */
        targetPools?: Schema$TargetPool[];
        /**
         * Informational warning which replaces the list of addresses when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetReference {
        target?: string;
    }
    interface Schema$TargetSslProxiesSetBackendServiceRequest {
        /**
         * The URL of the new BackendService resource for the targetSslProxy.
         */
        service?: string;
    }
    interface Schema$TargetSslProxiesSetProxyHeaderRequest {
        /**
         * The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
         */
        proxyHeader?: string;
    }
    interface Schema$TargetSslProxiesSetSslCertificatesRequest {
        /**
         * New set of URLs to SslCertificate resources to associate with this TargetSslProxy. Currently exactly one ssl certificate must be specified.
         */
        sslCertificates?: string[];
    }
    /**
     * Represents a Target SSL Proxy resource.  A target SSL proxy is a component of a SSL Proxy load balancer. Global forwarding rules reference a target SSL proxy, and the target proxy then references an external backend service. For more information, read Using Target Proxies. (== resource_for beta.targetSslProxies ==) (== resource_for v1.targetSslProxies ==)
     */
    interface Schema$TargetSslProxy {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
         */
        proxyHeader?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * URL to the BackendService resource.
         */
        service?: string;
        /**
         * URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
         */
        sslCertificates?: string[];
        /**
         * URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured.
         */
        sslPolicy?: string;
    }
    /**
     * Contains a list of TargetSslProxy resources.
     */
    interface Schema$TargetSslProxyList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetSslProxy resources.
         */
        items?: Schema$TargetSslProxy[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetTcpProxiesSetBackendServiceRequest {
        /**
         * The URL of the new BackendService resource for the targetTcpProxy.
         */
        service?: string;
    }
    interface Schema$TargetTcpProxiesSetProxyHeaderRequest {
        /**
         * The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
         */
        proxyHeader?: string;
    }
    /**
     * Represents a Target TCP Proxy resource.  A target TCP proxy is a component of a TCP Proxy load balancer. Global forwarding rules reference ta target TCP proxy, and the target proxy then references an external backend service. For more information, read TCP Proxy Load Balancing Concepts. (== resource_for beta.targetTcpProxies ==) (== resource_for v1.targetTcpProxies ==)
     */
    interface Schema$TargetTcpProxy {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
         */
        proxyHeader?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * URL to the BackendService resource.
         */
        service?: string;
    }
    /**
     * Contains a list of TargetTcpProxy resources.
     */
    interface Schema$TargetTcpProxyList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetTcpProxy resources.
         */
        items?: Schema$TargetTcpProxy[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a Target VPN Gateway resource.  The target VPN gateway resource represents a Classic Cloud VPN gateway. For more information, read the the Cloud VPN Overview. (== resource_for beta.targetVpnGateways ==) (== resource_for v1.targetVpnGateways ==)
     */
    interface Schema$TargetVpnGateway {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway.
         */
        forwardingRules?: string[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this TargetVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a TargetVpnGateway.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this TargetVpnGateway resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created.
         */
        network?: string;
        /**
         * [Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING.
         */
        status?: string;
        /**
         * [Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway.
         */
        tunnels?: string[];
    }
    interface Schema$TargetVpnGatewayAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetVpnGateway resources.
         */
        items?: {
            [key: string]: Schema$TargetVpnGatewaysScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of TargetVpnGateway resources.
     */
    interface Schema$TargetVpnGatewayList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of TargetVpnGateway resources.
         */
        items?: Schema$TargetVpnGateway[];
        /**
         * [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TargetVpnGatewaysScopedList {
        /**
         * [Output Only] A list of target VPN gateways contained in this scope.
         */
        targetVpnGateways?: Schema$TargetVpnGateway[];
        /**
         * [Output Only] Informational warning which replaces the list of addresses when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$TCPHealthCheck {
        /**
         * The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
         */
        port?: number;
        /**
         * Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
         */
        portName?: string;
        /**
         * Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.   If not specified, TCP health check follows behavior specified in port and portName fields.
         */
        portSpecification?: string;
        /**
         * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
         */
        proxyHeader?: string;
        /**
         * The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
         */
        request?: string;
        /**
         * The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
         */
        response?: string;
    }
    interface Schema$TestFailure {
        actualService?: string;
        expectedService?: string;
        host?: string;
        path?: string;
    }
    interface Schema$TestPermissionsRequest {
        /**
         * The set of permissions to check for the &#39;resource&#39;. Permissions with wildcards (such as &#39;*&#39; or &#39;storage.*&#39;) are not allowed.
         */
        permissions?: string[];
    }
    interface Schema$TestPermissionsResponse {
        /**
         * A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
         */
        permissions?: string[];
    }
    /**
     * Defines the mechanism to obtain the client or server certificate.
     */
    interface Schema$TlsCertificateContext {
        /**
         * Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
         */
        certificatePaths?: Schema$TlsCertificatePaths;
        /**
         * Defines how TLS certificates are obtained.
         */
        certificateSource?: string;
        /**
         * Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
         */
        sdsConfig?: Schema$SdsConfig;
    }
    /**
     * The paths to the mounted TLS Certificates and private key.
     */
    interface Schema$TlsCertificatePaths {
        /**
         * The path to the file holding the client or server TLS certificate to use.
         */
        certificatePath?: string;
        /**
         * The path to the file holding the client or server private key.
         */
        privateKeyPath?: string;
    }
    /**
     * The TLS settings for the client or server.
     */
    interface Schema$TlsContext {
        /**
         * Defines the mechanism to obtain the client or server certificate.
         */
        certificateContext?: Schema$TlsCertificateContext;
        /**
         * Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
         */
        validationContext?: Schema$TlsValidationContext;
    }
    /**
     * Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate.
     */
    interface Schema$TlsValidationContext {
        /**
         * The path to the file holding the CA certificate to validate the client or server certificate.
         */
        certificatePath?: string;
        /**
         * Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
         */
        sdsConfig?: Schema$SdsConfig;
        /**
         * Defines how TLS certificates are obtained.
         */
        validationSource?: string;
    }
    interface Schema$UDPHealthCheck {
        /**
         * The UDP port number for the health check request. Valid values are 1 through 65535.
         */
        port?: number;
        /**
         * Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
         */
        portName?: string;
        /**
         * Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.
         */
        request?: string;
        /**
         * The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.
         */
        response?: string;
    }
    /**
     * Represents a URL Map resource.  A URL map resource is a component of certain types of load balancers. This resource defines mappings from host names and URL paths to either a backend service or a backend bucket.  To use this resource, the backend service must have a loadBalancingScheme of either EXTERNAL, INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED For more information, read URL Map Concepts.
     */
    interface Schema$UrlMap {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * defaultRouteAction takes effect when none of the  hostRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any  weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set.
         */
        defaultRouteAction?: Schema$HttpRouteAction;
        /**
         * The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect  or defaultRouteAction.weightedBackendService must be set.
         */
        defaultService?: string;
        /**
         * When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.
         */
        defaultUrlRedirect?: Schema$HttpRedirectAction;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a UrlMap.
         */
        fingerprint?: string;
        /**
         * Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here take effect after headerAction specified under pathMatcher.
         */
        headerAction?: Schema$HttpHeaderAction;
        /**
         * The list of HostRules to use against the URL.
         */
        hostRules?: Schema$HostRule[];
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#urlMaps for url maps.
         */
        kind?: string;
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * The list of named PathMatchers to use against the URL.
         */
        pathMatchers?: Schema$PathMatcher[];
        /**
         * [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test cases pass. You can specify a maximum of 100 tests per UrlMap.
         */
        tests?: Schema$UrlMapTest[];
    }
    /**
     * Contains a list of UrlMap resources.
     */
    interface Schema$UrlMapList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of UrlMap resources.
         */
        items?: Schema$UrlMap[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$UrlMapReference {
        urlMap?: string;
    }
    interface Schema$UrlMapsAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of UrlMapsScopedList resources.
         */
        items?: {
            [key: string]: Schema$UrlMapsScopedList;
        };
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$UrlMapsScopedList {
        /**
         * A list of UrlMaps contained in this scope.
         */
        urlMaps?: Schema$UrlMap[];
        /**
         * Informational warning which replaces the list of backend services when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$UrlMapsValidateRequest {
        /**
         * Content of the UrlMap to be validated.
         */
        resource?: Schema$UrlMap;
    }
    interface Schema$UrlMapsValidateResponse {
        result?: Schema$UrlMapValidationResult;
    }
    /**
     * Message for the expected URL mappings.
     */
    interface Schema$UrlMapTest {
        /**
         * The weight to use for the supplied host and path when using advanced routing rules that involve traffic splitting.
         */
        backendServiceWeight?: number;
        /**
         * Description of this test case.
         */
        description?: string;
        /**
         * The expected URL that should be redirected to for the host and path being tested.
         */
        expectedUrlRedirect?: string;
        /**
         * Host portion of the URL.
         */
        host?: string;
        /**
         * Path portion of the URL.
         */
        path?: string;
        /**
         * Expected BackendService resource the given URL should be mapped to.
         */
        service?: string;
    }
    /**
     * Message representing the validation result for a UrlMap.
     */
    interface Schema$UrlMapValidationResult {
        loadErrors?: string[];
        /**
         * Whether the given UrlMap can be successfully loaded. If false, &#39;loadErrors&#39; indicates the reasons.
         */
        loadSucceeded?: boolean;
        testFailures?: Schema$TestFailure[];
        /**
         * If successfully loaded, this field indicates whether the test passed. If false, &#39;testFailures&#39;s indicate the reason of failure.
         */
        testPassed?: boolean;
    }
    /**
     * The spec for modifying the path before sending the request to the matched backend service.
     */
    interface Schema$UrlRewrite {
        /**
         * Prior to forwarding the request to the selected service, the request&#39;s host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
         */
        hostRewrite?: string;
        /**
         * Prior to forwarding the request to the selected backend service, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
         */
        pathPrefixRewrite?: string;
    }
    /**
     * Subnetwork which the current user has compute.subnetworks.use permission on.
     */
    interface Schema$UsableSubnetwork {
        /**
         * The range of internal addresses that are owned by this subnetwork.
         */
        ipCidrRange?: string;
        /**
         * Network URL.
         */
        network?: string;
        /**
         * Secondary IP ranges.
         */
        secondaryIpRanges?: Schema$UsableSubnetworkSecondaryRange[];
        /**
         * Subnetwork URL.
         */
        subnetwork?: string;
    }
    interface Schema$UsableSubnetworksAggregatedList {
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output] A list of usable subnetwork URLs.
         */
        items?: Schema$UsableSubnetwork[];
        /**
         * [Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Secondary IP range of a usable subnetwork.
     */
    interface Schema$UsableSubnetworkSecondaryRange {
        /**
         * The range of IP addresses belonging to this subnetwork secondary range.
         */
        ipCidrRange?: string;
        /**
         * The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
         */
        rangeName?: string;
    }
    /**
     * The location in Cloud Storage and naming method of the daily usage report. Contains bucket_name and report_name prefix.
     */
    interface Schema$UsageExportLocation {
        /**
         * The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket.
         */
        bucketName?: string;
        /**
         * An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage. The report is stored as a CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions.
         */
        reportNamePrefix?: string;
    }
    /**
     * Contain information of Nat mapping for a VM endpoint (i.e., NIC).
     */
    interface Schema$VmEndpointNatMappings {
        /**
         * Name of the VM instance which the endpoint belongs to
         */
        instanceName?: string;
        interfaceNatMappings?: Schema$VmEndpointNatMappingsInterfaceNatMappings[];
    }
    /**
     * Contain information of Nat mapping for an interface of this endpoint.
     */
    interface Schema$VmEndpointNatMappingsInterfaceNatMappings {
        /**
         * List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [&quot;2.2.2.2:12345-12355&quot;, &quot;1.1.1.1:2234-2234&quot;].
         */
        drainNatIpPortRanges?: string[];
        /**
         * A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [&quot;2.2.2.2:12345-12355&quot;, &quot;1.1.1.1:2234-2234&quot;].
         */
        natIpPortRanges?: string[];
        /**
         * Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges.
         */
        numTotalDrainNatPorts?: number;
        /**
         * Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges.
         */
        numTotalNatPorts?: number;
        /**
         * Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: &quot;10.33.4.55/32&quot;, or &quot;192.168.5.0/24&quot;.
         */
        sourceAliasIpRange?: string;
        /**
         * Primary IP of the VM for this NIC.
         */
        sourceVirtualIp?: string;
    }
    /**
     * Contains a list of VmEndpointNatMappings.
     */
    interface Schema$VmEndpointNatMappingsList {
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] A list of Nat mapping information of VM endpoints.
         */
        result?: Schema$VmEndpointNatMappings[];
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Represents a VPN gateway resource.
     */
    interface Schema$VpnGateway {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve an VpnGateway.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this VpnGateway resource. These can be later modified by the setLabels method. Each label key/value must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created.
         */
        network?: string;
        /**
         * [Output Only] URL of the region where the VPN gateway resides.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] A list of interfaces on this VPN gateway.
         */
        vpnInterfaces?: Schema$VpnGatewayVpnGatewayInterface[];
    }
    interface Schema$VpnGatewayAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of VpnGateway resources.
         */
        items?: {
            [key: string]: Schema$VpnGatewaysScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of VpnGateway resources.
     */
    interface Schema$VpnGatewayList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of VpnGateway resources.
         */
        items?: Schema$VpnGateway[];
        /**
         * [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$VpnGatewaysGetStatusResponse {
        result?: Schema$VpnGatewayStatus;
    }
    interface Schema$VpnGatewaysScopedList {
        /**
         * [Output Only] A list of VPN gateways contained in this scope.
         */
        vpnGateways?: Schema$VpnGateway[];
        /**
         * [Output Only] Informational warning which replaces the list of addresses when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$VpnGatewayStatus {
        /**
         * List of VPN connection for this VpnGateway.
         */
        vpnConnections?: Schema$VpnGatewayStatusVpnConnection[];
    }
    /**
     * Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway.
     */
    interface Schema$VpnGatewayStatusHighAvailabilityRequirementState {
        /**
         * Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET.
         */
        state?: string;
        /**
         * Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE.
         */
        unsatisfiedReason?: string;
    }
    /**
     * Contains some information about a VPN tunnel.
     */
    interface Schema$VpnGatewayStatusTunnel {
        /**
         * The VPN gateway interface this VPN tunnel is associated with.
         */
        localGatewayInterface?: number;
        /**
         * The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or GCP VPN gateway.
         */
        peerGatewayInterface?: number;
        /**
         * URL reference to the VPN tunnel.
         */
        tunnelUrl?: string;
    }
    /**
     * A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be a external VPN gateway or GCP VPN gateway.
     */
    interface Schema$VpnGatewayStatusVpnConnection {
        /**
         * URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway.
         */
        peerExternalGateway?: string;
        /**
         * URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway.
         */
        peerGcpGateway?: string;
        /**
         * HighAvailabilityRequirementState for the VPN connection.
         */
        state?: Schema$VpnGatewayStatusHighAvailabilityRequirementState;
        /**
         * List of VPN tunnels that are in this VPN connection.
         */
        tunnels?: Schema$VpnGatewayStatusTunnel[];
    }
    /**
     * A VPN gateway interface.
     */
    interface Schema$VpnGatewayVpnGatewayInterface {
        /**
         * The numeric ID of this VPN gateway interface.
         */
        id?: number;
        /**
         * The external IP address for this VPN gateway interface.
         */
        ipAddress?: string;
    }
    /**
     * Represents a Cloud VPN Tunnel resource.  For more information about VPN, read the the Cloud VPN Overview. (== resource_for beta.vpnTunnels ==) (== resource_for v1.vpnTunnels ==)
     */
    interface Schema$VpnTunnel {
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * An optional description of this resource. Provide this property when you create the resource.
         */
        description?: string;
        /**
         * [Output Only] Detailed status message for the VPN tunnel.
         */
        detailedStatus?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2.
         */
        ikeVersion?: number;
        /**
         * [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
         */
        kind?: string;
        /**
         * A fingerprint for the labels being applied to this VpnTunnel, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.  To see the latest fingerprint, make a get() request to retrieve a VpnTunnel.
         */
        labelFingerprint?: string;
        /**
         * Labels to apply to this VpnTunnel. These can be later modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
         */
        labels?: {
            [key: string]: string;
        };
        /**
         * Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is supported.
         */
        localTrafficSelector?: string[];
        /**
         * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         */
        name?: string;
        /**
         * URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway.
         */
        peerExternalGateway?: string;
        /**
         * The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created.
         */
        peerExternalGatewayInterface?: number;
        /**
         * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer GCP VPN gateway.
         */
        peerGcpGateway?: string;
        /**
         * IP address of the peer VPN gateway. Only IPv4 is supported.
         */
        peerIp?: string;
        /**
         * [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
         */
        region?: string;
        /**
         * Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported.
         */
        remoteTrafficSelector?: string[];
        /**
         * URL of the router resource to be used for dynamic routing.
         */
        router?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
         */
        sharedSecret?: string;
        /**
         * Hash of the shared secret.
         */
        sharedSecretHash?: string;
        /**
         * [Output Only] The status of the VPN tunnel, which can be one of the following:  - PROVISIONING: Resource is being allocated for the VPN tunnel.  - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel.  - FIRST_HANDSHAKE: Successful first handshake with the peer VPN.  - ESTABLISHED: Secure session is successfully established with the peer VPN.  - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS  - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret).  - NEGOTIATION_FAILURE: Handshake failed.  - DEPROVISIONING: Resources are being deallocated for the VPN tunnel.  - FAILED: Tunnel creation has failed and the tunnel is not ready to be used.
         */
        status?: string;
        /**
         * URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created.
         */
        targetVpnGateway?: string;
        /**
         * URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created.
         */
        vpnGateway?: string;
        /**
         * The interface ID of the VPN gateway with which this VPN tunnel is associated.
         */
        vpnGatewayInterface?: number;
    }
    interface Schema$VpnTunnelAggregatedList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of VpnTunnelsScopedList resources.
         */
        items?: {
            [key: string]: Schema$VpnTunnelsScopedList;
        };
        /**
         * [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Contains a list of VpnTunnel resources.
     */
    interface Schema$VpnTunnelList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of VpnTunnel resources.
         */
        items?: Schema$VpnTunnel[];
        /**
         * [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$VpnTunnelsScopedList {
        /**
         * A list of VPN tunnels contained in this scope.
         */
        vpnTunnels?: Schema$VpnTunnel[];
        /**
         * Informational warning which replaces the list of addresses when the list is empty.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$WafExpressionSet {
        /**
         * A list of alternate IDs. The format should be: - E.g. XSS-stable Generic suffix like &quot;stable&quot; is particularly useful if a policy likes to avail newer set of expressions without having to change the policy. A given alias name can&#39;t be used for more than one entity set.
         */
        aliases?: string[];
        /**
         * List of available expressions.
         */
        expressions?: Schema$WafExpressionSetExpression[];
        /**
         * Google specified expression set ID. The format should be: - E.g. XSS-20170329
         */
        id?: string;
    }
    interface Schema$WafExpressionSetExpression {
        /**
         * Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive.
         */
        id?: string;
    }
    /**
     * In contrast to a single BackendService in  HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService
     */
    interface Schema$WeightedBackendService {
        /**
         * The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.
         */
        backendService?: string;
        /**
         * Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
         */
        headerAction?: Schema$HttpHeaderAction;
        /**
         * Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user&#39;s request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService&#39;s session affinity policy. The value must be between 0 and 1000
         */
        weight?: number;
    }
    interface Schema$XpnHostList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * [Output Only] A list of shared VPC host project URLs.
         */
        items?: Schema$Project[];
        /**
         * [Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    /**
     * Service resource (a.k.a service project) ID.
     */
    interface Schema$XpnResourceId {
        /**
         * The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678).
         */
        id?: string;
        /**
         * The type of the service resource.
         */
        type?: string;
    }
    /**
     * Represents a Zone resource.  A zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-a is located in the us-east1 region. For more information, read Regions and Zones. (== resource_for beta.zones ==) (== resource_for v1.zones ==)
     */
    interface Schema$Zone {
        /**
         * [Output Only] Available cpu/platform selections for the zone.
         */
        availableCpuPlatforms?: string[];
        /**
         * [Output Only] Creation timestamp in RFC3339 text format.
         */
        creationTimestamp?: string;
        /**
         * [Output Only] The deprecation status associated with this zone.
         */
        deprecated?: Schema$DeprecationStatus;
        /**
         * [Output Only] Textual description of the resource.
         */
        description?: string;
        /**
         * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
         */
        id?: string;
        /**
         * [Output Only] Type of the resource. Always compute#zone for zones.
         */
        kind?: string;
        /**
         * [Output Only] Name of the resource.
         */
        name?: string;
        /**
         * [Output Only] Full URL reference to the region which hosts the zone.
         */
        region?: string;
        /**
         * [Output Only] Server-defined URL for the resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Status of the zone, either UP or DOWN.
         */
        status?: string;
    }
    /**
     * Contains a list of zone resources.
     */
    interface Schema$ZoneList {
        /**
         * [Output Only] Unique identifier for the resource; defined by the server.
         */
        id?: string;
        /**
         * A list of Zone resources.
         */
        items?: Schema$Zone[];
        /**
         * Type of resource.
         */
        kind?: string;
        /**
         * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
         */
        nextPageToken?: string;
        /**
         * [Output Only] Server-defined URL for this resource.
         */
        selfLink?: string;
        /**
         * [Output Only] Informational warning message.
         */
        warning?: {
            code?: string;
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            message?: string;
        };
    }
    interface Schema$ZoneSetLabelsRequest {
        /**
         * The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint.
         */
        labelFingerprint?: string;
        /**
         * The labels to set for this resource.
         */
        labels?: {
            [key: string]: string;
        };
    }
    interface Schema$ZoneSetPolicyRequest {
        /**
         * Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use &#39;policy&#39; to specify bindings.
         */
        bindings?: Schema$Binding[];
        /**
         * Flatten Policy to create a backward compatible wire-format. Deprecated. Use &#39;policy&#39; to specify the etag.
         */
        etag?: string;
        /**
         * REQUIRED: The complete policy to be applied to the &#39;resource&#39;. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
         */
        policy?: Schema$Policy;
    }
    class Resource$Acceleratortypes {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.acceleratorTypes.aggregatedList
         * @desc Retrieves an aggregated list of accelerator types.
         * @alias compute.acceleratorTypes.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Acceleratortypes$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$AcceleratorTypeAggregatedList>;
        aggregatedList(params: Params$Resource$Acceleratortypes$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$AcceleratorTypeAggregatedList>, callback: BodyResponseCallback<Schema$AcceleratorTypeAggregatedList>): void;
        aggregatedList(params: Params$Resource$Acceleratortypes$Aggregatedlist, callback: BodyResponseCallback<Schema$AcceleratorTypeAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$AcceleratorTypeAggregatedList>): void;
        /**
         * compute.acceleratorTypes.get
         * @desc Returns the specified accelerator type.
         * @alias compute.acceleratorTypes.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.acceleratorType Name of the accelerator type to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Acceleratortypes$Get, options?: MethodOptions): GaxiosPromise<Schema$AcceleratorType>;
        get(params: Params$Resource$Acceleratortypes$Get, options: MethodOptions | BodyResponseCallback<Schema$AcceleratorType>, callback: BodyResponseCallback<Schema$AcceleratorType>): void;
        get(params: Params$Resource$Acceleratortypes$Get, callback: BodyResponseCallback<Schema$AcceleratorType>): void;
        get(callback: BodyResponseCallback<Schema$AcceleratorType>): void;
        /**
         * compute.acceleratorTypes.list
         * @desc Retrieves a list of accelerator types available to the specified project.
         * @alias compute.acceleratorTypes.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Acceleratortypes$List, options?: MethodOptions): GaxiosPromise<Schema$AcceleratorTypeList>;
        list(params: Params$Resource$Acceleratortypes$List, options: MethodOptions | BodyResponseCallback<Schema$AcceleratorTypeList>, callback: BodyResponseCallback<Schema$AcceleratorTypeList>): void;
        list(params: Params$Resource$Acceleratortypes$List, callback: BodyResponseCallback<Schema$AcceleratorTypeList>): void;
        list(callback: BodyResponseCallback<Schema$AcceleratorTypeList>): void;
    }
    interface Params$Resource$Acceleratortypes$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Acceleratortypes$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the accelerator type to return.
         */
        acceleratorType?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Acceleratortypes$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    class Resource$Addresses {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.addresses.aggregatedList
         * @desc Retrieves an aggregated list of addresses.
         * @alias compute.addresses.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Addresses$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$AddressAggregatedList>;
        aggregatedList(params: Params$Resource$Addresses$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$AddressAggregatedList>, callback: BodyResponseCallback<Schema$AddressAggregatedList>): void;
        aggregatedList(params: Params$Resource$Addresses$Aggregatedlist, callback: BodyResponseCallback<Schema$AddressAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$AddressAggregatedList>): void;
        /**
         * compute.addresses.delete
         * @desc Deletes the specified address resource.
         * @alias compute.addresses.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.address Name of the address resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Addresses$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Addresses$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Addresses$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.addresses.get
         * @desc Returns the specified address resource.
         * @alias compute.addresses.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.address Name of the address resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Addresses$Get, options?: MethodOptions): GaxiosPromise<Schema$Address>;
        get(params: Params$Resource$Addresses$Get, options: MethodOptions | BodyResponseCallback<Schema$Address>, callback: BodyResponseCallback<Schema$Address>): void;
        get(params: Params$Resource$Addresses$Get, callback: BodyResponseCallback<Schema$Address>): void;
        get(callback: BodyResponseCallback<Schema$Address>): void;
        /**
         * compute.addresses.insert
         * @desc Creates an address resource in the specified project by using the data included in the request.
         * @alias compute.addresses.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Address} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Addresses$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Addresses$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Addresses$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.addresses.list
         * @desc Retrieves a list of addresses contained within the specified region.
         * @alias compute.addresses.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Addresses$List, options?: MethodOptions): GaxiosPromise<Schema$AddressList>;
        list(params: Params$Resource$Addresses$List, options: MethodOptions | BodyResponseCallback<Schema$AddressList>, callback: BodyResponseCallback<Schema$AddressList>): void;
        list(params: Params$Resource$Addresses$List, callback: BodyResponseCallback<Schema$AddressList>): void;
        list(callback: BodyResponseCallback<Schema$AddressList>): void;
        /**
         * compute.addresses.setLabels
         * @desc Sets the labels on an Address. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.addresses.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Addresses$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Addresses$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Addresses$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.addresses.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.addresses.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Addresses$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Addresses$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Addresses$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Addresses$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Addresses$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the address resource to delete.
         */
        address?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Addresses$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the address resource to return.
         */
        address?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Addresses$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Address;
    }
    interface Params$Resource$Addresses$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Addresses$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetLabelsRequest;
    }
    interface Params$Resource$Addresses$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Autoscalers {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.autoscalers.aggregatedList
         * @desc Retrieves an aggregated list of autoscalers.
         * @alias compute.autoscalers.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Autoscalers$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$AutoscalerAggregatedList>;
        aggregatedList(params: Params$Resource$Autoscalers$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$AutoscalerAggregatedList>, callback: BodyResponseCallback<Schema$AutoscalerAggregatedList>): void;
        aggregatedList(params: Params$Resource$Autoscalers$Aggregatedlist, callback: BodyResponseCallback<Schema$AutoscalerAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$AutoscalerAggregatedList>): void;
        /**
         * compute.autoscalers.delete
         * @desc Deletes the specified autoscaler.
         * @alias compute.autoscalers.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.autoscaler Name of the autoscaler to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Autoscalers$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Autoscalers$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Autoscalers$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.autoscalers.get
         * @desc Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.
         * @alias compute.autoscalers.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.autoscaler Name of the autoscaler to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Autoscalers$Get, options?: MethodOptions): GaxiosPromise<Schema$Autoscaler>;
        get(params: Params$Resource$Autoscalers$Get, options: MethodOptions | BodyResponseCallback<Schema$Autoscaler>, callback: BodyResponseCallback<Schema$Autoscaler>): void;
        get(params: Params$Resource$Autoscalers$Get, callback: BodyResponseCallback<Schema$Autoscaler>): void;
        get(callback: BodyResponseCallback<Schema$Autoscaler>): void;
        /**
         * compute.autoscalers.insert
         * @desc Creates an autoscaler in the specified project using the data included in the request.
         * @alias compute.autoscalers.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone Name of the zone for this request.
         * @param {().Autoscaler} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Autoscalers$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Autoscalers$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Autoscalers$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.autoscalers.list
         * @desc Retrieves a list of autoscalers contained within the specified zone.
         * @alias compute.autoscalers.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Autoscalers$List, options?: MethodOptions): GaxiosPromise<Schema$AutoscalerList>;
        list(params: Params$Resource$Autoscalers$List, options: MethodOptions | BodyResponseCallback<Schema$AutoscalerList>, callback: BodyResponseCallback<Schema$AutoscalerList>): void;
        list(params: Params$Resource$Autoscalers$List, callback: BodyResponseCallback<Schema$AutoscalerList>): void;
        list(callback: BodyResponseCallback<Schema$AutoscalerList>): void;
        /**
         * compute.autoscalers.patch
         * @desc Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.autoscalers.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.autoscaler Name of the autoscaler to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone Name of the zone for this request.
         * @param {().Autoscaler} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Autoscalers$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Autoscalers$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Autoscalers$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.autoscalers.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.autoscalers.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Autoscalers$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Autoscalers$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Autoscalers$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.autoscalers.update
         * @desc Updates an autoscaler in the specified project using the data included in the request.
         * @alias compute.autoscalers.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.autoscaler Name of the autoscaler to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone Name of the zone for this request.
         * @param {().Autoscaler} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Autoscalers$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Autoscalers$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Autoscalers$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Autoscalers$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Autoscalers$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to delete.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Autoscalers$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to return.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Autoscalers$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Autoscaler;
    }
    interface Params$Resource$Autoscalers$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Autoscalers$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to patch.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Autoscaler;
    }
    interface Params$Resource$Autoscalers$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Autoscalers$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to update.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Autoscaler;
    }
    class Resource$Backendbuckets {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.backendBuckets.addSignedUrlKey
         * @desc Adds a key for validating requests with signed URLs for this backend bucket.
         * @alias compute.backendBuckets.addSignedUrlKey
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendBucket Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().SignedUrlKey} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addSignedUrlKey(params?: Params$Resource$Backendbuckets$Addsignedurlkey, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addSignedUrlKey(params: Params$Resource$Backendbuckets$Addsignedurlkey, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addSignedUrlKey(params: Params$Resource$Backendbuckets$Addsignedurlkey, callback: BodyResponseCallback<Schema$Operation>): void;
        addSignedUrlKey(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendBuckets.delete
         * @desc Deletes the specified BackendBucket resource.
         * @alias compute.backendBuckets.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendBucket Name of the BackendBucket resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Backendbuckets$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Backendbuckets$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Backendbuckets$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendBuckets.deleteSignedUrlKey
         * @desc Deletes a key for validating requests with signed URLs for this backend bucket.
         * @alias compute.backendBuckets.deleteSignedUrlKey
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendBucket Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         * @param {string} params.keyName The name of the Signed URL Key to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deleteSignedUrlKey(params?: Params$Resource$Backendbuckets$Deletesignedurlkey, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deleteSignedUrlKey(params: Params$Resource$Backendbuckets$Deletesignedurlkey, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteSignedUrlKey(params: Params$Resource$Backendbuckets$Deletesignedurlkey, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteSignedUrlKey(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendBuckets.get
         * @desc Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.
         * @alias compute.backendBuckets.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendBucket Name of the BackendBucket resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Backendbuckets$Get, options?: MethodOptions): GaxiosPromise<Schema$BackendBucket>;
        get(params: Params$Resource$Backendbuckets$Get, options: MethodOptions | BodyResponseCallback<Schema$BackendBucket>, callback: BodyResponseCallback<Schema$BackendBucket>): void;
        get(params: Params$Resource$Backendbuckets$Get, callback: BodyResponseCallback<Schema$BackendBucket>): void;
        get(callback: BodyResponseCallback<Schema$BackendBucket>): void;
        /**
         * compute.backendBuckets.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.backendBuckets.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Backendbuckets$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Backendbuckets$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Backendbuckets$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.backendBuckets.insert
         * @desc Creates a BackendBucket resource in the specified project using the data included in the request.
         * @alias compute.backendBuckets.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendBucket} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Backendbuckets$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Backendbuckets$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Backendbuckets$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendBuckets.list
         * @desc Retrieves the list of BackendBucket resources available to the specified project.
         * @alias compute.backendBuckets.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Backendbuckets$List, options?: MethodOptions): GaxiosPromise<Schema$BackendBucketList>;
        list(params: Params$Resource$Backendbuckets$List, options: MethodOptions | BodyResponseCallback<Schema$BackendBucketList>, callback: BodyResponseCallback<Schema$BackendBucketList>): void;
        list(params: Params$Resource$Backendbuckets$List, callback: BodyResponseCallback<Schema$BackendBucketList>): void;
        list(callback: BodyResponseCallback<Schema$BackendBucketList>): void;
        /**
         * compute.backendBuckets.patch
         * @desc Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.backendBuckets.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendBucket Name of the BackendBucket resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendBucket} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Backendbuckets$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Backendbuckets$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Backendbuckets$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendBuckets.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.backendBuckets.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Backendbuckets$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Backendbuckets$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Backendbuckets$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.backendBuckets.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.backendBuckets.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Backendbuckets$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Backendbuckets$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Backendbuckets$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.backendBuckets.update
         * @desc Updates the specified BackendBucket resource with the data included in the request.
         * @alias compute.backendBuckets.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendBucket Name of the BackendBucket resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendBucket} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Backendbuckets$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Backendbuckets$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Backendbuckets$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Backendbuckets$Addsignedurlkey extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         */
        backendBucket?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SignedUrlKey;
    }
    interface Params$Resource$Backendbuckets$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendBucket resource to delete.
         */
        backendBucket?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Backendbuckets$Deletesignedurlkey extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         */
        backendBucket?: string;
        /**
         * The name of the Signed URL Key to delete.
         */
        keyName?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Backendbuckets$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendBucket resource to return.
         */
        backendBucket?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Backendbuckets$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Backendbuckets$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendBucket;
    }
    interface Params$Resource$Backendbuckets$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Backendbuckets$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendBucket resource to patch.
         */
        backendBucket?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendBucket;
    }
    interface Params$Resource$Backendbuckets$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Backendbuckets$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Backendbuckets$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendBucket resource to update.
         */
        backendBucket?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendBucket;
    }
    class Resource$Backendservices {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.backendServices.addSignedUrlKey
         * @desc Adds a key for validating requests with signed URLs for this backend service.
         * @alias compute.backendServices.addSignedUrlKey
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().SignedUrlKey} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addSignedUrlKey(params?: Params$Resource$Backendservices$Addsignedurlkey, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addSignedUrlKey(params: Params$Resource$Backendservices$Addsignedurlkey, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addSignedUrlKey(params: Params$Resource$Backendservices$Addsignedurlkey, callback: BodyResponseCallback<Schema$Operation>): void;
        addSignedUrlKey(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendServices.aggregatedList
         * @desc Retrieves the list of all BackendService resources, regional and global, available to the specified project.
         * @alias compute.backendServices.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Name of the project scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Backendservices$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$BackendServiceAggregatedList>;
        aggregatedList(params: Params$Resource$Backendservices$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$BackendServiceAggregatedList>, callback: BodyResponseCallback<Schema$BackendServiceAggregatedList>): void;
        aggregatedList(params: Params$Resource$Backendservices$Aggregatedlist, callback: BodyResponseCallback<Schema$BackendServiceAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$BackendServiceAggregatedList>): void;
        /**
         * compute.backendServices.delete
         * @desc Deletes the specified BackendService resource.
         * @alias compute.backendServices.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Backendservices$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Backendservices$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Backendservices$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendServices.deleteSignedUrlKey
         * @desc Deletes a key for validating requests with signed URLs for this backend service.
         * @alias compute.backendServices.deleteSignedUrlKey
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         * @param {string} params.keyName The name of the Signed URL Key to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deleteSignedUrlKey(params?: Params$Resource$Backendservices$Deletesignedurlkey, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deleteSignedUrlKey(params: Params$Resource$Backendservices$Deletesignedurlkey, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteSignedUrlKey(params: Params$Resource$Backendservices$Deletesignedurlkey, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteSignedUrlKey(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendServices.get
         * @desc Returns the specified BackendService resource. Gets a list of available backend services.
         * @alias compute.backendServices.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Backendservices$Get, options?: MethodOptions): GaxiosPromise<Schema$BackendService>;
        get(params: Params$Resource$Backendservices$Get, options: MethodOptions | BodyResponseCallback<Schema$BackendService>, callback: BodyResponseCallback<Schema$BackendService>): void;
        get(params: Params$Resource$Backendservices$Get, callback: BodyResponseCallback<Schema$BackendService>): void;
        get(callback: BodyResponseCallback<Schema$BackendService>): void;
        /**
         * compute.backendServices.getHealth
         * @desc Gets the most recent health check results for this BackendService.
         * @alias compute.backendServices.getHealth
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to which the queried instance belongs.
         * @param {string} params.project
         * @param {().ResourceGroupReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getHealth(params?: Params$Resource$Backendservices$Gethealth, options?: MethodOptions): GaxiosPromise<Schema$BackendServiceGroupHealth>;
        getHealth(params: Params$Resource$Backendservices$Gethealth, options: MethodOptions | BodyResponseCallback<Schema$BackendServiceGroupHealth>, callback: BodyResponseCallback<Schema$BackendServiceGroupHealth>): void;
        getHealth(params: Params$Resource$Backendservices$Gethealth, callback: BodyResponseCallback<Schema$BackendServiceGroupHealth>): void;
        getHealth(callback: BodyResponseCallback<Schema$BackendServiceGroupHealth>): void;
        /**
         * compute.backendServices.insert
         * @desc Creates a BackendService resource in the specified project using the data included in the request. There are several restrictions and guidelines to keep in mind when creating a backend service. Read  Restrictions and Guidelines for more information.
         * @alias compute.backendServices.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendService} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Backendservices$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Backendservices$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Backendservices$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendServices.list
         * @desc Retrieves the list of BackendService resources available to the specified project.
         * @alias compute.backendServices.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Backendservices$List, options?: MethodOptions): GaxiosPromise<Schema$BackendServiceList>;
        list(params: Params$Resource$Backendservices$List, options: MethodOptions | BodyResponseCallback<Schema$BackendServiceList>, callback: BodyResponseCallback<Schema$BackendServiceList>): void;
        list(params: Params$Resource$Backendservices$List, callback: BodyResponseCallback<Schema$BackendServiceList>): void;
        list(callback: BodyResponseCallback<Schema$BackendServiceList>): void;
        /**
         * compute.backendServices.patch
         * @desc Patches the specified BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.backendServices.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendService} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Backendservices$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Backendservices$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Backendservices$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendServices.setSecurityPolicy
         * @desc Sets the security policy for the specified backend service.
         * @alias compute.backendServices.setSecurityPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().SecurityPolicyReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setSecurityPolicy(params?: Params$Resource$Backendservices$Setsecuritypolicy, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setSecurityPolicy(params: Params$Resource$Backendservices$Setsecuritypolicy, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setSecurityPolicy(params: Params$Resource$Backendservices$Setsecuritypolicy, callback: BodyResponseCallback<Schema$Operation>): void;
        setSecurityPolicy(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.backendServices.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.backendServices.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Backendservices$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Backendservices$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Backendservices$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.backendServices.update
         * @desc Updates the specified BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information.
         * @alias compute.backendServices.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendService} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Backendservices$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Backendservices$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Backendservices$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Backendservices$Addsignedurlkey extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SignedUrlKey;
    }
    interface Params$Resource$Backendservices$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Name of the project scoping this request.
         */
        project?: string;
    }
    interface Params$Resource$Backendservices$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to delete.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Backendservices$Deletesignedurlkey extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
         */
        backendService?: string;
        /**
         * The name of the Signed URL Key to delete.
         */
        keyName?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Backendservices$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to return.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Backendservices$Gethealth extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to which the queried instance belongs.
         */
        backendService?: string;
        /**
         *
         */
        project?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ResourceGroupReference;
    }
    interface Params$Resource$Backendservices$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendService;
    }
    interface Params$Resource$Backendservices$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Backendservices$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to patch.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendService;
    }
    interface Params$Resource$Backendservices$Setsecuritypolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicyReference;
    }
    interface Params$Resource$Backendservices$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Backendservices$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to update.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendService;
    }
    class Resource$Disks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.disks.addResourcePolicies
         * @desc Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
         * @alias compute.disks.addResourcePolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk The disk name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().DisksAddResourcePoliciesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addResourcePolicies(params?: Params$Resource$Disks$Addresourcepolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addResourcePolicies(params: Params$Resource$Disks$Addresourcepolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addResourcePolicies(params: Params$Resource$Disks$Addresourcepolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        addResourcePolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.disks.aggregatedList
         * @desc Retrieves an aggregated list of persistent disks.
         * @alias compute.disks.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Disks$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$DiskAggregatedList>;
        aggregatedList(params: Params$Resource$Disks$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$DiskAggregatedList>, callback: BodyResponseCallback<Schema$DiskAggregatedList>): void;
        aggregatedList(params: Params$Resource$Disks$Aggregatedlist, callback: BodyResponseCallback<Schema$DiskAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$DiskAggregatedList>): void;
        /**
         * compute.disks.createSnapshot
         * @desc Creates a snapshot of a specified persistent disk.
         * @alias compute.disks.createSnapshot
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk Name of the persistent disk to snapshot.
         * @param {boolean=} params.guestFlush [Input Only] Specifies to create an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().Snapshot} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        createSnapshot(params?: Params$Resource$Disks$Createsnapshot, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        createSnapshot(params: Params$Resource$Disks$Createsnapshot, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        createSnapshot(params: Params$Resource$Disks$Createsnapshot, callback: BodyResponseCallback<Schema$Operation>): void;
        createSnapshot(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.disks.delete
         * @desc Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
         * @alias compute.disks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk Name of the persistent disk to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Disks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Disks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Disks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.disks.get
         * @desc Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.
         * @alias compute.disks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk Name of the persistent disk to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Disks$Get, options?: MethodOptions): GaxiosPromise<Schema$Disk>;
        get(params: Params$Resource$Disks$Get, options: MethodOptions | BodyResponseCallback<Schema$Disk>, callback: BodyResponseCallback<Schema$Disk>): void;
        get(params: Params$Resource$Disks$Get, callback: BodyResponseCallback<Schema$Disk>): void;
        get(callback: BodyResponseCallback<Schema$Disk>): void;
        /**
         * compute.disks.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.disks.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Disks$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Disks$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Disks$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.disks.insert
         * @desc Creates a persistent disk in the specified project using the data in the request. You can create a disk with a sourceImage, a sourceSnapshot, or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
         * @alias compute.disks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string=} params.sourceImage Optional. Source image to restore onto a disk.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().Disk} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Disks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Disks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Disks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.disks.list
         * @desc Retrieves a list of persistent disks contained within the specified zone.
         * @alias compute.disks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Disks$List, options?: MethodOptions): GaxiosPromise<Schema$DiskList>;
        list(params: Params$Resource$Disks$List, options: MethodOptions | BodyResponseCallback<Schema$DiskList>, callback: BodyResponseCallback<Schema$DiskList>): void;
        list(params: Params$Resource$Disks$List, callback: BodyResponseCallback<Schema$DiskList>): void;
        list(callback: BodyResponseCallback<Schema$DiskList>): void;
        /**
         * compute.disks.removeResourcePolicies
         * @desc Removes resource policies from a disk.
         * @alias compute.disks.removeResourcePolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk The disk name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().DisksRemoveResourcePoliciesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeResourcePolicies(params?: Params$Resource$Disks$Removeresourcepolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeResourcePolicies(params: Params$Resource$Disks$Removeresourcepolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeResourcePolicies(params: Params$Resource$Disks$Removeresourcepolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        removeResourcePolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.disks.resize
         * @desc Resizes the specified persistent disk. You can only increase the size of the disk.
         * @alias compute.disks.resize
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk The name of the persistent disk.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().DisksResizeRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        resize(params?: Params$Resource$Disks$Resize, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        resize(params: Params$Resource$Disks$Resize, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(params: Params$Resource$Disks$Resize, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.disks.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.disks.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ZoneSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Disks$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Disks$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Disks$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.disks.setLabels
         * @desc Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.disks.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ZoneSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Disks$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Disks$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Disks$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.disks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.disks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Disks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Disks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Disks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Disks$Addresourcepolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The disk name for this request.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$DisksAddResourcePoliciesRequest;
    }
    interface Params$Resource$Disks$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Disks$Createsnapshot extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the persistent disk to snapshot.
         */
        disk?: string;
        /**
         * [Input Only] Specifies to create an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
         */
        guestFlush?: boolean;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Snapshot;
    }
    interface Params$Resource$Disks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the persistent disk to delete.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Disks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the persistent disk to return.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Disks$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Disks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Optional. Source image to restore onto a disk.
         */
        sourceImage?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Disk;
    }
    interface Params$Resource$Disks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Disks$Removeresourcepolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The disk name for this request.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$DisksRemoveResourcePoliciesRequest;
    }
    interface Params$Resource$Disks$Resize extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the persistent disk.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$DisksResizeRequest;
    }
    interface Params$Resource$Disks$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ZoneSetPolicyRequest;
    }
    interface Params$Resource$Disks$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ZoneSetLabelsRequest;
    }
    interface Params$Resource$Disks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Disktypes {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.diskTypes.aggregatedList
         * @desc Retrieves an aggregated list of disk types.
         * @alias compute.diskTypes.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Disktypes$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$DiskTypeAggregatedList>;
        aggregatedList(params: Params$Resource$Disktypes$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$DiskTypeAggregatedList>, callback: BodyResponseCallback<Schema$DiskTypeAggregatedList>): void;
        aggregatedList(params: Params$Resource$Disktypes$Aggregatedlist, callback: BodyResponseCallback<Schema$DiskTypeAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$DiskTypeAggregatedList>): void;
        /**
         * compute.diskTypes.get
         * @desc Returns the specified disk type. Gets a list of available disk types by making a list() request.
         * @alias compute.diskTypes.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.diskType Name of the disk type to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Disktypes$Get, options?: MethodOptions): GaxiosPromise<Schema$DiskType>;
        get(params: Params$Resource$Disktypes$Get, options: MethodOptions | BodyResponseCallback<Schema$DiskType>, callback: BodyResponseCallback<Schema$DiskType>): void;
        get(params: Params$Resource$Disktypes$Get, callback: BodyResponseCallback<Schema$DiskType>): void;
        get(callback: BodyResponseCallback<Schema$DiskType>): void;
        /**
         * compute.diskTypes.list
         * @desc Retrieves a list of disk types available to the specified project.
         * @alias compute.diskTypes.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Disktypes$List, options?: MethodOptions): GaxiosPromise<Schema$DiskTypeList>;
        list(params: Params$Resource$Disktypes$List, options: MethodOptions | BodyResponseCallback<Schema$DiskTypeList>, callback: BodyResponseCallback<Schema$DiskTypeList>): void;
        list(params: Params$Resource$Disktypes$List, callback: BodyResponseCallback<Schema$DiskTypeList>): void;
        list(callback: BodyResponseCallback<Schema$DiskTypeList>): void;
    }
    interface Params$Resource$Disktypes$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Disktypes$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the disk type to return.
         */
        diskType?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Disktypes$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    class Resource$Externalvpngateways {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.externalVpnGateways.delete
         * @desc Deletes the specified externalVpnGateway.
         * @alias compute.externalVpnGateways.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.externalVpnGateway Name of the externalVpnGateways to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Externalvpngateways$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Externalvpngateways$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Externalvpngateways$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.externalVpnGateways.get
         * @desc Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
         * @alias compute.externalVpnGateways.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.externalVpnGateway Name of the externalVpnGateway to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Externalvpngateways$Get, options?: MethodOptions): GaxiosPromise<Schema$ExternalVpnGateway>;
        get(params: Params$Resource$Externalvpngateways$Get, options: MethodOptions | BodyResponseCallback<Schema$ExternalVpnGateway>, callback: BodyResponseCallback<Schema$ExternalVpnGateway>): void;
        get(params: Params$Resource$Externalvpngateways$Get, callback: BodyResponseCallback<Schema$ExternalVpnGateway>): void;
        get(callback: BodyResponseCallback<Schema$ExternalVpnGateway>): void;
        /**
         * compute.externalVpnGateways.insert
         * @desc Creates a ExternalVpnGateway in the specified project using the data included in the request.
         * @alias compute.externalVpnGateways.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ExternalVpnGateway} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Externalvpngateways$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Externalvpngateways$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Externalvpngateways$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.externalVpnGateways.list
         * @desc Retrieves the list of ExternalVpnGateway available to the specified project.
         * @alias compute.externalVpnGateways.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Externalvpngateways$List, options?: MethodOptions): GaxiosPromise<Schema$ExternalVpnGatewayList>;
        list(params: Params$Resource$Externalvpngateways$List, options: MethodOptions | BodyResponseCallback<Schema$ExternalVpnGatewayList>, callback: BodyResponseCallback<Schema$ExternalVpnGatewayList>): void;
        list(params: Params$Resource$Externalvpngateways$List, callback: BodyResponseCallback<Schema$ExternalVpnGatewayList>): void;
        list(callback: BodyResponseCallback<Schema$ExternalVpnGatewayList>): void;
        /**
         * compute.externalVpnGateways.setLabels
         * @desc Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.externalVpnGateways.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Externalvpngateways$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Externalvpngateways$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Externalvpngateways$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.externalVpnGateways.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.externalVpnGateways.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Externalvpngateways$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Externalvpngateways$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Externalvpngateways$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Externalvpngateways$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the externalVpnGateways to delete.
         */
        externalVpnGateway?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Externalvpngateways$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the externalVpnGateway to return.
         */
        externalVpnGateway?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Externalvpngateways$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ExternalVpnGateway;
    }
    interface Params$Resource$Externalvpngateways$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Externalvpngateways$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetLabelsRequest;
    }
    interface Params$Resource$Externalvpngateways$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Firewalls {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.firewalls.delete
         * @desc Deletes the specified firewall.
         * @alias compute.firewalls.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.firewall Name of the firewall rule to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Firewalls$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Firewalls$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Firewalls$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.firewalls.get
         * @desc Returns the specified firewall.
         * @alias compute.firewalls.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.firewall Name of the firewall rule to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Firewalls$Get, options?: MethodOptions): GaxiosPromise<Schema$Firewall>;
        get(params: Params$Resource$Firewalls$Get, options: MethodOptions | BodyResponseCallback<Schema$Firewall>, callback: BodyResponseCallback<Schema$Firewall>): void;
        get(params: Params$Resource$Firewalls$Get, callback: BodyResponseCallback<Schema$Firewall>): void;
        get(callback: BodyResponseCallback<Schema$Firewall>): void;
        /**
         * compute.firewalls.insert
         * @desc Creates a firewall rule in the specified project using the data included in the request.
         * @alias compute.firewalls.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Firewall} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Firewalls$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Firewalls$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Firewalls$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.firewalls.list
         * @desc Retrieves the list of firewall rules available to the specified project.
         * @alias compute.firewalls.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Firewalls$List, options?: MethodOptions): GaxiosPromise<Schema$FirewallList>;
        list(params: Params$Resource$Firewalls$List, options: MethodOptions | BodyResponseCallback<Schema$FirewallList>, callback: BodyResponseCallback<Schema$FirewallList>): void;
        list(params: Params$Resource$Firewalls$List, callback: BodyResponseCallback<Schema$FirewallList>): void;
        list(callback: BodyResponseCallback<Schema$FirewallList>): void;
        /**
         * compute.firewalls.patch
         * @desc Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.firewalls.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.firewall Name of the firewall rule to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Firewall} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Firewalls$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Firewalls$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Firewalls$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.firewalls.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.firewalls.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Firewalls$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Firewalls$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Firewalls$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.firewalls.update
         * @desc Updates the specified firewall rule with the data included in the request. The PUT method can only update the following fields of firewall rule: allowed, description, sourceRanges, sourceTags, targetTags.
         * @alias compute.firewalls.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.firewall Name of the firewall rule to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Firewall} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Firewalls$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Firewalls$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Firewalls$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Firewalls$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the firewall rule to delete.
         */
        firewall?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Firewalls$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the firewall rule to return.
         */
        firewall?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Firewalls$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Firewall;
    }
    interface Params$Resource$Firewalls$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Firewalls$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the firewall rule to patch.
         */
        firewall?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Firewall;
    }
    interface Params$Resource$Firewalls$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Firewalls$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the firewall rule to update.
         */
        firewall?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Firewall;
    }
    class Resource$Forwardingrules {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.forwardingRules.aggregatedList
         * @desc Retrieves an aggregated list of forwarding rules.
         * @alias compute.forwardingRules.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Forwardingrules$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$ForwardingRuleAggregatedList>;
        aggregatedList(params: Params$Resource$Forwardingrules$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$ForwardingRuleAggregatedList>, callback: BodyResponseCallback<Schema$ForwardingRuleAggregatedList>): void;
        aggregatedList(params: Params$Resource$Forwardingrules$Aggregatedlist, callback: BodyResponseCallback<Schema$ForwardingRuleAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$ForwardingRuleAggregatedList>): void;
        /**
         * compute.forwardingRules.delete
         * @desc Deletes the specified ForwardingRule resource.
         * @alias compute.forwardingRules.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Forwardingrules$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Forwardingrules$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Forwardingrules$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.forwardingRules.get
         * @desc Returns the specified ForwardingRule resource.
         * @alias compute.forwardingRules.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Forwardingrules$Get, options?: MethodOptions): GaxiosPromise<Schema$ForwardingRule>;
        get(params: Params$Resource$Forwardingrules$Get, options: MethodOptions | BodyResponseCallback<Schema$ForwardingRule>, callback: BodyResponseCallback<Schema$ForwardingRule>): void;
        get(params: Params$Resource$Forwardingrules$Get, callback: BodyResponseCallback<Schema$ForwardingRule>): void;
        get(callback: BodyResponseCallback<Schema$ForwardingRule>): void;
        /**
         * compute.forwardingRules.insert
         * @desc Creates a ForwardingRule resource in the specified project and region using the data included in the request.
         * @alias compute.forwardingRules.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ForwardingRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Forwardingrules$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Forwardingrules$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Forwardingrules$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.forwardingRules.list
         * @desc Retrieves a list of ForwardingRule resources available to the specified project and region.
         * @alias compute.forwardingRules.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Forwardingrules$List, options?: MethodOptions): GaxiosPromise<Schema$ForwardingRuleList>;
        list(params: Params$Resource$Forwardingrules$List, options: MethodOptions | BodyResponseCallback<Schema$ForwardingRuleList>, callback: BodyResponseCallback<Schema$ForwardingRuleList>): void;
        list(params: Params$Resource$Forwardingrules$List, callback: BodyResponseCallback<Schema$ForwardingRuleList>): void;
        list(callback: BodyResponseCallback<Schema$ForwardingRuleList>): void;
        /**
         * compute.forwardingRules.patch
         * @desc Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
         * @alias compute.forwardingRules.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ForwardingRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Forwardingrules$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Forwardingrules$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Forwardingrules$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.forwardingRules.setLabels
         * @desc Sets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.forwardingRules.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Forwardingrules$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Forwardingrules$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Forwardingrules$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.forwardingRules.setTarget
         * @desc Changes target URL for forwarding rule. The new target should be of the same type as the old target.
         * @alias compute.forwardingRules.setTarget
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource in which target is to be set.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setTarget(params?: Params$Resource$Forwardingrules$Settarget, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setTarget(params: Params$Resource$Forwardingrules$Settarget, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setTarget(params: Params$Resource$Forwardingrules$Settarget, callback: BodyResponseCallback<Schema$Operation>): void;
        setTarget(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.forwardingRules.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.forwardingRules.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Forwardingrules$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Forwardingrules$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Forwardingrules$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Forwardingrules$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Forwardingrules$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource to delete.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Forwardingrules$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource to return.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Forwardingrules$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ForwardingRule;
    }
    interface Params$Resource$Forwardingrules$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Forwardingrules$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource to patch.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ForwardingRule;
    }
    interface Params$Resource$Forwardingrules$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetLabelsRequest;
    }
    interface Params$Resource$Forwardingrules$Settarget extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource in which target is to be set.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetReference;
    }
    interface Params$Resource$Forwardingrules$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Globaladdresses {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.globalAddresses.delete
         * @desc Deletes the specified address resource.
         * @alias compute.globalAddresses.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.address Name of the address resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Globaladdresses$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Globaladdresses$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Globaladdresses$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalAddresses.get
         * @desc Returns the specified address resource. Gets a list of available addresses by making a list() request.
         * @alias compute.globalAddresses.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.address Name of the address resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Globaladdresses$Get, options?: MethodOptions): GaxiosPromise<Schema$Address>;
        get(params: Params$Resource$Globaladdresses$Get, options: MethodOptions | BodyResponseCallback<Schema$Address>, callback: BodyResponseCallback<Schema$Address>): void;
        get(params: Params$Resource$Globaladdresses$Get, callback: BodyResponseCallback<Schema$Address>): void;
        get(callback: BodyResponseCallback<Schema$Address>): void;
        /**
         * compute.globalAddresses.insert
         * @desc Creates an address resource in the specified project by using the data included in the request.
         * @alias compute.globalAddresses.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Address} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Globaladdresses$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Globaladdresses$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Globaladdresses$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalAddresses.list
         * @desc Retrieves a list of global addresses.
         * @alias compute.globalAddresses.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Globaladdresses$List, options?: MethodOptions): GaxiosPromise<Schema$AddressList>;
        list(params: Params$Resource$Globaladdresses$List, options: MethodOptions | BodyResponseCallback<Schema$AddressList>, callback: BodyResponseCallback<Schema$AddressList>): void;
        list(params: Params$Resource$Globaladdresses$List, callback: BodyResponseCallback<Schema$AddressList>): void;
        list(callback: BodyResponseCallback<Schema$AddressList>): void;
        /**
         * compute.globalAddresses.setLabels
         * @desc Sets the labels on a GlobalAddress. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.globalAddresses.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Globaladdresses$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Globaladdresses$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Globaladdresses$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalAddresses.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.globalAddresses.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Globaladdresses$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Globaladdresses$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Globaladdresses$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Globaladdresses$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the address resource to delete.
         */
        address?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Globaladdresses$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the address resource to return.
         */
        address?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globaladdresses$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Address;
    }
    interface Params$Resource$Globaladdresses$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globaladdresses$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetLabelsRequest;
    }
    interface Params$Resource$Globaladdresses$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Globalforwardingrules {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.globalForwardingRules.delete
         * @desc Deletes the specified GlobalForwardingRule resource.
         * @alias compute.globalForwardingRules.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Globalforwardingrules$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Globalforwardingrules$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Globalforwardingrules$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalForwardingRules.get
         * @desc Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
         * @alias compute.globalForwardingRules.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Globalforwardingrules$Get, options?: MethodOptions): GaxiosPromise<Schema$ForwardingRule>;
        get(params: Params$Resource$Globalforwardingrules$Get, options: MethodOptions | BodyResponseCallback<Schema$ForwardingRule>, callback: BodyResponseCallback<Schema$ForwardingRule>): void;
        get(params: Params$Resource$Globalforwardingrules$Get, callback: BodyResponseCallback<Schema$ForwardingRule>): void;
        get(callback: BodyResponseCallback<Schema$ForwardingRule>): void;
        /**
         * compute.globalForwardingRules.insert
         * @desc Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
         * @alias compute.globalForwardingRules.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ForwardingRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Globalforwardingrules$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Globalforwardingrules$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Globalforwardingrules$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalForwardingRules.list
         * @desc Retrieves a list of GlobalForwardingRule resources available to the specified project.
         * @alias compute.globalForwardingRules.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Globalforwardingrules$List, options?: MethodOptions): GaxiosPromise<Schema$ForwardingRuleList>;
        list(params: Params$Resource$Globalforwardingrules$List, options: MethodOptions | BodyResponseCallback<Schema$ForwardingRuleList>, callback: BodyResponseCallback<Schema$ForwardingRuleList>): void;
        list(params: Params$Resource$Globalforwardingrules$List, callback: BodyResponseCallback<Schema$ForwardingRuleList>): void;
        list(callback: BodyResponseCallback<Schema$ForwardingRuleList>): void;
        /**
         * compute.globalForwardingRules.patch
         * @desc Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
         * @alias compute.globalForwardingRules.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ForwardingRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Globalforwardingrules$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Globalforwardingrules$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Globalforwardingrules$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalForwardingRules.setLabels
         * @desc Sets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.globalForwardingRules.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Globalforwardingrules$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Globalforwardingrules$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Globalforwardingrules$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalForwardingRules.setTarget
         * @desc Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
         * @alias compute.globalForwardingRules.setTarget
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.forwardingRule Name of the ForwardingRule resource in which target is to be set.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setTarget(params?: Params$Resource$Globalforwardingrules$Settarget, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setTarget(params: Params$Resource$Globalforwardingrules$Settarget, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setTarget(params: Params$Resource$Globalforwardingrules$Settarget, callback: BodyResponseCallback<Schema$Operation>): void;
        setTarget(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalForwardingRules.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.globalForwardingRules.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Globalforwardingrules$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Globalforwardingrules$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Globalforwardingrules$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Globalforwardingrules$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource to delete.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Globalforwardingrules$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource to return.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globalforwardingrules$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ForwardingRule;
    }
    interface Params$Resource$Globalforwardingrules$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globalforwardingrules$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource to patch.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ForwardingRule;
    }
    interface Params$Resource$Globalforwardingrules$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetLabelsRequest;
    }
    interface Params$Resource$Globalforwardingrules$Settarget extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the ForwardingRule resource in which target is to be set.
         */
        forwardingRule?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetReference;
    }
    interface Params$Resource$Globalforwardingrules$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Globalnetworkendpointgroups {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.globalNetworkEndpointGroups.attachNetworkEndpoints
         * @desc Attach a network endpoint to the specified network endpoint group.
         * @alias compute.globalNetworkEndpointGroups.attachNetworkEndpoints
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().GlobalNetworkEndpointGroupsAttachEndpointsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        attachNetworkEndpoints(params?: Params$Resource$Globalnetworkendpointgroups$Attachnetworkendpoints, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        attachNetworkEndpoints(params: Params$Resource$Globalnetworkendpointgroups$Attachnetworkendpoints, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        attachNetworkEndpoints(params: Params$Resource$Globalnetworkendpointgroups$Attachnetworkendpoints, callback: BodyResponseCallback<Schema$Operation>): void;
        attachNetworkEndpoints(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalNetworkEndpointGroups.delete
         * @desc Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
         * @alias compute.globalNetworkEndpointGroups.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group to delete. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Globalnetworkendpointgroups$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Globalnetworkendpointgroups$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Globalnetworkendpointgroups$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalNetworkEndpointGroups.detachNetworkEndpoints
         * @desc Detach the network endpoint from the specified network endpoint group.
         * @alias compute.globalNetworkEndpointGroups.detachNetworkEndpoints
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().GlobalNetworkEndpointGroupsDetachEndpointsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        detachNetworkEndpoints(params?: Params$Resource$Globalnetworkendpointgroups$Detachnetworkendpoints, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        detachNetworkEndpoints(params: Params$Resource$Globalnetworkendpointgroups$Detachnetworkendpoints, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        detachNetworkEndpoints(params: Params$Resource$Globalnetworkendpointgroups$Detachnetworkendpoints, callback: BodyResponseCallback<Schema$Operation>): void;
        detachNetworkEndpoints(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalNetworkEndpointGroups.get
         * @desc Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
         * @alias compute.globalNetworkEndpointGroups.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Globalnetworkendpointgroups$Get, options?: MethodOptions): GaxiosPromise<Schema$NetworkEndpointGroup>;
        get(params: Params$Resource$Globalnetworkendpointgroups$Get, options: MethodOptions | BodyResponseCallback<Schema$NetworkEndpointGroup>, callback: BodyResponseCallback<Schema$NetworkEndpointGroup>): void;
        get(params: Params$Resource$Globalnetworkendpointgroups$Get, callback: BodyResponseCallback<Schema$NetworkEndpointGroup>): void;
        get(callback: BodyResponseCallback<Schema$NetworkEndpointGroup>): void;
        /**
         * compute.globalNetworkEndpointGroups.insert
         * @desc Creates a network endpoint group in the specified project using the parameters that are included in the request.
         * @alias compute.globalNetworkEndpointGroups.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().NetworkEndpointGroup} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Globalnetworkendpointgroups$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Globalnetworkendpointgroups$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Globalnetworkendpointgroups$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalNetworkEndpointGroups.list
         * @desc Retrieves the list of network endpoint groups that are located in the specified project.
         * @alias compute.globalNetworkEndpointGroups.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Globalnetworkendpointgroups$List, options?: MethodOptions): GaxiosPromise<Schema$NetworkEndpointGroupList>;
        list(params: Params$Resource$Globalnetworkendpointgroups$List, options: MethodOptions | BodyResponseCallback<Schema$NetworkEndpointGroupList>, callback: BodyResponseCallback<Schema$NetworkEndpointGroupList>): void;
        list(params: Params$Resource$Globalnetworkendpointgroups$List, callback: BodyResponseCallback<Schema$NetworkEndpointGroupList>): void;
        list(callback: BodyResponseCallback<Schema$NetworkEndpointGroupList>): void;
        /**
         * compute.globalNetworkEndpointGroups.listNetworkEndpoints
         * @desc Lists the network endpoints in the specified network endpoint group.
         * @alias compute.globalNetworkEndpointGroups.listNetworkEndpoints
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string} params.networkEndpointGroup The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listNetworkEndpoints(params?: Params$Resource$Globalnetworkendpointgroups$Listnetworkendpoints, options?: MethodOptions): GaxiosPromise<Schema$NetworkEndpointGroupsListNetworkEndpoints>;
        listNetworkEndpoints(params: Params$Resource$Globalnetworkendpointgroups$Listnetworkendpoints, options: MethodOptions | BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>, callback: BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>): void;
        listNetworkEndpoints(params: Params$Resource$Globalnetworkendpointgroups$Listnetworkendpoints, callback: BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>): void;
        listNetworkEndpoints(callback: BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>): void;
    }
    interface Params$Resource$Globalnetworkendpointgroups$Attachnetworkendpoints extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalNetworkEndpointGroupsAttachEndpointsRequest;
    }
    interface Params$Resource$Globalnetworkendpointgroups$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group to delete. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Globalnetworkendpointgroups$Detachnetworkendpoints extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalNetworkEndpointGroupsDetachEndpointsRequest;
    }
    interface Params$Resource$Globalnetworkendpointgroups$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globalnetworkendpointgroups$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworkEndpointGroup;
    }
    interface Params$Resource$Globalnetworkendpointgroups$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globalnetworkendpointgroups$Listnetworkendpoints extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    class Resource$Globaloperations {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.globalOperations.aggregatedList
         * @desc Retrieves an aggregated list of all operations.
         * @alias compute.globalOperations.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Globaloperations$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$OperationAggregatedList>;
        aggregatedList(params: Params$Resource$Globaloperations$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$OperationAggregatedList>, callback: BodyResponseCallback<Schema$OperationAggregatedList>): void;
        aggregatedList(params: Params$Resource$Globaloperations$Aggregatedlist, callback: BodyResponseCallback<Schema$OperationAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$OperationAggregatedList>): void;
        /**
         * compute.globalOperations.delete
         * @desc Deletes the specified Operations resource.
         * @alias compute.globalOperations.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Globaloperations$Delete, options?: MethodOptions): GaxiosPromise<void>;
        delete(params: Params$Resource$Globaloperations$Delete, options: MethodOptions | BodyResponseCallback<void>, callback: BodyResponseCallback<void>): void;
        delete(params: Params$Resource$Globaloperations$Delete, callback: BodyResponseCallback<void>): void;
        delete(callback: BodyResponseCallback<void>): void;
        /**
         * compute.globalOperations.get
         * @desc Retrieves the specified Operations resource. Gets a list of operations by making a list() request.
         * @alias compute.globalOperations.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Globaloperations$Get, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        get(params: Params$Resource$Globaloperations$Get, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        get(params: Params$Resource$Globaloperations$Get, callback: BodyResponseCallback<Schema$Operation>): void;
        get(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalOperations.list
         * @desc Retrieves a list of Operation resources contained within the specified project.
         * @alias compute.globalOperations.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Globaloperations$List, options?: MethodOptions): GaxiosPromise<Schema$OperationList>;
        list(params: Params$Resource$Globaloperations$List, options: MethodOptions | BodyResponseCallback<Schema$OperationList>, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(params: Params$Resource$Globaloperations$List, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(callback: BodyResponseCallback<Schema$OperationList>): void;
        /**
         * compute.globalOperations.wait
         * @desc Waits for the specified Operations resource until it is done or timeout, and retrieves the specified Operations resource. 1. Immediately returns when the operation is already done. 2. Waits for no more than the default deadline (2 minutes, subject to change) and then returns the current state of the operation, which may be DONE or still in progress. 3. Is best-effort: a. The server can wait less than the default deadline or zero seconds, in overload situations. b. There is no guarantee that the operation is actually done when returns. 4. User should be prepared to retry if the operation is not DONE.
         * @alias compute.globalOperations.wait
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        wait(params?: Params$Resource$Globaloperations$Wait, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        wait(params: Params$Resource$Globaloperations$Wait, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(params: Params$Resource$Globaloperations$Wait, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Globaloperations$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globaloperations$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to delete.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globaloperations$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globaloperations$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Globaloperations$Wait extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    class Resource$Globalorganizationoperations {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.globalOrganizationOperations.delete
         * @desc Deletes the specified Operations resource.
         * @alias compute.globalOrganizationOperations.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to delete.
         * @param {string=} params.parentId Parent ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Globalorganizationoperations$Delete, options?: MethodOptions): GaxiosPromise<void>;
        delete(params: Params$Resource$Globalorganizationoperations$Delete, options: MethodOptions | BodyResponseCallback<void>, callback: BodyResponseCallback<void>): void;
        delete(params: Params$Resource$Globalorganizationoperations$Delete, callback: BodyResponseCallback<void>): void;
        delete(callback: BodyResponseCallback<void>): void;
        /**
         * compute.globalOrganizationOperations.get
         * @desc Retrieves the specified Operations resource. Gets a list of operations by making a list() request.
         * @alias compute.globalOrganizationOperations.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string=} params.parentId Parent ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Globalorganizationoperations$Get, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        get(params: Params$Resource$Globalorganizationoperations$Get, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        get(params: Params$Resource$Globalorganizationoperations$Get, callback: BodyResponseCallback<Schema$Operation>): void;
        get(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.globalOrganizationOperations.list
         * @desc Retrieves a list of Operation resources contained within the specified organization.
         * @alias compute.globalOrganizationOperations.list
         * @memberOf! ()
         *
         * @param {object=} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string=} params.parentId Parent ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Globalorganizationoperations$List, options?: MethodOptions): GaxiosPromise<Schema$OperationList>;
        list(params: Params$Resource$Globalorganizationoperations$List, options: MethodOptions | BodyResponseCallback<Schema$OperationList>, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(params: Params$Resource$Globalorganizationoperations$List, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(callback: BodyResponseCallback<Schema$OperationList>): void;
        /**
         * compute.globalOrganizationOperations.wait
         * @desc Waits for the specified Operations resource until it is done or timeout, and retrieves the specified Operations resource. 1. Immediately returns when the operation is already done. 2. Waits for no more than the default deadline (2 minutes, subject to change) and then returns the current state of the operation, which may be DONE or still in progress. 3. Is best-effort: a. The server can wait less than the default deadline or zero seconds, in overload situations. b. There is no guarantee that the operation is actually done when returns. 4. User should be prepared to retry if the operation is not DONE.
         * @alias compute.globalOrganizationOperations.wait
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string=} params.parentId Parent ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        wait(params?: Params$Resource$Globalorganizationoperations$Wait, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        wait(params: Params$Resource$Globalorganizationoperations$Wait, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(params: Params$Resource$Globalorganizationoperations$Wait, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Globalorganizationoperations$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to delete.
         */
        operation?: string;
        /**
         * Parent ID for this request.
         */
        parentId?: string;
    }
    interface Params$Resource$Globalorganizationoperations$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Parent ID for this request.
         */
        parentId?: string;
    }
    interface Params$Resource$Globalorganizationoperations$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Parent ID for this request.
         */
        parentId?: string;
    }
    interface Params$Resource$Globalorganizationoperations$Wait extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Parent ID for this request.
         */
        parentId?: string;
    }
    class Resource$Healthchecks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.healthChecks.aggregatedList
         * @desc Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.
         * @alias compute.healthChecks.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Name of the project scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Healthchecks$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$HealthChecksAggregatedList>;
        aggregatedList(params: Params$Resource$Healthchecks$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$HealthChecksAggregatedList>, callback: BodyResponseCallback<Schema$HealthChecksAggregatedList>): void;
        aggregatedList(params: Params$Resource$Healthchecks$Aggregatedlist, callback: BodyResponseCallback<Schema$HealthChecksAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$HealthChecksAggregatedList>): void;
        /**
         * compute.healthChecks.delete
         * @desc Deletes the specified HealthCheck resource.
         * @alias compute.healthChecks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Healthchecks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Healthchecks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Healthchecks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.healthChecks.get
         * @desc Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
         * @alias compute.healthChecks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Healthchecks$Get, options?: MethodOptions): GaxiosPromise<Schema$HealthCheck>;
        get(params: Params$Resource$Healthchecks$Get, options: MethodOptions | BodyResponseCallback<Schema$HealthCheck>, callback: BodyResponseCallback<Schema$HealthCheck>): void;
        get(params: Params$Resource$Healthchecks$Get, callback: BodyResponseCallback<Schema$HealthCheck>): void;
        get(callback: BodyResponseCallback<Schema$HealthCheck>): void;
        /**
         * compute.healthChecks.insert
         * @desc Creates a HealthCheck resource in the specified project using the data included in the request.
         * @alias compute.healthChecks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Healthchecks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Healthchecks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Healthchecks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.healthChecks.list
         * @desc Retrieves the list of HealthCheck resources available to the specified project.
         * @alias compute.healthChecks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Healthchecks$List, options?: MethodOptions): GaxiosPromise<Schema$HealthCheckList>;
        list(params: Params$Resource$Healthchecks$List, options: MethodOptions | BodyResponseCallback<Schema$HealthCheckList>, callback: BodyResponseCallback<Schema$HealthCheckList>): void;
        list(params: Params$Resource$Healthchecks$List, callback: BodyResponseCallback<Schema$HealthCheckList>): void;
        list(callback: BodyResponseCallback<Schema$HealthCheckList>): void;
        /**
         * compute.healthChecks.patch
         * @desc Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.healthChecks.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Healthchecks$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Healthchecks$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Healthchecks$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.healthChecks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.healthChecks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Healthchecks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Healthchecks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Healthchecks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.healthChecks.update
         * @desc Updates a HealthCheck resource in the specified project using the data included in the request.
         * @alias compute.healthChecks.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Healthchecks$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Healthchecks$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Healthchecks$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Healthchecks$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Name of the project scoping this request.
         */
        project?: string;
    }
    interface Params$Resource$Healthchecks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to delete.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Healthchecks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to return.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Healthchecks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HealthCheck;
    }
    interface Params$Resource$Healthchecks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Healthchecks$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to patch.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HealthCheck;
    }
    interface Params$Resource$Healthchecks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Healthchecks$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to update.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HealthCheck;
    }
    class Resource$Httphealthchecks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.httpHealthChecks.delete
         * @desc Deletes the specified HttpHealthCheck resource.
         * @alias compute.httpHealthChecks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpHealthCheck Name of the HttpHealthCheck resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Httphealthchecks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Httphealthchecks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Httphealthchecks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.httpHealthChecks.get
         * @desc Returns the specified HttpHealthCheck resource. Gets a list of available HTTP health checks by making a list() request.
         * @alias compute.httpHealthChecks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpHealthCheck Name of the HttpHealthCheck resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Httphealthchecks$Get, options?: MethodOptions): GaxiosPromise<Schema$HttpHealthCheck>;
        get(params: Params$Resource$Httphealthchecks$Get, options: MethodOptions | BodyResponseCallback<Schema$HttpHealthCheck>, callback: BodyResponseCallback<Schema$HttpHealthCheck>): void;
        get(params: Params$Resource$Httphealthchecks$Get, callback: BodyResponseCallback<Schema$HttpHealthCheck>): void;
        get(callback: BodyResponseCallback<Schema$HttpHealthCheck>): void;
        /**
         * compute.httpHealthChecks.insert
         * @desc Creates a HttpHealthCheck resource in the specified project using the data included in the request.
         * @alias compute.httpHealthChecks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HttpHealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Httphealthchecks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Httphealthchecks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Httphealthchecks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.httpHealthChecks.list
         * @desc Retrieves the list of HttpHealthCheck resources available to the specified project.
         * @alias compute.httpHealthChecks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Httphealthchecks$List, options?: MethodOptions): GaxiosPromise<Schema$HttpHealthCheckList>;
        list(params: Params$Resource$Httphealthchecks$List, options: MethodOptions | BodyResponseCallback<Schema$HttpHealthCheckList>, callback: BodyResponseCallback<Schema$HttpHealthCheckList>): void;
        list(params: Params$Resource$Httphealthchecks$List, callback: BodyResponseCallback<Schema$HttpHealthCheckList>): void;
        list(callback: BodyResponseCallback<Schema$HttpHealthCheckList>): void;
        /**
         * compute.httpHealthChecks.patch
         * @desc Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.httpHealthChecks.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpHealthCheck Name of the HttpHealthCheck resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HttpHealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Httphealthchecks$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Httphealthchecks$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Httphealthchecks$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.httpHealthChecks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.httpHealthChecks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Httphealthchecks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Httphealthchecks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Httphealthchecks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.httpHealthChecks.update
         * @desc Updates a HttpHealthCheck resource in the specified project using the data included in the request.
         * @alias compute.httpHealthChecks.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpHealthCheck Name of the HttpHealthCheck resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HttpHealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Httphealthchecks$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Httphealthchecks$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Httphealthchecks$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Httphealthchecks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpHealthCheck resource to delete.
         */
        httpHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Httphealthchecks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpHealthCheck resource to return.
         */
        httpHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Httphealthchecks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HttpHealthCheck;
    }
    interface Params$Resource$Httphealthchecks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Httphealthchecks$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpHealthCheck resource to patch.
         */
        httpHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HttpHealthCheck;
    }
    interface Params$Resource$Httphealthchecks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Httphealthchecks$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpHealthCheck resource to update.
         */
        httpHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HttpHealthCheck;
    }
    class Resource$Httpshealthchecks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.httpsHealthChecks.delete
         * @desc Deletes the specified HttpsHealthCheck resource.
         * @alias compute.httpsHealthChecks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpsHealthCheck Name of the HttpsHealthCheck resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Httpshealthchecks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Httpshealthchecks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Httpshealthchecks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.httpsHealthChecks.get
         * @desc Returns the specified HttpsHealthCheck resource. Gets a list of available HTTPS health checks by making a list() request.
         * @alias compute.httpsHealthChecks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpsHealthCheck Name of the HttpsHealthCheck resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Httpshealthchecks$Get, options?: MethodOptions): GaxiosPromise<Schema$HttpsHealthCheck>;
        get(params: Params$Resource$Httpshealthchecks$Get, options: MethodOptions | BodyResponseCallback<Schema$HttpsHealthCheck>, callback: BodyResponseCallback<Schema$HttpsHealthCheck>): void;
        get(params: Params$Resource$Httpshealthchecks$Get, callback: BodyResponseCallback<Schema$HttpsHealthCheck>): void;
        get(callback: BodyResponseCallback<Schema$HttpsHealthCheck>): void;
        /**
         * compute.httpsHealthChecks.insert
         * @desc Creates a HttpsHealthCheck resource in the specified project using the data included in the request.
         * @alias compute.httpsHealthChecks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HttpsHealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Httpshealthchecks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Httpshealthchecks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Httpshealthchecks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.httpsHealthChecks.list
         * @desc Retrieves the list of HttpsHealthCheck resources available to the specified project.
         * @alias compute.httpsHealthChecks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Httpshealthchecks$List, options?: MethodOptions): GaxiosPromise<Schema$HttpsHealthCheckList>;
        list(params: Params$Resource$Httpshealthchecks$List, options: MethodOptions | BodyResponseCallback<Schema$HttpsHealthCheckList>, callback: BodyResponseCallback<Schema$HttpsHealthCheckList>): void;
        list(params: Params$Resource$Httpshealthchecks$List, callback: BodyResponseCallback<Schema$HttpsHealthCheckList>): void;
        list(callback: BodyResponseCallback<Schema$HttpsHealthCheckList>): void;
        /**
         * compute.httpsHealthChecks.patch
         * @desc Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.httpsHealthChecks.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpsHealthCheck Name of the HttpsHealthCheck resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HttpsHealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Httpshealthchecks$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Httpshealthchecks$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Httpshealthchecks$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.httpsHealthChecks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.httpsHealthChecks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Httpshealthchecks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Httpshealthchecks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Httpshealthchecks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.httpsHealthChecks.update
         * @desc Updates a HttpsHealthCheck resource in the specified project using the data included in the request.
         * @alias compute.httpsHealthChecks.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.httpsHealthCheck Name of the HttpsHealthCheck resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HttpsHealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Httpshealthchecks$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Httpshealthchecks$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Httpshealthchecks$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Httpshealthchecks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpsHealthCheck resource to delete.
         */
        httpsHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Httpshealthchecks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpsHealthCheck resource to return.
         */
        httpsHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Httpshealthchecks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HttpsHealthCheck;
    }
    interface Params$Resource$Httpshealthchecks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Httpshealthchecks$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpsHealthCheck resource to patch.
         */
        httpsHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HttpsHealthCheck;
    }
    interface Params$Resource$Httpshealthchecks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Httpshealthchecks$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HttpsHealthCheck resource to update.
         */
        httpsHealthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HttpsHealthCheck;
    }
    class Resource$Images {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.images.delete
         * @desc Deletes the specified image.
         * @alias compute.images.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.image Name of the image resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Images$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Images$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Images$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.images.deprecate
         * @desc Sets the deprecation status of an image.  If an empty request body is given, clears the deprecation status instead.
         * @alias compute.images.deprecate
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.image Image name.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().DeprecationStatus} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deprecate(params?: Params$Resource$Images$Deprecate, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deprecate(params: Params$Resource$Images$Deprecate, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deprecate(params: Params$Resource$Images$Deprecate, callback: BodyResponseCallback<Schema$Operation>): void;
        deprecate(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.images.get
         * @desc Returns the specified image. Gets a list of available images by making a list() request.
         * @alias compute.images.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.image Name of the image resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Images$Get, options?: MethodOptions): GaxiosPromise<Schema$Image>;
        get(params: Params$Resource$Images$Get, options: MethodOptions | BodyResponseCallback<Schema$Image>, callback: BodyResponseCallback<Schema$Image>): void;
        get(params: Params$Resource$Images$Get, callback: BodyResponseCallback<Schema$Image>): void;
        get(callback: BodyResponseCallback<Schema$Image>): void;
        /**
         * compute.images.getFromFamily
         * @desc Returns the latest image that is part of an image family and is not deprecated.
         * @alias compute.images.getFromFamily
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.family Name of the image family to search for.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getFromFamily(params?: Params$Resource$Images$Getfromfamily, options?: MethodOptions): GaxiosPromise<Schema$Image>;
        getFromFamily(params: Params$Resource$Images$Getfromfamily, options: MethodOptions | BodyResponseCallback<Schema$Image>, callback: BodyResponseCallback<Schema$Image>): void;
        getFromFamily(params: Params$Resource$Images$Getfromfamily, callback: BodyResponseCallback<Schema$Image>): void;
        getFromFamily(callback: BodyResponseCallback<Schema$Image>): void;
        /**
         * compute.images.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.images.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Images$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Images$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Images$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.images.insert
         * @desc Creates an image in the specified project using the data included in the request.
         * @alias compute.images.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {boolean=} params.forceCreate Force image creation if true.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Image} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Images$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Images$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Images$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.images.list
         * @desc Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
         * @alias compute.images.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Images$List, options?: MethodOptions): GaxiosPromise<Schema$ImageList>;
        list(params: Params$Resource$Images$List, options: MethodOptions | BodyResponseCallback<Schema$ImageList>, callback: BodyResponseCallback<Schema$ImageList>): void;
        list(params: Params$Resource$Images$List, callback: BodyResponseCallback<Schema$ImageList>): void;
        list(callback: BodyResponseCallback<Schema$ImageList>): void;
        /**
         * compute.images.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.images.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Images$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Images$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Images$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.images.setLabels
         * @desc Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.images.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Images$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Images$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Images$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.images.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.images.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Images$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Images$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Images$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Images$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the image resource to delete.
         */
        image?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Images$Deprecate extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Image name.
         */
        image?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$DeprecationStatus;
    }
    interface Params$Resource$Images$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the image resource to return.
         */
        image?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Images$Getfromfamily extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the image family to search for.
         */
        family?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Images$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Images$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Force image creation if true.
         */
        forceCreate?: boolean;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Image;
    }
    interface Params$Resource$Images$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Images$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Images$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetLabelsRequest;
    }
    interface Params$Resource$Images$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Instancegroupmanagers {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.instanceGroupManagers.abandonInstances
         * @desc Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.
         * @alias compute.instanceGroupManagers.abandonInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {().InstanceGroupManagersAbandonInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        abandonInstances(params?: Params$Resource$Instancegroupmanagers$Abandoninstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        abandonInstances(params: Params$Resource$Instancegroupmanagers$Abandoninstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        abandonInstances(params: Params$Resource$Instancegroupmanagers$Abandoninstances, callback: BodyResponseCallback<Schema$Operation>): void;
        abandonInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.aggregatedList
         * @desc Retrieves the list of managed instance groups and groups them by zone.
         * @alias compute.instanceGroupManagers.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Instancegroupmanagers$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupManagerAggregatedList>;
        aggregatedList(params: Params$Resource$Instancegroupmanagers$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupManagerAggregatedList>, callback: BodyResponseCallback<Schema$InstanceGroupManagerAggregatedList>): void;
        aggregatedList(params: Params$Resource$Instancegroupmanagers$Aggregatedlist, callback: BodyResponseCallback<Schema$InstanceGroupManagerAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$InstanceGroupManagerAggregatedList>): void;
        /**
         * compute.instanceGroupManagers.applyUpdatesToInstances
         * @desc Apply changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
         * @alias compute.instanceGroupManagers.applyUpdatesToInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group, should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the managed instance group is located. Should conform to RFC1035.
         * @param {().InstanceGroupManagersApplyUpdatesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        applyUpdatesToInstances(params?: Params$Resource$Instancegroupmanagers$Applyupdatestoinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        applyUpdatesToInstances(params: Params$Resource$Instancegroupmanagers$Applyupdatestoinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        applyUpdatesToInstances(params: Params$Resource$Instancegroupmanagers$Applyupdatestoinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        applyUpdatesToInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.createInstances
         * @desc Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
         * @alias compute.instanceGroupManagers.createInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
         * @param {().InstanceGroupManagersCreateInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        createInstances(params?: Params$Resource$Instancegroupmanagers$Createinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        createInstances(params: Params$Resource$Instancegroupmanagers$Createinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        createInstances(params: Params$Resource$Instancegroupmanagers$Createinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        createInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.delete
         * @desc Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read  Deleting an instance group for more information.
         * @alias compute.instanceGroupManagers.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Instancegroupmanagers$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Instancegroupmanagers$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Instancegroupmanagers$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.deleteInstances
         * @desc Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.
         * @alias compute.instanceGroupManagers.deleteInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {().InstanceGroupManagersDeleteInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deleteInstances(params?: Params$Resource$Instancegroupmanagers$Deleteinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deleteInstances(params: Params$Resource$Instancegroupmanagers$Deleteinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteInstances(params: Params$Resource$Instancegroupmanagers$Deleteinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.deletePerInstanceConfigs
         * @desc Deletes selected per-instance configs for the managed instance group.
         * @alias compute.instanceGroupManagers.deletePerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
         * @param {().InstanceGroupManagersDeletePerInstanceConfigsReq} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deletePerInstanceConfigs(params?: Params$Resource$Instancegroupmanagers$Deleteperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deletePerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Deleteperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deletePerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Deleteperinstanceconfigs, callback: BodyResponseCallback<Schema$Operation>): void;
        deletePerInstanceConfigs(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.get
         * @desc Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.
         * @alias compute.instanceGroupManagers.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Instancegroupmanagers$Get, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupManager>;
        get(params: Params$Resource$Instancegroupmanagers$Get, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupManager>, callback: BodyResponseCallback<Schema$InstanceGroupManager>): void;
        get(params: Params$Resource$Instancegroupmanagers$Get, callback: BodyResponseCallback<Schema$InstanceGroupManager>): void;
        get(callback: BodyResponseCallback<Schema$InstanceGroupManager>): void;
        /**
         * compute.instanceGroupManagers.insert
         * @desc Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.  A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
         * @alias compute.instanceGroupManagers.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where you want to create the managed instance group.
         * @param {().InstanceGroupManager} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Instancegroupmanagers$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Instancegroupmanagers$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Instancegroupmanagers$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.list
         * @desc Retrieves a list of managed instance groups that are contained within the specified project and zone.
         * @alias compute.instanceGroupManagers.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Instancegroupmanagers$List, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupManagerList>;
        list(params: Params$Resource$Instancegroupmanagers$List, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupManagerList>, callback: BodyResponseCallback<Schema$InstanceGroupManagerList>): void;
        list(params: Params$Resource$Instancegroupmanagers$List, callback: BodyResponseCallback<Schema$InstanceGroupManagerList>): void;
        list(callback: BodyResponseCallback<Schema$InstanceGroupManagerList>): void;
        /**
         * compute.instanceGroupManagers.listErrors
         * @desc Lists all errors thrown by actions on instances for a given managed instance group.
         * @alias compute.instanceGroupManagers.listErrors
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroupManager The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|[1-9][0-9]{0,19}.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listErrors(params?: Params$Resource$Instancegroupmanagers$Listerrors, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupManagersListErrorsResponse>;
        listErrors(params: Params$Resource$Instancegroupmanagers$Listerrors, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupManagersListErrorsResponse>, callback: BodyResponseCallback<Schema$InstanceGroupManagersListErrorsResponse>): void;
        listErrors(params: Params$Resource$Instancegroupmanagers$Listerrors, callback: BodyResponseCallback<Schema$InstanceGroupManagersListErrorsResponse>): void;
        listErrors(callback: BodyResponseCallback<Schema$InstanceGroupManagersListErrorsResponse>): void;
        /**
         * compute.instanceGroupManagers.listManagedInstances
         * @desc Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action.
         * @alias compute.instanceGroupManagers.listManagedInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.order_by Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listManagedInstances(params?: Params$Resource$Instancegroupmanagers$Listmanagedinstances, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupManagersListManagedInstancesResponse>;
        listManagedInstances(params: Params$Resource$Instancegroupmanagers$Listmanagedinstances, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupManagersListManagedInstancesResponse>, callback: BodyResponseCallback<Schema$InstanceGroupManagersListManagedInstancesResponse>): void;
        listManagedInstances(params: Params$Resource$Instancegroupmanagers$Listmanagedinstances, callback: BodyResponseCallback<Schema$InstanceGroupManagersListManagedInstancesResponse>): void;
        listManagedInstances(callback: BodyResponseCallback<Schema$InstanceGroupManagersListManagedInstancesResponse>): void;
        /**
         * compute.instanceGroupManagers.listPerInstanceConfigs
         * @desc Lists all of the per-instance configs defined for the managed instance group.
         * @alias compute.instanceGroupManagers.listPerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listPerInstanceConfigs(params?: Params$Resource$Instancegroupmanagers$Listperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupManagersListPerInstanceConfigsResp>;
        listPerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Listperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupManagersListPerInstanceConfigsResp>, callback: BodyResponseCallback<Schema$InstanceGroupManagersListPerInstanceConfigsResp>): void;
        listPerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Listperinstanceconfigs, callback: BodyResponseCallback<Schema$InstanceGroupManagersListPerInstanceConfigsResp>): void;
        listPerInstanceConfigs(callback: BodyResponseCallback<Schema$InstanceGroupManagersListPerInstanceConfigsResp>): void;
        /**
         * compute.instanceGroupManagers.patch
         * @desc Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.instanceGroupManagers.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the instance group manager.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where you want to create the managed instance group.
         * @param {().InstanceGroupManager} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Instancegroupmanagers$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Instancegroupmanagers$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Instancegroupmanagers$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.patchPerInstanceConfigs
         * @desc Insert or patch (for the ones that already exist) per-instance configs for the managed instance group. perInstanceConfig.instance serves as a key used to distinguish whether to perform insert or patch.
         * @alias compute.instanceGroupManagers.patchPerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
         * @param {().InstanceGroupManagersPatchPerInstanceConfigsReq} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patchPerInstanceConfigs(params?: Params$Resource$Instancegroupmanagers$Patchperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patchPerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Patchperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patchPerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Patchperinstanceconfigs, callback: BodyResponseCallback<Schema$Operation>): void;
        patchPerInstanceConfigs(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.recreateInstances
         * @desc Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.
         * @alias compute.instanceGroupManagers.recreateInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {().InstanceGroupManagersRecreateInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        recreateInstances(params?: Params$Resource$Instancegroupmanagers$Recreateinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        recreateInstances(params: Params$Resource$Instancegroupmanagers$Recreateinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        recreateInstances(params: Params$Resource$Instancegroupmanagers$Recreateinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        recreateInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.resize
         * @desc Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.  When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including:  + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance.  This list is subject to change.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
         * @alias compute.instanceGroupManagers.resize
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {integer} params.size The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter.
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        resize(params?: Params$Resource$Instancegroupmanagers$Resize, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        resize(params: Params$Resource$Instancegroupmanagers$Resize, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(params: Params$Resource$Instancegroupmanagers$Resize, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.resizeAdvanced
         * @desc Resizes the managed instance group with advanced configuration options like disabling creation retries. This is an extended version of the resize method.  If you increase the size of the instance group, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating, creatingWithoutRetries, or deleting actions with the get or listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
         * @alias compute.instanceGroupManagers.resizeAdvanced
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {().InstanceGroupManagersResizeAdvancedRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        resizeAdvanced(params?: Params$Resource$Instancegroupmanagers$Resizeadvanced, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        resizeAdvanced(params: Params$Resource$Instancegroupmanagers$Resizeadvanced, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        resizeAdvanced(params: Params$Resource$Instancegroupmanagers$Resizeadvanced, callback: BodyResponseCallback<Schema$Operation>): void;
        resizeAdvanced(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.setAutoHealingPolicies
         * @desc Modifies the autohealing policies. [Deprecated] This method is deprecated. Please use Patch instead.
         * @alias compute.instanceGroupManagers.setAutoHealingPolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the instance group manager.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {().InstanceGroupManagersSetAutoHealingRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setAutoHealingPolicies(params?: Params$Resource$Instancegroupmanagers$Setautohealingpolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setAutoHealingPolicies(params: Params$Resource$Instancegroupmanagers$Setautohealingpolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setAutoHealingPolicies(params: Params$Resource$Instancegroupmanagers$Setautohealingpolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        setAutoHealingPolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.setInstanceTemplate
         * @desc Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you recreate them.
         * @alias compute.instanceGroupManagers.setInstanceTemplate
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {().InstanceGroupManagersSetInstanceTemplateRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setInstanceTemplate(params?: Params$Resource$Instancegroupmanagers$Setinstancetemplate, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setInstanceTemplate(params: Params$Resource$Instancegroupmanagers$Setinstancetemplate, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setInstanceTemplate(params: Params$Resource$Instancegroupmanagers$Setinstancetemplate, callback: BodyResponseCallback<Schema$Operation>): void;
        setInstanceTemplate(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.setTargetPools
         * @desc Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
         * @alias compute.instanceGroupManagers.setTargetPools
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located.
         * @param {().InstanceGroupManagersSetTargetPoolsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setTargetPools(params?: Params$Resource$Instancegroupmanagers$Settargetpools, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setTargetPools(params: Params$Resource$Instancegroupmanagers$Settargetpools, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setTargetPools(params: Params$Resource$Instancegroupmanagers$Settargetpools, callback: BodyResponseCallback<Schema$Operation>): void;
        setTargetPools(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.instanceGroupManagers.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Instancegroupmanagers$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Instancegroupmanagers$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Instancegroupmanagers$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.instanceGroupManagers.update
         * @desc Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listManagedInstances method.
         * @alias compute.instanceGroupManagers.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the instance group manager.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where you want to create the managed instance group.
         * @param {().InstanceGroupManager} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Instancegroupmanagers$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Instancegroupmanagers$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Instancegroupmanagers$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroupManagers.updatePerInstanceConfigs
         * @desc Insert or update (for the ones that already exist) per-instance configs for the managed instance group. perInstanceConfig.instance serves as a key used to distinguish whether to perform insert or patch.
         * @alias compute.instanceGroupManagers.updatePerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the managed instance group is located. It should conform to RFC1035.
         * @param {().InstanceGroupManagersUpdatePerInstanceConfigsReq} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updatePerInstanceConfigs(params?: Params$Resource$Instancegroupmanagers$Updateperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updatePerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Updateperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updatePerInstanceConfigs(params: Params$Resource$Instancegroupmanagers$Updateperinstanceconfigs, callback: BodyResponseCallback<Schema$Operation>): void;
        updatePerInstanceConfigs(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Instancegroupmanagers$Abandoninstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersAbandonInstancesRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Applyupdatestoinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group, should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the managed instance group is located. Should conform to RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersApplyUpdatesRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Createinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located. It should conform to RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersCreateInstancesRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group to delete.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Deleteinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersDeleteInstancesRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Deleteperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the managed instance group is located. It should conform to RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersDeletePerInstanceConfigsReq;
    }
    interface Params$Resource$Instancegroupmanagers$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where you want to create the managed instance group.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManager;
    }
    interface Params$Resource$Instancegroupmanagers$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Listerrors extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|[1-9][0-9]{0,19}.
         */
        instanceGroupManager?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the managed instance group is located. It should conform to RFC1035.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Listmanagedinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        order_by?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Listperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the managed instance group is located. It should conform to RFC1035.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group manager.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where you want to create the managed instance group.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManager;
    }
    interface Params$Resource$Instancegroupmanagers$Patchperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located. It should conform to RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersPatchPerInstanceConfigsReq;
    }
    interface Params$Resource$Instancegroupmanagers$Recreateinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersRecreateInstancesRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Resize extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter.
         */
        size?: number;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroupmanagers$Resizeadvanced extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersResizeAdvancedRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Setautohealingpolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group manager.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersSetAutoHealingRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Setinstancetemplate extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersSetInstanceTemplateRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Settargetpools extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersSetTargetPoolsRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Instancegroupmanagers$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group manager.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where you want to create the managed instance group.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManager;
    }
    interface Params$Resource$Instancegroupmanagers$Updateperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the managed instance group is located. It should conform to RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManagersUpdatePerInstanceConfigsReq;
    }
    class Resource$Instancegroups {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.instanceGroups.addInstances
         * @desc Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read  Adding instances for more information.
         * @alias compute.instanceGroups.addInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroup The name of the instance group where you are adding instances.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the instance group is located.
         * @param {().InstanceGroupsAddInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addInstances(params?: Params$Resource$Instancegroups$Addinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addInstances(params: Params$Resource$Instancegroups$Addinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addInstances(params: Params$Resource$Instancegroups$Addinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        addInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroups.aggregatedList
         * @desc Retrieves the list of instance groups and sorts them by zone.
         * @alias compute.instanceGroups.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Instancegroups$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupAggregatedList>;
        aggregatedList(params: Params$Resource$Instancegroups$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupAggregatedList>, callback: BodyResponseCallback<Schema$InstanceGroupAggregatedList>): void;
        aggregatedList(params: Params$Resource$Instancegroups$Aggregatedlist, callback: BodyResponseCallback<Schema$InstanceGroupAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$InstanceGroupAggregatedList>): void;
        /**
         * compute.instanceGroups.delete
         * @desc Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read  Deleting an instance group for more information.
         * @alias compute.instanceGroups.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroup The name of the instance group to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Instancegroups$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Instancegroups$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Instancegroups$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroups.get
         * @desc Returns the specified instance group. Gets a list of available instance groups by making a list() request.
         * @alias compute.instanceGroups.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroup The name of the instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Instancegroups$Get, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroup>;
        get(params: Params$Resource$Instancegroups$Get, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroup>, callback: BodyResponseCallback<Schema$InstanceGroup>): void;
        get(params: Params$Resource$Instancegroups$Get, callback: BodyResponseCallback<Schema$InstanceGroup>): void;
        get(callback: BodyResponseCallback<Schema$InstanceGroup>): void;
        /**
         * compute.instanceGroups.insert
         * @desc Creates an instance group in the specified project using the parameters that are included in the request.
         * @alias compute.instanceGroups.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where you want to create the instance group.
         * @param {().InstanceGroup} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Instancegroups$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Instancegroups$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Instancegroups$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroups.list
         * @desc Retrieves the list of instance groups that are located in the specified project and zone.
         * @alias compute.instanceGroups.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the instance group is located.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Instancegroups$List, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupList>;
        list(params: Params$Resource$Instancegroups$List, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupList>, callback: BodyResponseCallback<Schema$InstanceGroupList>): void;
        list(params: Params$Resource$Instancegroups$List, callback: BodyResponseCallback<Schema$InstanceGroupList>): void;
        list(callback: BodyResponseCallback<Schema$InstanceGroupList>): void;
        /**
         * compute.instanceGroups.listInstances
         * @desc Lists the instances in the specified instance group.
         * @alias compute.instanceGroups.listInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroup The name of the instance group from which you want to generate a list of included instances.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the instance group is located.
         * @param {().InstanceGroupsListInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listInstances(params?: Params$Resource$Instancegroups$Listinstances, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupsListInstances>;
        listInstances(params: Params$Resource$Instancegroups$Listinstances, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupsListInstances>, callback: BodyResponseCallback<Schema$InstanceGroupsListInstances>): void;
        listInstances(params: Params$Resource$Instancegroups$Listinstances, callback: BodyResponseCallback<Schema$InstanceGroupsListInstances>): void;
        listInstances(callback: BodyResponseCallback<Schema$InstanceGroupsListInstances>): void;
        /**
         * compute.instanceGroups.removeInstances
         * @desc Removes one or more instances from the specified instance group, but does not delete those instances.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
         * @alias compute.instanceGroups.removeInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroup The name of the instance group where the specified instances will be removed.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the instance group is located.
         * @param {().InstanceGroupsRemoveInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeInstances(params?: Params$Resource$Instancegroups$Removeinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeInstances(params: Params$Resource$Instancegroups$Removeinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeInstances(params: Params$Resource$Instancegroups$Removeinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        removeInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroups.setNamedPorts
         * @desc Sets the named ports for the specified instance group.
         * @alias compute.instanceGroups.setNamedPorts
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroup The name of the instance group where the named ports are updated.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the instance group is located.
         * @param {().InstanceGroupsSetNamedPortsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setNamedPorts(params?: Params$Resource$Instancegroups$Setnamedports, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setNamedPorts(params: Params$Resource$Instancegroups$Setnamedports, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setNamedPorts(params: Params$Resource$Instancegroups$Setnamedports, callback: BodyResponseCallback<Schema$Operation>): void;
        setNamedPorts(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceGroups.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.instanceGroups.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Instancegroups$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Instancegroups$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Instancegroups$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Instancegroups$Addinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group where you are adding instances.
         */
        instanceGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupsAddInstancesRequest;
    }
    interface Params$Resource$Instancegroups$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Instancegroups$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group to delete.
         */
        instanceGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroups$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group.
         */
        instanceGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroups$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where you want to create the instance group.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroup;
    }
    interface Params$Resource$Instancegroups$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the instance group is located.
         */
        zone?: string;
    }
    interface Params$Resource$Instancegroups$Listinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The name of the instance group from which you want to generate a list of included instances.
         */
        instanceGroup?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupsListInstancesRequest;
    }
    interface Params$Resource$Instancegroups$Removeinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group where the specified instances will be removed.
         */
        instanceGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupsRemoveInstancesRequest;
    }
    interface Params$Resource$Instancegroups$Setnamedports extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group where the named ports are updated.
         */
        instanceGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the instance group is located.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupsSetNamedPortsRequest;
    }
    interface Params$Resource$Instancegroups$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Instances {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.instances.addAccessConfig
         * @desc Adds an access config to an instance's network interface.
         * @alias compute.instances.addAccessConfig
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.networkInterface The name of the network interface to add to this instance.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().AccessConfig} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addAccessConfig(params?: Params$Resource$Instances$Addaccessconfig, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addAccessConfig(params: Params$Resource$Instances$Addaccessconfig, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addAccessConfig(params: Params$Resource$Instances$Addaccessconfig, callback: BodyResponseCallback<Schema$Operation>): void;
        addAccessConfig(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.addResourcePolicies
         * @desc Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
         * @alias compute.instances.addResourcePolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesAddResourcePoliciesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addResourcePolicies(params?: Params$Resource$Instances$Addresourcepolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addResourcePolicies(params: Params$Resource$Instances$Addresourcepolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addResourcePolicies(params: Params$Resource$Instances$Addresourcepolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        addResourcePolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.aggregatedList
         * @desc Retrieves aggregated list of all of the instances in your project across all regions and zones.
         * @alias compute.instances.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Instances$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$InstanceAggregatedList>;
        aggregatedList(params: Params$Resource$Instances$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$InstanceAggregatedList>, callback: BodyResponseCallback<Schema$InstanceAggregatedList>): void;
        aggregatedList(params: Params$Resource$Instances$Aggregatedlist, callback: BodyResponseCallback<Schema$InstanceAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$InstanceAggregatedList>): void;
        /**
         * compute.instances.attachDisk
         * @desc Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
         * @alias compute.instances.attachDisk
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {boolean=} params.forceAttach Whether to force attach the disk even if it's currently attached to another instance.
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().AttachedDisk} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        attachDisk(params?: Params$Resource$Instances$Attachdisk, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        attachDisk(params: Params$Resource$Instances$Attachdisk, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        attachDisk(params: Params$Resource$Instances$Attachdisk, callback: BodyResponseCallback<Schema$Operation>): void;
        attachDisk(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.delete
         * @desc Deletes the specified Instance resource. For more information, see Stopping or Deleting an Instance.
         * @alias compute.instances.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Instances$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Instances$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Instances$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.deleteAccessConfig
         * @desc Deletes an access config from an instance's network interface.
         * @alias compute.instances.deleteAccessConfig
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.accessConfig The name of the access config to delete.
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.networkInterface The name of the network interface.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deleteAccessConfig(params?: Params$Resource$Instances$Deleteaccessconfig, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deleteAccessConfig(params: Params$Resource$Instances$Deleteaccessconfig, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteAccessConfig(params: Params$Resource$Instances$Deleteaccessconfig, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteAccessConfig(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.detachDisk
         * @desc Detaches a disk from an instance.
         * @alias compute.instances.detachDisk
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.deviceName The device name of the disk to detach. Make a get() request on the instance to view currently attached disks and device names.
         * @param {string} params.instance Instance name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        detachDisk(params?: Params$Resource$Instances$Detachdisk, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        detachDisk(params: Params$Resource$Instances$Detachdisk, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        detachDisk(params: Params$Resource$Instances$Detachdisk, callback: BodyResponseCallback<Schema$Operation>): void;
        detachDisk(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.get
         * @desc Returns the specified Instance resource. Gets a list of available instances by making a list() request.
         * @alias compute.instances.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Instances$Get, options?: MethodOptions): GaxiosPromise<Schema$Instance>;
        get(params: Params$Resource$Instances$Get, options: MethodOptions | BodyResponseCallback<Schema$Instance>, callback: BodyResponseCallback<Schema$Instance>): void;
        get(params: Params$Resource$Instances$Get, callback: BodyResponseCallback<Schema$Instance>): void;
        get(callback: BodyResponseCallback<Schema$Instance>): void;
        /**
         * compute.instances.getEffectiveFirewalls
         * @desc Returns effective firewalls applied to an interface of the instance.
         * @alias compute.instances.getEffectiveFirewalls
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.networkInterface The name of the network interface to get the effective firewalls.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getEffectiveFirewalls(params?: Params$Resource$Instances$Geteffectivefirewalls, options?: MethodOptions): GaxiosPromise<Schema$InstancesGetEffectiveFirewallsResponse>;
        getEffectiveFirewalls(params: Params$Resource$Instances$Geteffectivefirewalls, options: MethodOptions | BodyResponseCallback<Schema$InstancesGetEffectiveFirewallsResponse>, callback: BodyResponseCallback<Schema$InstancesGetEffectiveFirewallsResponse>): void;
        getEffectiveFirewalls(params: Params$Resource$Instances$Geteffectivefirewalls, callback: BodyResponseCallback<Schema$InstancesGetEffectiveFirewallsResponse>): void;
        getEffectiveFirewalls(callback: BodyResponseCallback<Schema$InstancesGetEffectiveFirewallsResponse>): void;
        /**
         * compute.instances.getGuestAttributes
         * @desc Returns the specified guest attributes entry.
         * @alias compute.instances.getGuestAttributes
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.queryPath Specifies the guest attributes path to be queried.
         * @param {string=} params.variableKey Specifies the key for the guest attributes entry.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getGuestAttributes(params?: Params$Resource$Instances$Getguestattributes, options?: MethodOptions): GaxiosPromise<Schema$GuestAttributes>;
        getGuestAttributes(params: Params$Resource$Instances$Getguestattributes, options: MethodOptions | BodyResponseCallback<Schema$GuestAttributes>, callback: BodyResponseCallback<Schema$GuestAttributes>): void;
        getGuestAttributes(params: Params$Resource$Instances$Getguestattributes, callback: BodyResponseCallback<Schema$GuestAttributes>): void;
        getGuestAttributes(callback: BodyResponseCallback<Schema$GuestAttributes>): void;
        /**
         * compute.instances.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.instances.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Instances$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Instances$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Instances$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.instances.getSerialPortOutput
         * @desc Returns the last 1 MB of serial port output from the specified instance.
         * @alias compute.instances.getSerialPortOutput
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {integer=} params.port Specifies which COM or serial port to retrieve data from.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.start Returns output starting from a specific byte position. Use this to page through output when the output is too large to return in a single request. For the initial request, leave this field unspecified. For subsequent calls, this field should be set to the next value returned in the previous call.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getSerialPortOutput(params?: Params$Resource$Instances$Getserialportoutput, options?: MethodOptions): GaxiosPromise<Schema$SerialPortOutput>;
        getSerialPortOutput(params: Params$Resource$Instances$Getserialportoutput, options: MethodOptions | BodyResponseCallback<Schema$SerialPortOutput>, callback: BodyResponseCallback<Schema$SerialPortOutput>): void;
        getSerialPortOutput(params: Params$Resource$Instances$Getserialportoutput, callback: BodyResponseCallback<Schema$SerialPortOutput>): void;
        getSerialPortOutput(callback: BodyResponseCallback<Schema$SerialPortOutput>): void;
        /**
         * compute.instances.getShieldedInstanceIdentity
         * @desc Returns the Shielded Instance Identity of an instance
         * @alias compute.instances.getShieldedInstanceIdentity
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name or id of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getShieldedInstanceIdentity(params?: Params$Resource$Instances$Getshieldedinstanceidentity, options?: MethodOptions): GaxiosPromise<Schema$ShieldedInstanceIdentity>;
        getShieldedInstanceIdentity(params: Params$Resource$Instances$Getshieldedinstanceidentity, options: MethodOptions | BodyResponseCallback<Schema$ShieldedInstanceIdentity>, callback: BodyResponseCallback<Schema$ShieldedInstanceIdentity>): void;
        getShieldedInstanceIdentity(params: Params$Resource$Instances$Getshieldedinstanceidentity, callback: BodyResponseCallback<Schema$ShieldedInstanceIdentity>): void;
        getShieldedInstanceIdentity(callback: BodyResponseCallback<Schema$ShieldedInstanceIdentity>): void;
        /**
         * compute.instances.getShieldedVmIdentity
         * @desc Returns the Shielded VM Identity of an instance
         * @alias compute.instances.getShieldedVmIdentity
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getShieldedVmIdentity(params?: Params$Resource$Instances$Getshieldedvmidentity, options?: MethodOptions): GaxiosPromise<Schema$ShieldedVmIdentity>;
        getShieldedVmIdentity(params: Params$Resource$Instances$Getshieldedvmidentity, options: MethodOptions | BodyResponseCallback<Schema$ShieldedVmIdentity>, callback: BodyResponseCallback<Schema$ShieldedVmIdentity>): void;
        getShieldedVmIdentity(params: Params$Resource$Instances$Getshieldedvmidentity, callback: BodyResponseCallback<Schema$ShieldedVmIdentity>): void;
        getShieldedVmIdentity(callback: BodyResponseCallback<Schema$ShieldedVmIdentity>): void;
        /**
         * compute.instances.insert
         * @desc Creates an instance resource in the specified project using the data included in the request.
         * @alias compute.instances.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string=} params.sourceInstanceTemplate Specifies instance template to create the instance.  This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template:   - https://www.googleapis.com/compute/v1/projects/project/global/instanceTemplates/instanceTemplate  - projects/project/global/instanceTemplates/instanceTemplate  - global/instanceTemplates/instanceTemplate
         * @param {string=} params.sourceMachineImage Specifies instance machine to create the instance.  This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template:   - https://www.googleapis.com/compute/v1/projects/project/global/global/machineImages/machineImage  - projects/project/global/global/machineImages/machineImage  - global/machineImages/machineImage
         * @param {string} params.zone The name of the zone for this request.
         * @param {().Instance} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Instances$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Instances$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Instances$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.list
         * @desc Retrieves the list of instances contained within the specified zone.
         * @alias compute.instances.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Instances$List, options?: MethodOptions): GaxiosPromise<Schema$InstanceList>;
        list(params: Params$Resource$Instances$List, options: MethodOptions | BodyResponseCallback<Schema$InstanceList>, callback: BodyResponseCallback<Schema$InstanceList>): void;
        list(params: Params$Resource$Instances$List, callback: BodyResponseCallback<Schema$InstanceList>): void;
        list(callback: BodyResponseCallback<Schema$InstanceList>): void;
        /**
         * compute.instances.listReferrers
         * @desc Retrieves the list of referrers to instances contained within the specified zone. For more information, read Viewing Referrers to VM Instances.
         * @alias compute.instances.listReferrers
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instance Name of the target instance scoping this request, or '-' if the request should span over all instances in the container.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listReferrers(params?: Params$Resource$Instances$Listreferrers, options?: MethodOptions): GaxiosPromise<Schema$InstanceListReferrers>;
        listReferrers(params: Params$Resource$Instances$Listreferrers, options: MethodOptions | BodyResponseCallback<Schema$InstanceListReferrers>, callback: BodyResponseCallback<Schema$InstanceListReferrers>): void;
        listReferrers(params: Params$Resource$Instances$Listreferrers, callback: BodyResponseCallback<Schema$InstanceListReferrers>): void;
        listReferrers(callback: BodyResponseCallback<Schema$InstanceListReferrers>): void;
        /**
         * compute.instances.removeResourcePolicies
         * @desc Removes resource policies from an instance.
         * @alias compute.instances.removeResourcePolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesRemoveResourcePoliciesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeResourcePolicies(params?: Params$Resource$Instances$Removeresourcepolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeResourcePolicies(params: Params$Resource$Instances$Removeresourcepolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeResourcePolicies(params: Params$Resource$Instances$Removeresourcepolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        removeResourcePolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.reset
         * @desc Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.
         * @alias compute.instances.reset
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        reset(params?: Params$Resource$Instances$Reset, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        reset(params: Params$Resource$Instances$Reset, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        reset(params: Params$Resource$Instances$Reset, callback: BodyResponseCallback<Schema$Operation>): void;
        reset(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.resume
         * @desc Resumes an instance that was suspended using the instances().suspend method.
         * @alias compute.instances.resume
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance resource to resume.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesResumeRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        resume(params?: Params$Resource$Instances$Resume, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        resume(params: Params$Resource$Instances$Resume, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        resume(params: Params$Resource$Instances$Resume, callback: BodyResponseCallback<Schema$Operation>): void;
        resume(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setDeletionProtection
         * @desc Sets deletion protection on the instance.
         * @alias compute.instances.setDeletionProtection
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {boolean=} params.deletionProtection Whether the resource should be protected against deletion.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setDeletionProtection(params?: Params$Resource$Instances$Setdeletionprotection, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setDeletionProtection(params: Params$Resource$Instances$Setdeletionprotection, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setDeletionProtection(params: Params$Resource$Instances$Setdeletionprotection, callback: BodyResponseCallback<Schema$Operation>): void;
        setDeletionProtection(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setDiskAutoDelete
         * @desc Sets the auto-delete flag for a disk attached to an instance.
         * @alias compute.instances.setDiskAutoDelete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {boolean} params.autoDelete Whether to auto-delete the disk when the instance is deleted.
         * @param {string} params.deviceName The device name of the disk to modify. Make a get() request on the instance to view currently attached disks and device names.
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setDiskAutoDelete(params?: Params$Resource$Instances$Setdiskautodelete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setDiskAutoDelete(params: Params$Resource$Instances$Setdiskautodelete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setDiskAutoDelete(params: Params$Resource$Instances$Setdiskautodelete, callback: BodyResponseCallback<Schema$Operation>): void;
        setDiskAutoDelete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.instances.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ZoneSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Instances$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Instances$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Instances$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.instances.setLabels
         * @desc Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.instances.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Instances$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Instances$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Instances$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setMachineResources
         * @desc Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
         * @alias compute.instances.setMachineResources
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesSetMachineResourcesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setMachineResources(params?: Params$Resource$Instances$Setmachineresources, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setMachineResources(params: Params$Resource$Instances$Setmachineresources, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setMachineResources(params: Params$Resource$Instances$Setmachineresources, callback: BodyResponseCallback<Schema$Operation>): void;
        setMachineResources(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setMachineType
         * @desc Changes the machine type for a stopped instance to the machine type specified in the request.
         * @alias compute.instances.setMachineType
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesSetMachineTypeRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setMachineType(params?: Params$Resource$Instances$Setmachinetype, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setMachineType(params: Params$Resource$Instances$Setmachinetype, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setMachineType(params: Params$Resource$Instances$Setmachinetype, callback: BodyResponseCallback<Schema$Operation>): void;
        setMachineType(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setMetadata
         * @desc Sets metadata for the specified instance to the data included in the request.
         * @alias compute.instances.setMetadata
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().Metadata} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setMetadata(params?: Params$Resource$Instances$Setmetadata, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setMetadata(params: Params$Resource$Instances$Setmetadata, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setMetadata(params: Params$Resource$Instances$Setmetadata, callback: BodyResponseCallback<Schema$Operation>): void;
        setMetadata(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setMinCpuPlatform
         * @desc Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
         * @alias compute.instances.setMinCpuPlatform
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesSetMinCpuPlatformRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setMinCpuPlatform(params?: Params$Resource$Instances$Setmincpuplatform, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setMinCpuPlatform(params: Params$Resource$Instances$Setmincpuplatform, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setMinCpuPlatform(params: Params$Resource$Instances$Setmincpuplatform, callback: BodyResponseCallback<Schema$Operation>): void;
        setMinCpuPlatform(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setName
         * @desc Sets name of an instance.
         * @alias compute.instances.setName
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesSetNameRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setName(params?: Params$Resource$Instances$Setname, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setName(params: Params$Resource$Instances$Setname, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setName(params: Params$Resource$Instances$Setname, callback: BodyResponseCallback<Schema$Operation>): void;
        setName(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setScheduling
         * @desc Sets an instance's scheduling options.
         * @alias compute.instances.setScheduling
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Instance name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().Scheduling} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setScheduling(params?: Params$Resource$Instances$Setscheduling, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setScheduling(params: Params$Resource$Instances$Setscheduling, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setScheduling(params: Params$Resource$Instances$Setscheduling, callback: BodyResponseCallback<Schema$Operation>): void;
        setScheduling(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setServiceAccount
         * @desc Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
         * @alias compute.instances.setServiceAccount
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance resource to start.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesSetServiceAccountRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setServiceAccount(params?: Params$Resource$Instances$Setserviceaccount, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setServiceAccount(params: Params$Resource$Instances$Setserviceaccount, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setServiceAccount(params: Params$Resource$Instances$Setserviceaccount, callback: BodyResponseCallback<Schema$Operation>): void;
        setServiceAccount(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setShieldedInstanceIntegrityPolicy
         * @desc Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.instances.setShieldedInstanceIntegrityPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name or id of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ShieldedInstanceIntegrityPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setShieldedInstanceIntegrityPolicy(params?: Params$Resource$Instances$Setshieldedinstanceintegritypolicy, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setShieldedInstanceIntegrityPolicy(params: Params$Resource$Instances$Setshieldedinstanceintegritypolicy, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setShieldedInstanceIntegrityPolicy(params: Params$Resource$Instances$Setshieldedinstanceintegritypolicy, callback: BodyResponseCallback<Schema$Operation>): void;
        setShieldedInstanceIntegrityPolicy(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setShieldedVmIntegrityPolicy
         * @desc Sets the Shielded VM integrity policy for a VM instance. You can only use this method on a running VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.instances.setShieldedVmIntegrityPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ShieldedVmIntegrityPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setShieldedVmIntegrityPolicy(params?: Params$Resource$Instances$Setshieldedvmintegritypolicy, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setShieldedVmIntegrityPolicy(params: Params$Resource$Instances$Setshieldedvmintegritypolicy, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setShieldedVmIntegrityPolicy(params: Params$Resource$Instances$Setshieldedvmintegritypolicy, callback: BodyResponseCallback<Schema$Operation>): void;
        setShieldedVmIntegrityPolicy(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.setTags
         * @desc Sets network tags for the specified instance to the data included in the request.
         * @alias compute.instances.setTags
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().Tags} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setTags(params?: Params$Resource$Instances$Settags, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setTags(params: Params$Resource$Instances$Settags, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setTags(params: Params$Resource$Instances$Settags, callback: BodyResponseCallback<Schema$Operation>): void;
        setTags(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.simulateMaintenanceEvent
         * @desc Simulates a maintenance event on the instance.
         * @alias compute.instances.simulateMaintenanceEvent
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        simulateMaintenanceEvent(params?: Params$Resource$Instances$Simulatemaintenanceevent, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        simulateMaintenanceEvent(params: Params$Resource$Instances$Simulatemaintenanceevent, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        simulateMaintenanceEvent(params: Params$Resource$Instances$Simulatemaintenanceevent, callback: BodyResponseCallback<Schema$Operation>): void;
        simulateMaintenanceEvent(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.start
         * @desc Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
         * @alias compute.instances.start
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance resource to start.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        start(params?: Params$Resource$Instances$Start, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        start(params: Params$Resource$Instances$Start, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        start(params: Params$Resource$Instances$Start, callback: BodyResponseCallback<Schema$Operation>): void;
        start(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.startWithEncryptionKey
         * @desc Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
         * @alias compute.instances.startWithEncryptionKey
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance resource to start.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().InstancesStartWithEncryptionKeyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        startWithEncryptionKey(params?: Params$Resource$Instances$Startwithencryptionkey, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        startWithEncryptionKey(params: Params$Resource$Instances$Startwithencryptionkey, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        startWithEncryptionKey(params: Params$Resource$Instances$Startwithencryptionkey, callback: BodyResponseCallback<Schema$Operation>): void;
        startWithEncryptionKey(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.stop
         * @desc Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
         * @alias compute.instances.stop
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {boolean=} params.discardLocalSsd If true, discard the contents of any attached localSSD partitions. Default value is false (== preserve localSSD data).
         * @param {string} params.instance Name of the instance resource to stop.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        stop(params?: Params$Resource$Instances$Stop, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        stop(params: Params$Resource$Instances$Stop, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        stop(params: Params$Resource$Instances$Stop, callback: BodyResponseCallback<Schema$Operation>): void;
        stop(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.suspend
         * @desc This method suspends a running instance, saving its state to persistent storage, and allows you to resume the instance at a later time. Suspended instances incur reduced per-minute, virtual machine usage charges while they are suspended. Any resources the virtual machine is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted.
         * @alias compute.instances.suspend
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {boolean=} params.discardLocalSsd If true, discard the contents of any attached localSSD partitions. Default value is false (== preserve localSSD data).
         * @param {string} params.instance Name of the instance resource to suspend.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        suspend(params?: Params$Resource$Instances$Suspend, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        suspend(params: Params$Resource$Instances$Suspend, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        suspend(params: Params$Resource$Instances$Suspend, callback: BodyResponseCallback<Schema$Operation>): void;
        suspend(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.instances.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Instances$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Instances$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Instances$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.instances.updateAccessConfig
         * @desc Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.instances.updateAccessConfig
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.networkInterface The name of the network interface where the access config is attached.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().AccessConfig} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updateAccessConfig(params?: Params$Resource$Instances$Updateaccessconfig, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updateAccessConfig(params: Params$Resource$Instances$Updateaccessconfig, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updateAccessConfig(params: Params$Resource$Instances$Updateaccessconfig, callback: BodyResponseCallback<Schema$Operation>): void;
        updateAccessConfig(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.updateDisplayDevice
         * @desc Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.instances.updateDisplayDevice
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().DisplayDevice} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updateDisplayDevice(params?: Params$Resource$Instances$Updatedisplaydevice, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updateDisplayDevice(params: Params$Resource$Instances$Updatedisplaydevice, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updateDisplayDevice(params: Params$Resource$Instances$Updatedisplaydevice, callback: BodyResponseCallback<Schema$Operation>): void;
        updateDisplayDevice(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.updateNetworkInterface
         * @desc Updates an instance's network interface. This method follows PATCH semantics.
         * @alias compute.instances.updateNetworkInterface
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance The instance name for this request.
         * @param {string} params.networkInterface The name of the network interface to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().NetworkInterface} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updateNetworkInterface(params?: Params$Resource$Instances$Updatenetworkinterface, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updateNetworkInterface(params: Params$Resource$Instances$Updatenetworkinterface, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updateNetworkInterface(params: Params$Resource$Instances$Updatenetworkinterface, callback: BodyResponseCallback<Schema$Operation>): void;
        updateNetworkInterface(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.updateShieldedInstanceConfig
         * @desc Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.instances.updateShieldedInstanceConfig
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name or id of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ShieldedInstanceConfig} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updateShieldedInstanceConfig(params?: Params$Resource$Instances$Updateshieldedinstanceconfig, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updateShieldedInstanceConfig(params: Params$Resource$Instances$Updateshieldedinstanceconfig, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updateShieldedInstanceConfig(params: Params$Resource$Instances$Updateshieldedinstanceconfig, callback: BodyResponseCallback<Schema$Operation>): void;
        updateShieldedInstanceConfig(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instances.updateShieldedVmConfig
         * @desc Updates the Shielded VM config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.instances.updateShieldedVmConfig
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instance Name of the instance scoping this request.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ShieldedVmConfig} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updateShieldedVmConfig(params?: Params$Resource$Instances$Updateshieldedvmconfig, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updateShieldedVmConfig(params: Params$Resource$Instances$Updateshieldedvmconfig, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updateShieldedVmConfig(params: Params$Resource$Instances$Updateshieldedvmconfig, callback: BodyResponseCallback<Schema$Operation>): void;
        updateShieldedVmConfig(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Instances$Addaccessconfig extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * The name of the network interface to add to this instance.
         */
        networkInterface?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$AccessConfig;
    }
    interface Params$Resource$Instances$Addresourcepolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesAddResourcePoliciesRequest;
    }
    interface Params$Resource$Instances$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Instances$Attachdisk extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Whether to force attach the disk even if it's currently attached to another instance.
         */
        forceAttach?: boolean;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$AttachedDisk;
    }
    interface Params$Resource$Instances$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance resource to delete.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Deleteaccessconfig extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the access config to delete.
         */
        accessConfig?: string;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * The name of the network interface.
         */
        networkInterface?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Detachdisk extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The device name of the disk to detach. Make a get() request on the instance to view currently attached disks and device names.
         */
        deviceName?: string;
        /**
         * Instance name for this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance resource to return.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Geteffectivefirewalls extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * The name of the network interface to get the effective firewalls.
         */
        networkInterface?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Getguestattributes extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Specifies the guest attributes path to be queried.
         */
        queryPath?: string;
        /**
         * Specifies the key for the guest attributes entry.
         */
        variableKey?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Getserialportoutput extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Specifies which COM or serial port to retrieve data from.
         */
        port?: number;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Returns output starting from a specific byte position. Use this to page through output when the output is too large to return in a single request. For the initial request, leave this field unspecified. For subsequent calls, this field should be set to the next value returned in the previous call.
         */
        start?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Getshieldedinstanceidentity extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name or id of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Getshieldedvmidentity extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Specifies instance template to create the instance.  This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template:   - https://www.googleapis.com/compute/v1/projects/project/global/instanceTemplates/instanceTemplate  - projects/project/global/instanceTemplates/instanceTemplate  - global/instanceTemplates/instanceTemplate
         */
        sourceInstanceTemplate?: string;
        /**
         * Specifies instance machine to create the instance.  This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template:   - https://www.googleapis.com/compute/v1/projects/project/global/global/machineImages/machineImage  - projects/project/global/global/machineImages/machineImage  - global/machineImages/machineImage
         */
        sourceMachineImage?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Instance;
    }
    interface Params$Resource$Instances$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Listreferrers extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * Name of the target instance scoping this request, or '-' if the request should span over all instances in the container.
         */
        instance?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Removeresourcepolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesRemoveResourcePoliciesRequest;
    }
    interface Params$Resource$Instances$Reset extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Resume extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance resource to resume.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesResumeRequest;
    }
    interface Params$Resource$Instances$Setdeletionprotection extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Whether the resource should be protected against deletion.
         */
        deletionProtection?: boolean;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Setdiskautodelete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Whether to auto-delete the disk when the instance is deleted.
         */
        autoDelete?: boolean;
        /**
         * The device name of the disk to modify. Make a get() request on the instance to view currently attached disks and device names.
         */
        deviceName?: string;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ZoneSetPolicyRequest;
    }
    interface Params$Resource$Instances$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesSetLabelsRequest;
    }
    interface Params$Resource$Instances$Setmachineresources extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesSetMachineResourcesRequest;
    }
    interface Params$Resource$Instances$Setmachinetype extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesSetMachineTypeRequest;
    }
    interface Params$Resource$Instances$Setmetadata extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Metadata;
    }
    interface Params$Resource$Instances$Setmincpuplatform extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesSetMinCpuPlatformRequest;
    }
    interface Params$Resource$Instances$Setname extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesSetNameRequest;
    }
    interface Params$Resource$Instances$Setscheduling extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Instance name for this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Scheduling;
    }
    interface Params$Resource$Instances$Setserviceaccount extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance resource to start.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesSetServiceAccountRequest;
    }
    interface Params$Resource$Instances$Setshieldedinstanceintegritypolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name or id of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ShieldedInstanceIntegrityPolicy;
    }
    interface Params$Resource$Instances$Setshieldedvmintegritypolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ShieldedVmIntegrityPolicy;
    }
    interface Params$Resource$Instances$Settags extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Tags;
    }
    interface Params$Resource$Instances$Simulatemaintenanceevent extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Start extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance resource to start.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Startwithencryptionkey extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance resource to start.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstancesStartWithEncryptionKeyRequest;
    }
    interface Params$Resource$Instances$Stop extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * If true, discard the contents of any attached localSSD partitions. Default value is false (== preserve localSSD data).
         */
        discardLocalSsd?: boolean;
        /**
         * Name of the instance resource to stop.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Suspend extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * If true, discard the contents of any attached localSSD partitions. Default value is false (== preserve localSSD data).
         */
        discardLocalSsd?: boolean;
        /**
         * Name of the instance resource to suspend.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Instances$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Instances$Updateaccessconfig extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * The name of the network interface where the access config is attached.
         */
        networkInterface?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$AccessConfig;
    }
    interface Params$Resource$Instances$Updatedisplaydevice extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$DisplayDevice;
    }
    interface Params$Resource$Instances$Updatenetworkinterface extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The instance name for this request.
         */
        instance?: string;
        /**
         * The name of the network interface to update.
         */
        networkInterface?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworkInterface;
    }
    interface Params$Resource$Instances$Updateshieldedinstanceconfig extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name or id of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ShieldedInstanceConfig;
    }
    interface Params$Resource$Instances$Updateshieldedvmconfig extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance scoping this request.
         */
        instance?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ShieldedVmConfig;
    }
    class Resource$Instancetemplates {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.instanceTemplates.delete
         * @desc Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
         * @alias compute.instanceTemplates.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceTemplate The name of the instance template to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Instancetemplates$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Instancetemplates$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Instancetemplates$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceTemplates.get
         * @desc Returns the specified instance template. Gets a list of available instance templates by making a list() request.
         * @alias compute.instanceTemplates.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceTemplate The name of the instance template.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Instancetemplates$Get, options?: MethodOptions): GaxiosPromise<Schema$InstanceTemplate>;
        get(params: Params$Resource$Instancetemplates$Get, options: MethodOptions | BodyResponseCallback<Schema$InstanceTemplate>, callback: BodyResponseCallback<Schema$InstanceTemplate>): void;
        get(params: Params$Resource$Instancetemplates$Get, callback: BodyResponseCallback<Schema$InstanceTemplate>): void;
        get(callback: BodyResponseCallback<Schema$InstanceTemplate>): void;
        /**
         * compute.instanceTemplates.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.instanceTemplates.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Instancetemplates$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Instancetemplates$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Instancetemplates$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.instanceTemplates.insert
         * @desc Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
         * @alias compute.instanceTemplates.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().InstanceTemplate} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Instancetemplates$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Instancetemplates$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Instancetemplates$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.instanceTemplates.list
         * @desc Retrieves a list of instance templates that are contained within the specified project.
         * @alias compute.instanceTemplates.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Instancetemplates$List, options?: MethodOptions): GaxiosPromise<Schema$InstanceTemplateList>;
        list(params: Params$Resource$Instancetemplates$List, options: MethodOptions | BodyResponseCallback<Schema$InstanceTemplateList>, callback: BodyResponseCallback<Schema$InstanceTemplateList>): void;
        list(params: Params$Resource$Instancetemplates$List, callback: BodyResponseCallback<Schema$InstanceTemplateList>): void;
        list(callback: BodyResponseCallback<Schema$InstanceTemplateList>): void;
        /**
         * compute.instanceTemplates.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.instanceTemplates.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Instancetemplates$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Instancetemplates$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Instancetemplates$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.instanceTemplates.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.instanceTemplates.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Instancetemplates$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Instancetemplates$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Instancetemplates$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Instancetemplates$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance template to delete.
         */
        instanceTemplate?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Instancetemplates$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance template.
         */
        instanceTemplate?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Instancetemplates$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Instancetemplates$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceTemplate;
    }
    interface Params$Resource$Instancetemplates$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Instancetemplates$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Instancetemplates$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Interconnectattachments {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.interconnectAttachments.aggregatedList
         * @desc Retrieves an aggregated list of interconnect attachments.
         * @alias compute.interconnectAttachments.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Interconnectattachments$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$InterconnectAttachmentAggregatedList>;
        aggregatedList(params: Params$Resource$Interconnectattachments$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$InterconnectAttachmentAggregatedList>, callback: BodyResponseCallback<Schema$InterconnectAttachmentAggregatedList>): void;
        aggregatedList(params: Params$Resource$Interconnectattachments$Aggregatedlist, callback: BodyResponseCallback<Schema$InterconnectAttachmentAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$InterconnectAttachmentAggregatedList>): void;
        /**
         * compute.interconnectAttachments.delete
         * @desc Deletes the specified interconnect attachment.
         * @alias compute.interconnectAttachments.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnectAttachment Name of the interconnect attachment to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Interconnectattachments$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Interconnectattachments$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Interconnectattachments$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnectAttachments.get
         * @desc Returns the specified interconnect attachment.
         * @alias compute.interconnectAttachments.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnectAttachment Name of the interconnect attachment to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Interconnectattachments$Get, options?: MethodOptions): GaxiosPromise<Schema$InterconnectAttachment>;
        get(params: Params$Resource$Interconnectattachments$Get, options: MethodOptions | BodyResponseCallback<Schema$InterconnectAttachment>, callback: BodyResponseCallback<Schema$InterconnectAttachment>): void;
        get(params: Params$Resource$Interconnectattachments$Get, callback: BodyResponseCallback<Schema$InterconnectAttachment>): void;
        get(callback: BodyResponseCallback<Schema$InterconnectAttachment>): void;
        /**
         * compute.interconnectAttachments.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.interconnectAttachments.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Interconnectattachments$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Interconnectattachments$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Interconnectattachments$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.interconnectAttachments.insert
         * @desc Creates an InterconnectAttachment in the specified project using the data included in the request.
         * @alias compute.interconnectAttachments.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {boolean=} params.validateOnly If true, the request will not be committed.
         * @param {().InterconnectAttachment} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Interconnectattachments$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Interconnectattachments$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Interconnectattachments$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnectAttachments.list
         * @desc Retrieves the list of interconnect attachments contained within the specified region.
         * @alias compute.interconnectAttachments.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Interconnectattachments$List, options?: MethodOptions): GaxiosPromise<Schema$InterconnectAttachmentList>;
        list(params: Params$Resource$Interconnectattachments$List, options: MethodOptions | BodyResponseCallback<Schema$InterconnectAttachmentList>, callback: BodyResponseCallback<Schema$InterconnectAttachmentList>): void;
        list(params: Params$Resource$Interconnectattachments$List, callback: BodyResponseCallback<Schema$InterconnectAttachmentList>): void;
        list(callback: BodyResponseCallback<Schema$InterconnectAttachmentList>): void;
        /**
         * compute.interconnectAttachments.patch
         * @desc Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.interconnectAttachments.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnectAttachment Name of the interconnect attachment to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().InterconnectAttachment} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Interconnectattachments$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Interconnectattachments$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Interconnectattachments$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnectAttachments.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.interconnectAttachments.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Interconnectattachments$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Interconnectattachments$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Interconnectattachments$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.interconnectAttachments.setLabels
         * @desc Sets the labels on an InterconnectAttachment. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.interconnectAttachments.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Interconnectattachments$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Interconnectattachments$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Interconnectattachments$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnectAttachments.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.interconnectAttachments.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Interconnectattachments$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Interconnectattachments$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Interconnectattachments$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Interconnectattachments$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Interconnectattachments$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect attachment to delete.
         */
        interconnectAttachment?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Interconnectattachments$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect attachment to return.
         */
        interconnectAttachment?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Interconnectattachments$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Interconnectattachments$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * If true, the request will not be committed.
         */
        validateOnly?: boolean;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InterconnectAttachment;
    }
    interface Params$Resource$Interconnectattachments$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Interconnectattachments$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect attachment to patch.
         */
        interconnectAttachment?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InterconnectAttachment;
    }
    interface Params$Resource$Interconnectattachments$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetPolicyRequest;
    }
    interface Params$Resource$Interconnectattachments$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetLabelsRequest;
    }
    interface Params$Resource$Interconnectattachments$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Interconnectlocations {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.interconnectLocations.get
         * @desc Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
         * @alias compute.interconnectLocations.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnectLocation Name of the interconnect location to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Interconnectlocations$Get, options?: MethodOptions): GaxiosPromise<Schema$InterconnectLocation>;
        get(params: Params$Resource$Interconnectlocations$Get, options: MethodOptions | BodyResponseCallback<Schema$InterconnectLocation>, callback: BodyResponseCallback<Schema$InterconnectLocation>): void;
        get(params: Params$Resource$Interconnectlocations$Get, callback: BodyResponseCallback<Schema$InterconnectLocation>): void;
        get(callback: BodyResponseCallback<Schema$InterconnectLocation>): void;
        /**
         * compute.interconnectLocations.list
         * @desc Retrieves the list of interconnect locations available to the specified project.
         * @alias compute.interconnectLocations.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Interconnectlocations$List, options?: MethodOptions): GaxiosPromise<Schema$InterconnectLocationList>;
        list(params: Params$Resource$Interconnectlocations$List, options: MethodOptions | BodyResponseCallback<Schema$InterconnectLocationList>, callback: BodyResponseCallback<Schema$InterconnectLocationList>): void;
        list(params: Params$Resource$Interconnectlocations$List, callback: BodyResponseCallback<Schema$InterconnectLocationList>): void;
        list(callback: BodyResponseCallback<Schema$InterconnectLocationList>): void;
        /**
         * compute.interconnectLocations.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.interconnectLocations.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Interconnectlocations$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Interconnectlocations$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Interconnectlocations$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Interconnectlocations$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect location to return.
         */
        interconnectLocation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Interconnectlocations$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Interconnectlocations$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Interconnects {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.interconnects.delete
         * @desc Deletes the specified interconnect.
         * @alias compute.interconnects.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnect Name of the interconnect to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Interconnects$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Interconnects$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Interconnects$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnects.get
         * @desc Returns the specified interconnect. Get a list of available interconnects by making a list() request.
         * @alias compute.interconnects.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnect Name of the interconnect to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Interconnects$Get, options?: MethodOptions): GaxiosPromise<Schema$Interconnect>;
        get(params: Params$Resource$Interconnects$Get, options: MethodOptions | BodyResponseCallback<Schema$Interconnect>, callback: BodyResponseCallback<Schema$Interconnect>): void;
        get(params: Params$Resource$Interconnects$Get, callback: BodyResponseCallback<Schema$Interconnect>): void;
        get(callback: BodyResponseCallback<Schema$Interconnect>): void;
        /**
         * compute.interconnects.getDiagnostics
         * @desc Returns the interconnectDiagnostics for the specified interconnect.
         * @alias compute.interconnects.getDiagnostics
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnect Name of the interconnect resource to query.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getDiagnostics(params?: Params$Resource$Interconnects$Getdiagnostics, options?: MethodOptions): GaxiosPromise<Schema$InterconnectsGetDiagnosticsResponse>;
        getDiagnostics(params: Params$Resource$Interconnects$Getdiagnostics, options: MethodOptions | BodyResponseCallback<Schema$InterconnectsGetDiagnosticsResponse>, callback: BodyResponseCallback<Schema$InterconnectsGetDiagnosticsResponse>): void;
        getDiagnostics(params: Params$Resource$Interconnects$Getdiagnostics, callback: BodyResponseCallback<Schema$InterconnectsGetDiagnosticsResponse>): void;
        getDiagnostics(callback: BodyResponseCallback<Schema$InterconnectsGetDiagnosticsResponse>): void;
        /**
         * compute.interconnects.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.interconnects.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Interconnects$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Interconnects$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Interconnects$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.interconnects.insert
         * @desc Creates a Interconnect in the specified project using the data included in the request.
         * @alias compute.interconnects.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Interconnect} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Interconnects$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Interconnects$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Interconnects$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnects.list
         * @desc Retrieves the list of interconnect available to the specified project.
         * @alias compute.interconnects.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Interconnects$List, options?: MethodOptions): GaxiosPromise<Schema$InterconnectList>;
        list(params: Params$Resource$Interconnects$List, options: MethodOptions | BodyResponseCallback<Schema$InterconnectList>, callback: BodyResponseCallback<Schema$InterconnectList>): void;
        list(params: Params$Resource$Interconnects$List, callback: BodyResponseCallback<Schema$InterconnectList>): void;
        list(callback: BodyResponseCallback<Schema$InterconnectList>): void;
        /**
         * compute.interconnects.patch
         * @desc Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.interconnects.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.interconnect Name of the interconnect to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Interconnect} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Interconnects$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Interconnects$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Interconnects$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnects.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.interconnects.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Interconnects$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Interconnects$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Interconnects$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.interconnects.setLabels
         * @desc Sets the labels on an Interconnect. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.interconnects.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Interconnects$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Interconnects$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Interconnects$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.interconnects.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.interconnects.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Interconnects$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Interconnects$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Interconnects$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Interconnects$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect to delete.
         */
        interconnect?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Interconnects$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect to return.
         */
        interconnect?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Interconnects$Getdiagnostics extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect resource to query.
         */
        interconnect?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Interconnects$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Interconnects$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Interconnect;
    }
    interface Params$Resource$Interconnects$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Interconnects$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the interconnect to update.
         */
        interconnect?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Interconnect;
    }
    interface Params$Resource$Interconnects$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Interconnects$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetLabelsRequest;
    }
    interface Params$Resource$Interconnects$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Licensecodes {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.licenseCodes.get
         * @desc Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code.
         * @alias compute.licenseCodes.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.licenseCode Number corresponding to the License code resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Licensecodes$Get, options?: MethodOptions): GaxiosPromise<Schema$LicenseCode>;
        get(params: Params$Resource$Licensecodes$Get, options: MethodOptions | BodyResponseCallback<Schema$LicenseCode>, callback: BodyResponseCallback<Schema$LicenseCode>): void;
        get(params: Params$Resource$Licensecodes$Get, callback: BodyResponseCallback<Schema$LicenseCode>): void;
        get(callback: BodyResponseCallback<Schema$LicenseCode>): void;
        /**
         * compute.licenseCodes.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.licenseCodes.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Licensecodes$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Licensecodes$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Licensecodes$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.licenseCodes.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.licenseCodes.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Licensecodes$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Licensecodes$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Licensecodes$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.licenseCodes.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.licenseCodes.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Licensecodes$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Licensecodes$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Licensecodes$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Licensecodes$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Number corresponding to the License code resource to return.
         */
        licenseCode?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Licensecodes$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Licensecodes$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Licensecodes$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Licenses {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.licenses.delete
         * @desc Deletes the specified license.
         * @alias compute.licenses.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.license Name of the license resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Licenses$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Licenses$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Licenses$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.licenses.get
         * @desc Returns the specified License resource.
         * @alias compute.licenses.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.license Name of the License resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Licenses$Get, options?: MethodOptions): GaxiosPromise<Schema$License>;
        get(params: Params$Resource$Licenses$Get, options: MethodOptions | BodyResponseCallback<Schema$License>, callback: BodyResponseCallback<Schema$License>): void;
        get(params: Params$Resource$Licenses$Get, callback: BodyResponseCallback<Schema$License>): void;
        get(callback: BodyResponseCallback<Schema$License>): void;
        /**
         * compute.licenses.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.licenses.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Licenses$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Licenses$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Licenses$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.licenses.insert
         * @desc Create a License resource in the specified project.
         * @alias compute.licenses.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().License} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Licenses$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Licenses$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Licenses$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.licenses.list
         * @desc Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
         * @alias compute.licenses.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Licenses$List, options?: MethodOptions): GaxiosPromise<Schema$LicensesListResponse>;
        list(params: Params$Resource$Licenses$List, options: MethodOptions | BodyResponseCallback<Schema$LicensesListResponse>, callback: BodyResponseCallback<Schema$LicensesListResponse>): void;
        list(params: Params$Resource$Licenses$List, callback: BodyResponseCallback<Schema$LicensesListResponse>): void;
        list(callback: BodyResponseCallback<Schema$LicensesListResponse>): void;
        /**
         * compute.licenses.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.licenses.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Licenses$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Licenses$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Licenses$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.licenses.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.licenses.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Licenses$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Licenses$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Licenses$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Licenses$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the license resource to delete.
         */
        license?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Licenses$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the License resource to return.
         */
        license?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Licenses$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Licenses$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$License;
    }
    interface Params$Resource$Licenses$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Licenses$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Licenses$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Machineimages {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.machineImages.delete
         * @desc Deletes the specified machine image. Deleting a machine image is permanent and cannot be undone.
         * @alias compute.machineImages.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.machineImage The name of the machine image to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Machineimages$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Machineimages$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Machineimages$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.machineImages.get
         * @desc Returns the specified machine image. Gets a list of available machine images by making a list() request.
         * @alias compute.machineImages.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.machineImage The name of the machine image.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Machineimages$Get, options?: MethodOptions): GaxiosPromise<Schema$MachineImage>;
        get(params: Params$Resource$Machineimages$Get, options: MethodOptions | BodyResponseCallback<Schema$MachineImage>, callback: BodyResponseCallback<Schema$MachineImage>): void;
        get(params: Params$Resource$Machineimages$Get, callback: BodyResponseCallback<Schema$MachineImage>): void;
        get(callback: BodyResponseCallback<Schema$MachineImage>): void;
        /**
         * compute.machineImages.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.machineImages.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Machineimages$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Machineimages$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Machineimages$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.machineImages.insert
         * @desc Creates a machine image in the specified project using the data that is included in the request. If you are creating a new machine image to update an existing instance, your new machine image should use the same network or, if applicable, the same subnetwork as the original instance.
         * @alias compute.machineImages.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string=} params.sourceInstance Required. Source instance that is used to create the machine image from.
         * @param {().MachineImage} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Machineimages$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Machineimages$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Machineimages$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.machineImages.list
         * @desc Retrieves a list of machine images that are contained within the specified project.
         * @alias compute.machineImages.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Machineimages$List, options?: MethodOptions): GaxiosPromise<Schema$MachineImageList>;
        list(params: Params$Resource$Machineimages$List, options: MethodOptions | BodyResponseCallback<Schema$MachineImageList>, callback: BodyResponseCallback<Schema$MachineImageList>): void;
        list(params: Params$Resource$Machineimages$List, callback: BodyResponseCallback<Schema$MachineImageList>): void;
        list(callback: BodyResponseCallback<Schema$MachineImageList>): void;
        /**
         * compute.machineImages.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.machineImages.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Machineimages$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Machineimages$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Machineimages$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.machineImages.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.machineImages.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Machineimages$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Machineimages$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Machineimages$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Machineimages$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the machine image to delete.
         */
        machineImage?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Machineimages$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the machine image.
         */
        machineImage?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Machineimages$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Machineimages$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Required. Source instance that is used to create the machine image from.
         */
        sourceInstance?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$MachineImage;
    }
    interface Params$Resource$Machineimages$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Machineimages$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Machineimages$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Machinetypes {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.machineTypes.aggregatedList
         * @desc Retrieves an aggregated list of machine types.
         * @alias compute.machineTypes.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Machinetypes$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$MachineTypeAggregatedList>;
        aggregatedList(params: Params$Resource$Machinetypes$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$MachineTypeAggregatedList>, callback: BodyResponseCallback<Schema$MachineTypeAggregatedList>): void;
        aggregatedList(params: Params$Resource$Machinetypes$Aggregatedlist, callback: BodyResponseCallback<Schema$MachineTypeAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$MachineTypeAggregatedList>): void;
        /**
         * compute.machineTypes.get
         * @desc Returns the specified machine type. Gets a list of available machine types by making a list() request.
         * @alias compute.machineTypes.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.machineType Name of the machine type to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Machinetypes$Get, options?: MethodOptions): GaxiosPromise<Schema$MachineType>;
        get(params: Params$Resource$Machinetypes$Get, options: MethodOptions | BodyResponseCallback<Schema$MachineType>, callback: BodyResponseCallback<Schema$MachineType>): void;
        get(params: Params$Resource$Machinetypes$Get, callback: BodyResponseCallback<Schema$MachineType>): void;
        get(callback: BodyResponseCallback<Schema$MachineType>): void;
        /**
         * compute.machineTypes.list
         * @desc Retrieves a list of machine types available to the specified project.
         * @alias compute.machineTypes.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Machinetypes$List, options?: MethodOptions): GaxiosPromise<Schema$MachineTypeList>;
        list(params: Params$Resource$Machinetypes$List, options: MethodOptions | BodyResponseCallback<Schema$MachineTypeList>, callback: BodyResponseCallback<Schema$MachineTypeList>): void;
        list(params: Params$Resource$Machinetypes$List, callback: BodyResponseCallback<Schema$MachineTypeList>): void;
        list(callback: BodyResponseCallback<Schema$MachineTypeList>): void;
    }
    interface Params$Resource$Machinetypes$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Machinetypes$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the machine type to return.
         */
        machineType?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Machinetypes$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    class Resource$Networkendpointgroups {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.networkEndpointGroups.aggregatedList
         * @desc Retrieves the list of network endpoint groups and sorts them by zone.
         * @alias compute.networkEndpointGroups.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Networkendpointgroups$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$NetworkEndpointGroupAggregatedList>;
        aggregatedList(params: Params$Resource$Networkendpointgroups$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$NetworkEndpointGroupAggregatedList>, callback: BodyResponseCallback<Schema$NetworkEndpointGroupAggregatedList>): void;
        aggregatedList(params: Params$Resource$Networkendpointgroups$Aggregatedlist, callback: BodyResponseCallback<Schema$NetworkEndpointGroupAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$NetworkEndpointGroupAggregatedList>): void;
        /**
         * compute.networkEndpointGroups.attachNetworkEndpoints
         * @desc Attach a list of network endpoints to the specified network endpoint group.
         * @alias compute.networkEndpointGroups.attachNetworkEndpoints
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         * @param {().NetworkEndpointGroupsAttachEndpointsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        attachNetworkEndpoints(params?: Params$Resource$Networkendpointgroups$Attachnetworkendpoints, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        attachNetworkEndpoints(params: Params$Resource$Networkendpointgroups$Attachnetworkendpoints, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        attachNetworkEndpoints(params: Params$Resource$Networkendpointgroups$Attachnetworkendpoints, callback: BodyResponseCallback<Schema$Operation>): void;
        attachNetworkEndpoints(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networkEndpointGroups.delete
         * @desc Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
         * @alias compute.networkEndpointGroups.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group to delete. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Networkendpointgroups$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Networkendpointgroups$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Networkendpointgroups$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networkEndpointGroups.detachNetworkEndpoints
         * @desc Detach a list of network endpoints from the specified network endpoint group.
         * @alias compute.networkEndpointGroups.detachNetworkEndpoints
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         * @param {().NetworkEndpointGroupsDetachEndpointsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        detachNetworkEndpoints(params?: Params$Resource$Networkendpointgroups$Detachnetworkendpoints, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        detachNetworkEndpoints(params: Params$Resource$Networkendpointgroups$Detachnetworkendpoints, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        detachNetworkEndpoints(params: Params$Resource$Networkendpointgroups$Detachnetworkendpoints, callback: BodyResponseCallback<Schema$Operation>): void;
        detachNetworkEndpoints(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networkEndpointGroups.get
         * @desc Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.
         * @alias compute.networkEndpointGroups.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.networkEndpointGroup The name of the network endpoint group. It should comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Networkendpointgroups$Get, options?: MethodOptions): GaxiosPromise<Schema$NetworkEndpointGroup>;
        get(params: Params$Resource$Networkendpointgroups$Get, options: MethodOptions | BodyResponseCallback<Schema$NetworkEndpointGroup>, callback: BodyResponseCallback<Schema$NetworkEndpointGroup>): void;
        get(params: Params$Resource$Networkendpointgroups$Get, callback: BodyResponseCallback<Schema$NetworkEndpointGroup>): void;
        get(callback: BodyResponseCallback<Schema$NetworkEndpointGroup>): void;
        /**
         * compute.networkEndpointGroups.insert
         * @desc Creates a network endpoint group in the specified project using the parameters that are included in the request.
         * @alias compute.networkEndpointGroups.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone where you want to create the network endpoint group. It should comply with RFC1035.
         * @param {().NetworkEndpointGroup} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Networkendpointgroups$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Networkendpointgroups$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Networkendpointgroups$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networkEndpointGroups.list
         * @desc Retrieves the list of network endpoint groups that are located in the specified project and zone.
         * @alias compute.networkEndpointGroups.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Networkendpointgroups$List, options?: MethodOptions): GaxiosPromise<Schema$NetworkEndpointGroupList>;
        list(params: Params$Resource$Networkendpointgroups$List, options: MethodOptions | BodyResponseCallback<Schema$NetworkEndpointGroupList>, callback: BodyResponseCallback<Schema$NetworkEndpointGroupList>): void;
        list(params: Params$Resource$Networkendpointgroups$List, callback: BodyResponseCallback<Schema$NetworkEndpointGroupList>): void;
        list(callback: BodyResponseCallback<Schema$NetworkEndpointGroupList>): void;
        /**
         * compute.networkEndpointGroups.listNetworkEndpoints
         * @desc Lists the network endpoints in the specified network endpoint group.
         * @alias compute.networkEndpointGroups.listNetworkEndpoints
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string} params.networkEndpointGroup The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         * @param {().NetworkEndpointGroupsListEndpointsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listNetworkEndpoints(params?: Params$Resource$Networkendpointgroups$Listnetworkendpoints, options?: MethodOptions): GaxiosPromise<Schema$NetworkEndpointGroupsListNetworkEndpoints>;
        listNetworkEndpoints(params: Params$Resource$Networkendpointgroups$Listnetworkendpoints, options: MethodOptions | BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>, callback: BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>): void;
        listNetworkEndpoints(params: Params$Resource$Networkendpointgroups$Listnetworkendpoints, callback: BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>): void;
        listNetworkEndpoints(callback: BodyResponseCallback<Schema$NetworkEndpointGroupsListNetworkEndpoints>): void;
        /**
         * compute.networkEndpointGroups.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.networkEndpointGroups.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Networkendpointgroups$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Networkendpointgroups$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Networkendpointgroups$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Networkendpointgroups$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Networkendpointgroups$Attachnetworkendpoints extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworkEndpointGroupsAttachEndpointsRequest;
    }
    interface Params$Resource$Networkendpointgroups$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group to delete. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         */
        zone?: string;
    }
    interface Params$Resource$Networkendpointgroups$Detachnetworkendpoints extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworkEndpointGroupsDetachEndpointsRequest;
    }
    interface Params$Resource$Networkendpointgroups$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the network endpoint group. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         */
        zone?: string;
    }
    interface Params$Resource$Networkendpointgroups$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone where you want to create the network endpoint group. It should comply with RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworkEndpointGroup;
    }
    interface Params$Resource$Networkendpointgroups$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         */
        zone?: string;
    }
    interface Params$Resource$Networkendpointgroups$Listnetworkendpoints extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
         */
        networkEndpointGroup?: string;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone where the network endpoint group is located. It should comply with RFC1035.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworkEndpointGroupsListEndpointsRequest;
    }
    interface Params$Resource$Networkendpointgroups$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Networks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.networks.addPeering
         * @desc Adds a peering to the specified network.
         * @alias compute.networks.addPeering
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network resource to add peering to.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().NetworksAddPeeringRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addPeering(params?: Params$Resource$Networks$Addpeering, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addPeering(params: Params$Resource$Networks$Addpeering, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addPeering(params: Params$Resource$Networks$Addpeering, callback: BodyResponseCallback<Schema$Operation>): void;
        addPeering(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networks.delete
         * @desc Deletes the specified network.
         * @alias compute.networks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Networks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Networks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Networks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networks.get
         * @desc Returns the specified network. Gets a list of available networks by making a list() request.
         * @alias compute.networks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network to return.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Networks$Get, options?: MethodOptions): GaxiosPromise<Schema$Network>;
        get(params: Params$Resource$Networks$Get, options: MethodOptions | BodyResponseCallback<Schema$Network>, callback: BodyResponseCallback<Schema$Network>): void;
        get(params: Params$Resource$Networks$Get, callback: BodyResponseCallback<Schema$Network>): void;
        get(callback: BodyResponseCallback<Schema$Network>): void;
        /**
         * compute.networks.getEffectiveFirewalls
         * @desc Returns the effective firewalls on a given network.
         * @alias compute.networks.getEffectiveFirewalls
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network for this request.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getEffectiveFirewalls(params?: Params$Resource$Networks$Geteffectivefirewalls, options?: MethodOptions): GaxiosPromise<Schema$NetworksGetEffectiveFirewallsResponse>;
        getEffectiveFirewalls(params: Params$Resource$Networks$Geteffectivefirewalls, options: MethodOptions | BodyResponseCallback<Schema$NetworksGetEffectiveFirewallsResponse>, callback: BodyResponseCallback<Schema$NetworksGetEffectiveFirewallsResponse>): void;
        getEffectiveFirewalls(params: Params$Resource$Networks$Geteffectivefirewalls, callback: BodyResponseCallback<Schema$NetworksGetEffectiveFirewallsResponse>): void;
        getEffectiveFirewalls(callback: BodyResponseCallback<Schema$NetworksGetEffectiveFirewallsResponse>): void;
        /**
         * compute.networks.insert
         * @desc Creates a network in the specified project using the data included in the request.
         * @alias compute.networks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Network} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Networks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Networks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Networks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networks.list
         * @desc Retrieves the list of networks available to the specified project.
         * @alias compute.networks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Networks$List, options?: MethodOptions): GaxiosPromise<Schema$NetworkList>;
        list(params: Params$Resource$Networks$List, options: MethodOptions | BodyResponseCallback<Schema$NetworkList>, callback: BodyResponseCallback<Schema$NetworkList>): void;
        list(params: Params$Resource$Networks$List, callback: BodyResponseCallback<Schema$NetworkList>): void;
        list(callback: BodyResponseCallback<Schema$NetworkList>): void;
        /**
         * compute.networks.listIpAddresses
         * @desc Lists the internal IP addresses in the specified network.
         * @alias compute.networks.listIpAddresses
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string} params.network Name of the network for this request.
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.types (Optional) types filter separate by comma, valid values are: SUBNETWORK, RESERVED, PEER_USED, PEER_RESERVED, REMOTE_USED, REMOTE_RESERVED.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listIpAddresses(params?: Params$Resource$Networks$Listipaddresses, options?: MethodOptions): GaxiosPromise<Schema$IpAddressesList>;
        listIpAddresses(params: Params$Resource$Networks$Listipaddresses, options: MethodOptions | BodyResponseCallback<Schema$IpAddressesList>, callback: BodyResponseCallback<Schema$IpAddressesList>): void;
        listIpAddresses(params: Params$Resource$Networks$Listipaddresses, callback: BodyResponseCallback<Schema$IpAddressesList>): void;
        listIpAddresses(callback: BodyResponseCallback<Schema$IpAddressesList>): void;
        /**
         * compute.networks.listIpOwners
         * @desc Lists the internal IP owners in the specified network.
         * @alias compute.networks.listIpOwners
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string=} params.ipCidrRange (Optional) IP CIDR range filter, example: "10.128.10.0/30".
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string} params.network Name of the network to return.
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.ownerProjects (Optional) Project IDs filter, example: "project-1,project-2".
         * @param {string=} params.ownerTypes (Optional) Owner types filter, example: "instance,forwardingRule".
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.subnetName (Optional) Subnetwork name filter.
         * @param {string=} params.subnetRegion (Optional) Subnetwork region filter.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listIpOwners(params?: Params$Resource$Networks$Listipowners, options?: MethodOptions): GaxiosPromise<Schema$IpOwnerList>;
        listIpOwners(params: Params$Resource$Networks$Listipowners, options: MethodOptions | BodyResponseCallback<Schema$IpOwnerList>, callback: BodyResponseCallback<Schema$IpOwnerList>): void;
        listIpOwners(params: Params$Resource$Networks$Listipowners, callback: BodyResponseCallback<Schema$IpOwnerList>): void;
        listIpOwners(callback: BodyResponseCallback<Schema$IpOwnerList>): void;
        /**
         * compute.networks.listPeeringRoutes
         * @desc Lists the peering routes exchanged over peering connection.
         * @alias compute.networks.listPeeringRoutes
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.direction The direction of the exchanged routes.
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string} params.network Name of the network for this request.
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string=} params.peeringName The response will show routes exchanged over the given peering connection.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.region The region of the request. The response will include all subnet routes, static routes and dynamic routes in the region.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listPeeringRoutes(params?: Params$Resource$Networks$Listpeeringroutes, options?: MethodOptions): GaxiosPromise<Schema$ExchangedPeeringRoutesList>;
        listPeeringRoutes(params: Params$Resource$Networks$Listpeeringroutes, options: MethodOptions | BodyResponseCallback<Schema$ExchangedPeeringRoutesList>, callback: BodyResponseCallback<Schema$ExchangedPeeringRoutesList>): void;
        listPeeringRoutes(params: Params$Resource$Networks$Listpeeringroutes, callback: BodyResponseCallback<Schema$ExchangedPeeringRoutesList>): void;
        listPeeringRoutes(callback: BodyResponseCallback<Schema$ExchangedPeeringRoutesList>): void;
        /**
         * compute.networks.patch
         * @desc Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.
         * @alias compute.networks.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Network} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Networks$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Networks$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Networks$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networks.removePeering
         * @desc Removes a peering from the specified network.
         * @alias compute.networks.removePeering
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network resource to remove peering from.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().NetworksRemovePeeringRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removePeering(params?: Params$Resource$Networks$Removepeering, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removePeering(params: Params$Resource$Networks$Removepeering, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removePeering(params: Params$Resource$Networks$Removepeering, callback: BodyResponseCallback<Schema$Operation>): void;
        removePeering(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networks.switchToCustomMode
         * @desc Switches the network mode from auto subnet mode to custom subnet mode.
         * @alias compute.networks.switchToCustomMode
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network to be updated.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        switchToCustomMode(params?: Params$Resource$Networks$Switchtocustommode, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        switchToCustomMode(params: Params$Resource$Networks$Switchtocustommode, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        switchToCustomMode(params: Params$Resource$Networks$Switchtocustommode, callback: BodyResponseCallback<Schema$Operation>): void;
        switchToCustomMode(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.networks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.networks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Networks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Networks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Networks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.networks.updatePeering
         * @desc Updates the specified network peering with the data included in the request Only the following fields can be modified: NetworkPeering.export_custom_routes, and NetworkPeering.import_custom_routes
         * @alias compute.networks.updatePeering
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.network Name of the network resource which the updated peering is belonging to.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().NetworksUpdatePeeringRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updatePeering(params?: Params$Resource$Networks$Updatepeering, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updatePeering(params: Params$Resource$Networks$Updatepeering, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updatePeering(params: Params$Resource$Networks$Updatepeering, callback: BodyResponseCallback<Schema$Operation>): void;
        updatePeering(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Networks$Addpeering extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network resource to add peering to.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworksAddPeeringRequest;
    }
    interface Params$Resource$Networks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network to delete.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Networks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network to return.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Networks$Geteffectivefirewalls extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network for this request.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Networks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Network;
    }
    interface Params$Resource$Networks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Networks$Listipaddresses extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Name of the network for this request.
         */
        network?: string;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * (Optional) types filter separate by comma, valid values are: SUBNETWORK, RESERVED, PEER_USED, PEER_RESERVED, REMOTE_USED, REMOTE_RESERVED.
         */
        types?: string;
    }
    interface Params$Resource$Networks$Listipowners extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * (Optional) IP CIDR range filter, example: "10.128.10.0/30".
         */
        ipCidrRange?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Name of the network to return.
         */
        network?: string;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * (Optional) Project IDs filter, example: "project-1,project-2".
         */
        ownerProjects?: string;
        /**
         * (Optional) Owner types filter, example: "instance,forwardingRule".
         */
        ownerTypes?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * (Optional) Subnetwork name filter.
         */
        subnetName?: string;
        /**
         * (Optional) Subnetwork region filter.
         */
        subnetRegion?: string;
    }
    interface Params$Resource$Networks$Listpeeringroutes extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The direction of the exchanged routes.
         */
        direction?: string;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Name of the network for this request.
         */
        network?: string;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * The response will show routes exchanged over the given peering connection.
         */
        peeringName?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region of the request. The response will include all subnet routes, static routes and dynamic routes in the region.
         */
        region?: string;
    }
    interface Params$Resource$Networks$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network to update.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Network;
    }
    interface Params$Resource$Networks$Removepeering extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network resource to remove peering from.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworksRemovePeeringRequest;
    }
    interface Params$Resource$Networks$Switchtocustommode extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network to be updated.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Networks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Networks$Updatepeering extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the network resource which the updated peering is belonging to.
         */
        network?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NetworksUpdatePeeringRequest;
    }
    class Resource$Nodegroups {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.nodeGroups.addNodes
         * @desc Adds specified number of nodes to the node group.
         * @alias compute.nodeGroups.addNodes
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeGroup Name of the NodeGroup resource.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().NodeGroupsAddNodesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addNodes(params?: Params$Resource$Nodegroups$Addnodes, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addNodes(params: Params$Resource$Nodegroups$Addnodes, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addNodes(params: Params$Resource$Nodegroups$Addnodes, callback: BodyResponseCallback<Schema$Operation>): void;
        addNodes(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeGroups.aggregatedList
         * @desc Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.
         * @alias compute.nodeGroups.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Nodegroups$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$NodeGroupAggregatedList>;
        aggregatedList(params: Params$Resource$Nodegroups$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$NodeGroupAggregatedList>, callback: BodyResponseCallback<Schema$NodeGroupAggregatedList>): void;
        aggregatedList(params: Params$Resource$Nodegroups$Aggregatedlist, callback: BodyResponseCallback<Schema$NodeGroupAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$NodeGroupAggregatedList>): void;
        /**
         * compute.nodeGroups.delete
         * @desc Deletes the specified NodeGroup resource.
         * @alias compute.nodeGroups.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeGroup Name of the NodeGroup resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Nodegroups$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Nodegroups$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Nodegroups$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeGroups.deleteNodes
         * @desc Deletes specified nodes from the node group.
         * @alias compute.nodeGroups.deleteNodes
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeGroup Name of the NodeGroup resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().NodeGroupsDeleteNodesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deleteNodes(params?: Params$Resource$Nodegroups$Deletenodes, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deleteNodes(params: Params$Resource$Nodegroups$Deletenodes, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteNodes(params: Params$Resource$Nodegroups$Deletenodes, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteNodes(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeGroups.get
         * @desc Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
         * @alias compute.nodeGroups.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeGroup Name of the node group to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Nodegroups$Get, options?: MethodOptions): GaxiosPromise<Schema$NodeGroup>;
        get(params: Params$Resource$Nodegroups$Get, options: MethodOptions | BodyResponseCallback<Schema$NodeGroup>, callback: BodyResponseCallback<Schema$NodeGroup>): void;
        get(params: Params$Resource$Nodegroups$Get, callback: BodyResponseCallback<Schema$NodeGroup>): void;
        get(callback: BodyResponseCallback<Schema$NodeGroup>): void;
        /**
         * compute.nodeGroups.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.nodeGroups.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Nodegroups$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Nodegroups$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Nodegroups$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.nodeGroups.insert
         * @desc Creates a NodeGroup resource in the specified project using the data included in the request.
         * @alias compute.nodeGroups.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer} params.initialNodeCount Initial count of nodes in the node group.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().NodeGroup} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Nodegroups$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Nodegroups$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Nodegroups$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeGroups.list
         * @desc Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
         * @alias compute.nodeGroups.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Nodegroups$List, options?: MethodOptions): GaxiosPromise<Schema$NodeGroupList>;
        list(params: Params$Resource$Nodegroups$List, options: MethodOptions | BodyResponseCallback<Schema$NodeGroupList>, callback: BodyResponseCallback<Schema$NodeGroupList>): void;
        list(params: Params$Resource$Nodegroups$List, callback: BodyResponseCallback<Schema$NodeGroupList>): void;
        list(callback: BodyResponseCallback<Schema$NodeGroupList>): void;
        /**
         * compute.nodeGroups.listNodes
         * @desc Lists nodes in the node group.
         * @alias compute.nodeGroups.listNodes
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string} params.nodeGroup Name of the NodeGroup resource whose nodes you want to list.
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listNodes(params?: Params$Resource$Nodegroups$Listnodes, options?: MethodOptions): GaxiosPromise<Schema$NodeGroupsListNodes>;
        listNodes(params: Params$Resource$Nodegroups$Listnodes, options: MethodOptions | BodyResponseCallback<Schema$NodeGroupsListNodes>, callback: BodyResponseCallback<Schema$NodeGroupsListNodes>): void;
        listNodes(params: Params$Resource$Nodegroups$Listnodes, callback: BodyResponseCallback<Schema$NodeGroupsListNodes>): void;
        listNodes(callback: BodyResponseCallback<Schema$NodeGroupsListNodes>): void;
        /**
         * compute.nodeGroups.setAutoscalingPolicy
         * @desc Sets the autoscaling policy of the node group.
         * @alias compute.nodeGroups.setAutoscalingPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeGroup Name of the NodeGroup resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().NodeGroupsSetAutoscalingPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setAutoscalingPolicy(params?: Params$Resource$Nodegroups$Setautoscalingpolicy, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setAutoscalingPolicy(params: Params$Resource$Nodegroups$Setautoscalingpolicy, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setAutoscalingPolicy(params: Params$Resource$Nodegroups$Setautoscalingpolicy, callback: BodyResponseCallback<Schema$Operation>): void;
        setAutoscalingPolicy(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeGroups.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.nodeGroups.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ZoneSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Nodegroups$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Nodegroups$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Nodegroups$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.nodeGroups.setNodeTemplate
         * @desc Updates the node template of the node group.
         * @alias compute.nodeGroups.setNodeTemplate
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeGroup Name of the NodeGroup resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone The name of the zone for this request.
         * @param {().NodeGroupsSetNodeTemplateRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setNodeTemplate(params?: Params$Resource$Nodegroups$Setnodetemplate, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setNodeTemplate(params: Params$Resource$Nodegroups$Setnodetemplate, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setNodeTemplate(params: Params$Resource$Nodegroups$Setnodetemplate, callback: BodyResponseCallback<Schema$Operation>): void;
        setNodeTemplate(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeGroups.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.nodeGroups.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Nodegroups$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Nodegroups$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Nodegroups$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Nodegroups$Addnodes extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NodeGroup resource.
         */
        nodeGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NodeGroupsAddNodesRequest;
    }
    interface Params$Resource$Nodegroups$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Nodegroups$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NodeGroup resource to delete.
         */
        nodeGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Nodegroups$Deletenodes extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NodeGroup resource to delete.
         */
        nodeGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NodeGroupsDeleteNodesRequest;
    }
    interface Params$Resource$Nodegroups$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the node group to return.
         */
        nodeGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Nodegroups$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Nodegroups$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Initial count of nodes in the node group.
         */
        initialNodeCount?: number;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NodeGroup;
    }
    interface Params$Resource$Nodegroups$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Nodegroups$Listnodes extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Name of the NodeGroup resource whose nodes you want to list.
         */
        nodeGroup?: string;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Nodegroups$Setautoscalingpolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NodeGroup resource to update.
         */
        nodeGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NodeGroupsSetAutoscalingPolicyRequest;
    }
    interface Params$Resource$Nodegroups$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ZoneSetPolicyRequest;
    }
    interface Params$Resource$Nodegroups$Setnodetemplate extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NodeGroup resource to update.
         */
        nodeGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NodeGroupsSetNodeTemplateRequest;
    }
    interface Params$Resource$Nodegroups$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Nodetemplates {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.nodeTemplates.aggregatedList
         * @desc Retrieves an aggregated list of node templates.
         * @alias compute.nodeTemplates.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Nodetemplates$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$NodeTemplateAggregatedList>;
        aggregatedList(params: Params$Resource$Nodetemplates$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$NodeTemplateAggregatedList>, callback: BodyResponseCallback<Schema$NodeTemplateAggregatedList>): void;
        aggregatedList(params: Params$Resource$Nodetemplates$Aggregatedlist, callback: BodyResponseCallback<Schema$NodeTemplateAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$NodeTemplateAggregatedList>): void;
        /**
         * compute.nodeTemplates.delete
         * @desc Deletes the specified NodeTemplate resource.
         * @alias compute.nodeTemplates.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeTemplate Name of the NodeTemplate resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Nodetemplates$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Nodetemplates$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Nodetemplates$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeTemplates.get
         * @desc Returns the specified node template. Gets a list of available node templates by making a list() request.
         * @alias compute.nodeTemplates.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeTemplate Name of the node template to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Nodetemplates$Get, options?: MethodOptions): GaxiosPromise<Schema$NodeTemplate>;
        get(params: Params$Resource$Nodetemplates$Get, options: MethodOptions | BodyResponseCallback<Schema$NodeTemplate>, callback: BodyResponseCallback<Schema$NodeTemplate>): void;
        get(params: Params$Resource$Nodetemplates$Get, callback: BodyResponseCallback<Schema$NodeTemplate>): void;
        get(callback: BodyResponseCallback<Schema$NodeTemplate>): void;
        /**
         * compute.nodeTemplates.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.nodeTemplates.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Nodetemplates$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Nodetemplates$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Nodetemplates$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.nodeTemplates.insert
         * @desc Creates a NodeTemplate resource in the specified project using the data included in the request.
         * @alias compute.nodeTemplates.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().NodeTemplate} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Nodetemplates$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Nodetemplates$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Nodetemplates$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.nodeTemplates.list
         * @desc Retrieves a list of node templates available to the specified project.
         * @alias compute.nodeTemplates.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Nodetemplates$List, options?: MethodOptions): GaxiosPromise<Schema$NodeTemplateList>;
        list(params: Params$Resource$Nodetemplates$List, options: MethodOptions | BodyResponseCallback<Schema$NodeTemplateList>, callback: BodyResponseCallback<Schema$NodeTemplateList>): void;
        list(params: Params$Resource$Nodetemplates$List, callback: BodyResponseCallback<Schema$NodeTemplateList>): void;
        list(callback: BodyResponseCallback<Schema$NodeTemplateList>): void;
        /**
         * compute.nodeTemplates.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.nodeTemplates.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Nodetemplates$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Nodetemplates$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Nodetemplates$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.nodeTemplates.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.nodeTemplates.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Nodetemplates$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Nodetemplates$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Nodetemplates$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Nodetemplates$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Nodetemplates$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NodeTemplate resource to delete.
         */
        nodeTemplate?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Nodetemplates$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the node template to return.
         */
        nodeTemplate?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Nodetemplates$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Nodetemplates$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NodeTemplate;
    }
    interface Params$Resource$Nodetemplates$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Nodetemplates$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetPolicyRequest;
    }
    interface Params$Resource$Nodetemplates$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Nodetypes {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.nodeTypes.aggregatedList
         * @desc Retrieves an aggregated list of node types.
         * @alias compute.nodeTypes.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Nodetypes$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$NodeTypeAggregatedList>;
        aggregatedList(params: Params$Resource$Nodetypes$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$NodeTypeAggregatedList>, callback: BodyResponseCallback<Schema$NodeTypeAggregatedList>): void;
        aggregatedList(params: Params$Resource$Nodetypes$Aggregatedlist, callback: BodyResponseCallback<Schema$NodeTypeAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$NodeTypeAggregatedList>): void;
        /**
         * compute.nodeTypes.get
         * @desc Returns the specified node type. Gets a list of available node types by making a list() request.
         * @alias compute.nodeTypes.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.nodeType Name of the node type to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Nodetypes$Get, options?: MethodOptions): GaxiosPromise<Schema$NodeType>;
        get(params: Params$Resource$Nodetypes$Get, options: MethodOptions | BodyResponseCallback<Schema$NodeType>, callback: BodyResponseCallback<Schema$NodeType>): void;
        get(params: Params$Resource$Nodetypes$Get, callback: BodyResponseCallback<Schema$NodeType>): void;
        get(callback: BodyResponseCallback<Schema$NodeType>): void;
        /**
         * compute.nodeTypes.list
         * @desc Retrieves a list of node types available to the specified project.
         * @alias compute.nodeTypes.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Nodetypes$List, options?: MethodOptions): GaxiosPromise<Schema$NodeTypeList>;
        list(params: Params$Resource$Nodetypes$List, options: MethodOptions | BodyResponseCallback<Schema$NodeTypeList>, callback: BodyResponseCallback<Schema$NodeTypeList>): void;
        list(params: Params$Resource$Nodetypes$List, callback: BodyResponseCallback<Schema$NodeTypeList>): void;
        list(callback: BodyResponseCallback<Schema$NodeTypeList>): void;
    }
    interface Params$Resource$Nodetypes$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Nodetypes$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the node type to return.
         */
        nodeType?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Nodetypes$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    class Resource$Organizationsecuritypolicies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.organizationSecurityPolicies.addAssociation
         * @desc Inserts an association for the specified security policy.
         * @alias compute.organizationSecurityPolicies.addAssociation
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {boolean=} params.replaceExistingAssociation Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an assocation already exists.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {().SecurityPolicyAssociation} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addAssociation(params?: Params$Resource$Organizationsecuritypolicies$Addassociation, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addAssociation(params: Params$Resource$Organizationsecuritypolicies$Addassociation, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addAssociation(params: Params$Resource$Organizationsecuritypolicies$Addassociation, callback: BodyResponseCallback<Schema$Operation>): void;
        addAssociation(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.addRule
         * @desc Inserts a rule into a security policy.
         * @alias compute.organizationSecurityPolicies.addRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {().SecurityPolicyRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addRule(params?: Params$Resource$Organizationsecuritypolicies$Addrule, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addRule(params: Params$Resource$Organizationsecuritypolicies$Addrule, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addRule(params: Params$Resource$Organizationsecuritypolicies$Addrule, callback: BodyResponseCallback<Schema$Operation>): void;
        addRule(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.copyRules
         * @desc Copies rules to the specified security policy.
         * @alias compute.organizationSecurityPolicies.copyRules
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {string=} params.sourceSecurityPolicy The security policy from which to copy rules.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        copyRules(params?: Params$Resource$Organizationsecuritypolicies$Copyrules, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        copyRules(params: Params$Resource$Organizationsecuritypolicies$Copyrules, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        copyRules(params: Params$Resource$Organizationsecuritypolicies$Copyrules, callback: BodyResponseCallback<Schema$Operation>): void;
        copyRules(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.delete
         * @desc Deletes the specified policy.
         * @alias compute.organizationSecurityPolicies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Organizationsecuritypolicies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Organizationsecuritypolicies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Organizationsecuritypolicies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.get
         * @desc List all of the ordered rules present in a single specified policy.
         * @alias compute.organizationSecurityPolicies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.securityPolicy Name of the security policy to get.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Organizationsecuritypolicies$Get, options?: MethodOptions): GaxiosPromise<Schema$SecurityPolicy>;
        get(params: Params$Resource$Organizationsecuritypolicies$Get, options: MethodOptions | BodyResponseCallback<Schema$SecurityPolicy>, callback: BodyResponseCallback<Schema$SecurityPolicy>): void;
        get(params: Params$Resource$Organizationsecuritypolicies$Get, callback: BodyResponseCallback<Schema$SecurityPolicy>): void;
        get(callback: BodyResponseCallback<Schema$SecurityPolicy>): void;
        /**
         * compute.organizationSecurityPolicies.getAssociation
         * @desc Gets an association with the specified name.
         * @alias compute.organizationSecurityPolicies.getAssociation
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.name The name of the association to get from the security policy.
         * @param {string} params.securityPolicy Name of the security policy to which the queried rule belongs.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getAssociation(params?: Params$Resource$Organizationsecuritypolicies$Getassociation, options?: MethodOptions): GaxiosPromise<Schema$SecurityPolicyAssociation>;
        getAssociation(params: Params$Resource$Organizationsecuritypolicies$Getassociation, options: MethodOptions | BodyResponseCallback<Schema$SecurityPolicyAssociation>, callback: BodyResponseCallback<Schema$SecurityPolicyAssociation>): void;
        getAssociation(params: Params$Resource$Organizationsecuritypolicies$Getassociation, callback: BodyResponseCallback<Schema$SecurityPolicyAssociation>): void;
        getAssociation(callback: BodyResponseCallback<Schema$SecurityPolicyAssociation>): void;
        /**
         * compute.organizationSecurityPolicies.getRule
         * @desc Gets a rule at the specified priority.
         * @alias compute.organizationSecurityPolicies.getRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer=} params.priority The priority of the rule to get from the security policy.
         * @param {string} params.securityPolicy Name of the security policy to which the queried rule belongs.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getRule(params?: Params$Resource$Organizationsecuritypolicies$Getrule, options?: MethodOptions): GaxiosPromise<Schema$SecurityPolicyRule>;
        getRule(params: Params$Resource$Organizationsecuritypolicies$Getrule, options: MethodOptions | BodyResponseCallback<Schema$SecurityPolicyRule>, callback: BodyResponseCallback<Schema$SecurityPolicyRule>): void;
        getRule(params: Params$Resource$Organizationsecuritypolicies$Getrule, callback: BodyResponseCallback<Schema$SecurityPolicyRule>): void;
        getRule(callback: BodyResponseCallback<Schema$SecurityPolicyRule>): void;
        /**
         * compute.organizationSecurityPolicies.insert
         * @desc Creates a new policy in the specified project using the data included in the request.
         * @alias compute.organizationSecurityPolicies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.parentId Parent ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().SecurityPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Organizationsecuritypolicies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Organizationsecuritypolicies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Organizationsecuritypolicies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.list
         * @desc List all the policies that have been configured for the specified project.
         * @alias compute.organizationSecurityPolicies.list
         * @memberOf! ()
         *
         * @param {object=} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string=} params.parentId Parent ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Organizationsecuritypolicies$List, options?: MethodOptions): GaxiosPromise<Schema$SecurityPolicyList>;
        list(params: Params$Resource$Organizationsecuritypolicies$List, options: MethodOptions | BodyResponseCallback<Schema$SecurityPolicyList>, callback: BodyResponseCallback<Schema$SecurityPolicyList>): void;
        list(params: Params$Resource$Organizationsecuritypolicies$List, callback: BodyResponseCallback<Schema$SecurityPolicyList>): void;
        list(callback: BodyResponseCallback<Schema$SecurityPolicyList>): void;
        /**
         * compute.organizationSecurityPolicies.listAssociations
         * @desc Lists associations of a specified target, i.e., organization or folder.
         * @alias compute.organizationSecurityPolicies.listAssociations
         * @memberOf! ()
         *
         * @param {object=} params Parameters for request
         * @param {string=} params.targetResource The target resource to list associations. It is an organization, or a folder.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listAssociations(params?: Params$Resource$Organizationsecuritypolicies$Listassociations, options?: MethodOptions): GaxiosPromise<Schema$OrganizationSecurityPoliciesListAssociationsResponse>;
        listAssociations(params: Params$Resource$Organizationsecuritypolicies$Listassociations, options: MethodOptions | BodyResponseCallback<Schema$OrganizationSecurityPoliciesListAssociationsResponse>, callback: BodyResponseCallback<Schema$OrganizationSecurityPoliciesListAssociationsResponse>): void;
        listAssociations(params: Params$Resource$Organizationsecuritypolicies$Listassociations, callback: BodyResponseCallback<Schema$OrganizationSecurityPoliciesListAssociationsResponse>): void;
        listAssociations(callback: BodyResponseCallback<Schema$OrganizationSecurityPoliciesListAssociationsResponse>): void;
        /**
         * compute.organizationSecurityPolicies.move
         * @desc Moves the specified security policy.
         * @alias compute.organizationSecurityPolicies.move
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.parentId The new parent of the security policy.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        move(params?: Params$Resource$Organizationsecuritypolicies$Move, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        move(params: Params$Resource$Organizationsecuritypolicies$Move, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        move(params: Params$Resource$Organizationsecuritypolicies$Move, callback: BodyResponseCallback<Schema$Operation>): void;
        move(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.patch
         * @desc Patches the specified policy with the data included in the request.
         * @alias compute.organizationSecurityPolicies.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {().SecurityPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Organizationsecuritypolicies$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Organizationsecuritypolicies$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Organizationsecuritypolicies$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.patchRule
         * @desc Patches a rule at the specified priority.
         * @alias compute.organizationSecurityPolicies.patchRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer=} params.priority The priority of the rule to patch.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {().SecurityPolicyRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patchRule(params?: Params$Resource$Organizationsecuritypolicies$Patchrule, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patchRule(params: Params$Resource$Organizationsecuritypolicies$Patchrule, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patchRule(params: Params$Resource$Organizationsecuritypolicies$Patchrule, callback: BodyResponseCallback<Schema$Operation>): void;
        patchRule(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.removeAssociation
         * @desc Removes an association for the specified security policy.
         * @alias compute.organizationSecurityPolicies.removeAssociation
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.name Name for the attachment that will be removed.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeAssociation(params?: Params$Resource$Organizationsecuritypolicies$Removeassociation, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeAssociation(params: Params$Resource$Organizationsecuritypolicies$Removeassociation, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeAssociation(params: Params$Resource$Organizationsecuritypolicies$Removeassociation, callback: BodyResponseCallback<Schema$Operation>): void;
        removeAssociation(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.organizationSecurityPolicies.removeRule
         * @desc Deletes a rule at the specified priority.
         * @alias compute.organizationSecurityPolicies.removeRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer=} params.priority The priority of the rule to remove from the security policy.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeRule(params?: Params$Resource$Organizationsecuritypolicies$Removerule, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeRule(params: Params$Resource$Organizationsecuritypolicies$Removerule, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeRule(params: Params$Resource$Organizationsecuritypolicies$Removerule, callback: BodyResponseCallback<Schema$Operation>): void;
        removeRule(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Organizationsecuritypolicies$Addassociation extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an assocation already exists.
         */
        replaceExistingAssociation?: boolean;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicyAssociation;
    }
    interface Params$Resource$Organizationsecuritypolicies$Addrule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicyRule;
    }
    interface Params$Resource$Organizationsecuritypolicies$Copyrules extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * The security policy from which to copy rules.
         */
        sourceSecurityPolicy?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to delete.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the security policy to get.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Getassociation extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the association to get from the security policy.
         */
        name?: string;
        /**
         * Name of the security policy to which the queried rule belongs.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Getrule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The priority of the rule to get from the security policy.
         */
        priority?: number;
        /**
         * Name of the security policy to which the queried rule belongs.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Parent ID for this request.
         */
        parentId?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicy;
    }
    interface Params$Resource$Organizationsecuritypolicies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Parent ID for this request.
         */
        parentId?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Listassociations extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The target resource to list associations. It is an organization, or a folder.
         */
        targetResource?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Move extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The new parent of the security policy.
         */
        parentId?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicy;
    }
    interface Params$Resource$Organizationsecuritypolicies$Patchrule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The priority of the rule to patch.
         */
        priority?: number;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicyRule;
    }
    interface Params$Resource$Organizationsecuritypolicies$Removeassociation extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name for the attachment that will be removed.
         */
        name?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Organizationsecuritypolicies$Removerule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The priority of the rule to remove from the security policy.
         */
        priority?: number;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
    }
    class Resource$Packetmirrorings {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.packetMirrorings.aggregatedList
         * @desc Retrieves an aggregated list of packetMirrorings.
         * @alias compute.packetMirrorings.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Packetmirrorings$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$PacketMirroringAggregatedList>;
        aggregatedList(params: Params$Resource$Packetmirrorings$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$PacketMirroringAggregatedList>, callback: BodyResponseCallback<Schema$PacketMirroringAggregatedList>): void;
        aggregatedList(params: Params$Resource$Packetmirrorings$Aggregatedlist, callback: BodyResponseCallback<Schema$PacketMirroringAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$PacketMirroringAggregatedList>): void;
        /**
         * compute.packetMirrorings.delete
         * @desc Deletes the specified PacketMirroring resource.
         * @alias compute.packetMirrorings.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.packetMirroring Name of the PacketMirroring resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Packetmirrorings$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Packetmirrorings$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Packetmirrorings$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.packetMirrorings.get
         * @desc Returns the specified PacketMirroring resource.
         * @alias compute.packetMirrorings.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.packetMirroring Name of the PacketMirroring resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Packetmirrorings$Get, options?: MethodOptions): GaxiosPromise<Schema$PacketMirroring>;
        get(params: Params$Resource$Packetmirrorings$Get, options: MethodOptions | BodyResponseCallback<Schema$PacketMirroring>, callback: BodyResponseCallback<Schema$PacketMirroring>): void;
        get(params: Params$Resource$Packetmirrorings$Get, callback: BodyResponseCallback<Schema$PacketMirroring>): void;
        get(callback: BodyResponseCallback<Schema$PacketMirroring>): void;
        /**
         * compute.packetMirrorings.insert
         * @desc Creates a PacketMirroring resource in the specified project and region using the data included in the request.
         * @alias compute.packetMirrorings.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().PacketMirroring} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Packetmirrorings$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Packetmirrorings$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Packetmirrorings$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.packetMirrorings.list
         * @desc Retrieves a list of PacketMirroring resources available to the specified project and region.
         * @alias compute.packetMirrorings.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Packetmirrorings$List, options?: MethodOptions): GaxiosPromise<Schema$PacketMirroringList>;
        list(params: Params$Resource$Packetmirrorings$List, options: MethodOptions | BodyResponseCallback<Schema$PacketMirroringList>, callback: BodyResponseCallback<Schema$PacketMirroringList>): void;
        list(params: Params$Resource$Packetmirrorings$List, callback: BodyResponseCallback<Schema$PacketMirroringList>): void;
        list(callback: BodyResponseCallback<Schema$PacketMirroringList>): void;
        /**
         * compute.packetMirrorings.patch
         * @desc Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
         * @alias compute.packetMirrorings.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.packetMirroring Name of the PacketMirroring resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().PacketMirroring} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Packetmirrorings$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Packetmirrorings$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Packetmirrorings$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.packetMirrorings.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.packetMirrorings.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Packetmirrorings$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Packetmirrorings$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Packetmirrorings$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Packetmirrorings$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Packetmirrorings$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the PacketMirroring resource to delete.
         */
        packetMirroring?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Packetmirrorings$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the PacketMirroring resource to return.
         */
        packetMirroring?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Packetmirrorings$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$PacketMirroring;
    }
    interface Params$Resource$Packetmirrorings$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Packetmirrorings$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the PacketMirroring resource to patch.
         */
        packetMirroring?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$PacketMirroring;
    }
    interface Params$Resource$Packetmirrorings$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Projects {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.projects.disableXpnHost
         * @desc Disable this project as a shared VPC host project.
         * @alias compute.projects.disableXpnHost
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        disableXpnHost(params?: Params$Resource$Projects$Disablexpnhost, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        disableXpnHost(params: Params$Resource$Projects$Disablexpnhost, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        disableXpnHost(params: Params$Resource$Projects$Disablexpnhost, callback: BodyResponseCallback<Schema$Operation>): void;
        disableXpnHost(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.disableXpnResource
         * @desc Disable a service resource (also known as service project) associated with this host project.
         * @alias compute.projects.disableXpnResource
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ProjectsDisableXpnResourceRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        disableXpnResource(params?: Params$Resource$Projects$Disablexpnresource, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        disableXpnResource(params: Params$Resource$Projects$Disablexpnresource, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        disableXpnResource(params: Params$Resource$Projects$Disablexpnresource, callback: BodyResponseCallback<Schema$Operation>): void;
        disableXpnResource(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.enableXpnHost
         * @desc Enable this project as a shared VPC host project.
         * @alias compute.projects.enableXpnHost
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        enableXpnHost(params?: Params$Resource$Projects$Enablexpnhost, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        enableXpnHost(params: Params$Resource$Projects$Enablexpnhost, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        enableXpnHost(params: Params$Resource$Projects$Enablexpnhost, callback: BodyResponseCallback<Schema$Operation>): void;
        enableXpnHost(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.enableXpnResource
         * @desc Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
         * @alias compute.projects.enableXpnResource
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ProjectsEnableXpnResourceRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        enableXpnResource(params?: Params$Resource$Projects$Enablexpnresource, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        enableXpnResource(params: Params$Resource$Projects$Enablexpnresource, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        enableXpnResource(params: Params$Resource$Projects$Enablexpnresource, callback: BodyResponseCallback<Schema$Operation>): void;
        enableXpnResource(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.get
         * @desc Returns the specified Project resource.
         * @alias compute.projects.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Projects$Get, options?: MethodOptions): GaxiosPromise<Schema$Project>;
        get(params: Params$Resource$Projects$Get, options: MethodOptions | BodyResponseCallback<Schema$Project>, callback: BodyResponseCallback<Schema$Project>): void;
        get(params: Params$Resource$Projects$Get, callback: BodyResponseCallback<Schema$Project>): void;
        get(callback: BodyResponseCallback<Schema$Project>): void;
        /**
         * compute.projects.getXpnHost
         * @desc Gets the shared VPC host project that this project links to. May be empty if no link exists.
         * @alias compute.projects.getXpnHost
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getXpnHost(params?: Params$Resource$Projects$Getxpnhost, options?: MethodOptions): GaxiosPromise<Schema$Project>;
        getXpnHost(params: Params$Resource$Projects$Getxpnhost, options: MethodOptions | BodyResponseCallback<Schema$Project>, callback: BodyResponseCallback<Schema$Project>): void;
        getXpnHost(params: Params$Resource$Projects$Getxpnhost, callback: BodyResponseCallback<Schema$Project>): void;
        getXpnHost(callback: BodyResponseCallback<Schema$Project>): void;
        /**
         * compute.projects.getXpnResources
         * @desc Gets service resources (a.k.a service project) associated with this host project.
         * @alias compute.projects.getXpnResources
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.order_by Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getXpnResources(params?: Params$Resource$Projects$Getxpnresources, options?: MethodOptions): GaxiosPromise<Schema$ProjectsGetXpnResources>;
        getXpnResources(params: Params$Resource$Projects$Getxpnresources, options: MethodOptions | BodyResponseCallback<Schema$ProjectsGetXpnResources>, callback: BodyResponseCallback<Schema$ProjectsGetXpnResources>): void;
        getXpnResources(params: Params$Resource$Projects$Getxpnresources, callback: BodyResponseCallback<Schema$ProjectsGetXpnResources>): void;
        getXpnResources(callback: BodyResponseCallback<Schema$ProjectsGetXpnResources>): void;
        /**
         * compute.projects.listXpnHosts
         * @desc Lists all shared VPC host projects visible to the user in an organization.
         * @alias compute.projects.listXpnHosts
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.order_by Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {().ProjectsListXpnHostsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listXpnHosts(params?: Params$Resource$Projects$Listxpnhosts, options?: MethodOptions): GaxiosPromise<Schema$XpnHostList>;
        listXpnHosts(params: Params$Resource$Projects$Listxpnhosts, options: MethodOptions | BodyResponseCallback<Schema$XpnHostList>, callback: BodyResponseCallback<Schema$XpnHostList>): void;
        listXpnHosts(params: Params$Resource$Projects$Listxpnhosts, callback: BodyResponseCallback<Schema$XpnHostList>): void;
        listXpnHosts(callback: BodyResponseCallback<Schema$XpnHostList>): void;
        /**
         * compute.projects.moveDisk
         * @desc Moves a persistent disk from one zone to another.
         * @alias compute.projects.moveDisk
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().DiskMoveRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        moveDisk(params?: Params$Resource$Projects$Movedisk, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        moveDisk(params: Params$Resource$Projects$Movedisk, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        moveDisk(params: Params$Resource$Projects$Movedisk, callback: BodyResponseCallback<Schema$Operation>): void;
        moveDisk(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.moveInstance
         * @desc Moves an instance and its attached persistent disks from one zone to another.
         * @alias compute.projects.moveInstance
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().InstanceMoveRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        moveInstance(params?: Params$Resource$Projects$Moveinstance, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        moveInstance(params: Params$Resource$Projects$Moveinstance, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        moveInstance(params: Params$Resource$Projects$Moveinstance, callback: BodyResponseCallback<Schema$Operation>): void;
        moveInstance(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.setCommonInstanceMetadata
         * @desc Sets metadata common to all instances within the specified project using the data included in the request.
         * @alias compute.projects.setCommonInstanceMetadata
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Metadata} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setCommonInstanceMetadata(params?: Params$Resource$Projects$Setcommoninstancemetadata, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setCommonInstanceMetadata(params: Params$Resource$Projects$Setcommoninstancemetadata, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setCommonInstanceMetadata(params: Params$Resource$Projects$Setcommoninstancemetadata, callback: BodyResponseCallback<Schema$Operation>): void;
        setCommonInstanceMetadata(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.setDefaultNetworkTier
         * @desc Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
         * @alias compute.projects.setDefaultNetworkTier
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ProjectsSetDefaultNetworkTierRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setDefaultNetworkTier(params?: Params$Resource$Projects$Setdefaultnetworktier, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setDefaultNetworkTier(params: Params$Resource$Projects$Setdefaultnetworktier, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setDefaultNetworkTier(params: Params$Resource$Projects$Setdefaultnetworktier, callback: BodyResponseCallback<Schema$Operation>): void;
        setDefaultNetworkTier(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.setDefaultServiceAccount
         * @desc Sets the default service account of the project. The default service account is used when a VM instance is created with the service account email address set to "default".
         * @alias compute.projects.setDefaultServiceAccount
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ProjectsSetDefaultServiceAccountRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setDefaultServiceAccount(params?: Params$Resource$Projects$Setdefaultserviceaccount, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setDefaultServiceAccount(params: Params$Resource$Projects$Setdefaultserviceaccount, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setDefaultServiceAccount(params: Params$Resource$Projects$Setdefaultserviceaccount, callback: BodyResponseCallback<Schema$Operation>): void;
        setDefaultServiceAccount(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.projects.setUsageExportBucket
         * @desc Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
         * @alias compute.projects.setUsageExportBucket
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().UsageExportLocation} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setUsageExportBucket(params?: Params$Resource$Projects$Setusageexportbucket, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setUsageExportBucket(params: Params$Resource$Projects$Setusageexportbucket, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setUsageExportBucket(params: Params$Resource$Projects$Setusageexportbucket, callback: BodyResponseCallback<Schema$Operation>): void;
        setUsageExportBucket(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Projects$Disablexpnhost extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Projects$Disablexpnresource extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ProjectsDisableXpnResourceRequest;
    }
    interface Params$Resource$Projects$Enablexpnhost extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Projects$Enablexpnresource extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ProjectsEnableXpnResourceRequest;
    }
    interface Params$Resource$Projects$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Projects$Getxpnhost extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Projects$Getxpnresources extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        order_by?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Projects$Listxpnhosts extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        order_by?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ProjectsListXpnHostsRequest;
    }
    interface Params$Resource$Projects$Movedisk extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$DiskMoveRequest;
    }
    interface Params$Resource$Projects$Moveinstance extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceMoveRequest;
    }
    interface Params$Resource$Projects$Setcommoninstancemetadata extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Metadata;
    }
    interface Params$Resource$Projects$Setdefaultnetworktier extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ProjectsSetDefaultNetworkTierRequest;
    }
    interface Params$Resource$Projects$Setdefaultserviceaccount extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ProjectsSetDefaultServiceAccountRequest;
    }
    interface Params$Resource$Projects$Setusageexportbucket extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UsageExportLocation;
    }
    class Resource$Regionautoscalers {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionAutoscalers.delete
         * @desc Deletes the specified autoscaler.
         * @alias compute.regionAutoscalers.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.autoscaler Name of the autoscaler to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionautoscalers$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regionautoscalers$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regionautoscalers$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionAutoscalers.get
         * @desc Returns the specified autoscaler.
         * @alias compute.regionAutoscalers.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.autoscaler Name of the autoscaler to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionautoscalers$Get, options?: MethodOptions): GaxiosPromise<Schema$Autoscaler>;
        get(params: Params$Resource$Regionautoscalers$Get, options: MethodOptions | BodyResponseCallback<Schema$Autoscaler>, callback: BodyResponseCallback<Schema$Autoscaler>): void;
        get(params: Params$Resource$Regionautoscalers$Get, callback: BodyResponseCallback<Schema$Autoscaler>): void;
        get(callback: BodyResponseCallback<Schema$Autoscaler>): void;
        /**
         * compute.regionAutoscalers.insert
         * @desc Creates an autoscaler in the specified project using the data included in the request.
         * @alias compute.regionAutoscalers.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Autoscaler} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regionautoscalers$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regionautoscalers$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regionautoscalers$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionAutoscalers.list
         * @desc Retrieves a list of autoscalers contained within the specified region.
         * @alias compute.regionAutoscalers.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionautoscalers$List, options?: MethodOptions): GaxiosPromise<Schema$RegionAutoscalerList>;
        list(params: Params$Resource$Regionautoscalers$List, options: MethodOptions | BodyResponseCallback<Schema$RegionAutoscalerList>, callback: BodyResponseCallback<Schema$RegionAutoscalerList>): void;
        list(params: Params$Resource$Regionautoscalers$List, callback: BodyResponseCallback<Schema$RegionAutoscalerList>): void;
        list(callback: BodyResponseCallback<Schema$RegionAutoscalerList>): void;
        /**
         * compute.regionAutoscalers.patch
         * @desc Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.regionAutoscalers.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.autoscaler Name of the autoscaler to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Autoscaler} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Regionautoscalers$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Regionautoscalers$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Regionautoscalers$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionAutoscalers.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionAutoscalers.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regionautoscalers$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regionautoscalers$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regionautoscalers$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.regionAutoscalers.update
         * @desc Updates an autoscaler in the specified project using the data included in the request.
         * @alias compute.regionAutoscalers.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.autoscaler Name of the autoscaler to update.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Autoscaler} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Regionautoscalers$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Regionautoscalers$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Regionautoscalers$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Regionautoscalers$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to delete.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Regionautoscalers$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to return.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionautoscalers$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Autoscaler;
    }
    interface Params$Resource$Regionautoscalers$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionautoscalers$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to patch.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Autoscaler;
    }
    interface Params$Resource$Regionautoscalers$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Regionautoscalers$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the autoscaler to update.
         */
        autoscaler?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Autoscaler;
    }
    class Resource$Regionbackendservices {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionBackendServices.delete
         * @desc Deletes the specified regional BackendService resource.
         * @alias compute.regionBackendServices.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionbackendservices$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regionbackendservices$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regionbackendservices$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionBackendServices.get
         * @desc Returns the specified regional BackendService resource.
         * @alias compute.regionBackendServices.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionbackendservices$Get, options?: MethodOptions): GaxiosPromise<Schema$BackendService>;
        get(params: Params$Resource$Regionbackendservices$Get, options: MethodOptions | BodyResponseCallback<Schema$BackendService>, callback: BodyResponseCallback<Schema$BackendService>): void;
        get(params: Params$Resource$Regionbackendservices$Get, callback: BodyResponseCallback<Schema$BackendService>): void;
        get(callback: BodyResponseCallback<Schema$BackendService>): void;
        /**
         * compute.regionBackendServices.getHealth
         * @desc Gets the most recent health check results for this regional BackendService.
         * @alias compute.regionBackendServices.getHealth
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource for which to get health.
         * @param {string} params.project
         * @param {string} params.region Name of the region scoping this request.
         * @param {().ResourceGroupReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getHealth(params?: Params$Resource$Regionbackendservices$Gethealth, options?: MethodOptions): GaxiosPromise<Schema$BackendServiceGroupHealth>;
        getHealth(params: Params$Resource$Regionbackendservices$Gethealth, options: MethodOptions | BodyResponseCallback<Schema$BackendServiceGroupHealth>, callback: BodyResponseCallback<Schema$BackendServiceGroupHealth>): void;
        getHealth(params: Params$Resource$Regionbackendservices$Gethealth, callback: BodyResponseCallback<Schema$BackendServiceGroupHealth>): void;
        getHealth(callback: BodyResponseCallback<Schema$BackendServiceGroupHealth>): void;
        /**
         * compute.regionBackendServices.insert
         * @desc Creates a regional BackendService resource in the specified project using the data included in the request. There are several restrictions and guidelines to keep in mind when creating a regional backend service. Read  Restrictions and Guidelines for more information.
         * @alias compute.regionBackendServices.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendService} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regionbackendservices$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regionbackendservices$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regionbackendservices$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionBackendServices.list
         * @desc Retrieves the list of regional BackendService resources available to the specified project in the given region.
         * @alias compute.regionBackendServices.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionbackendservices$List, options?: MethodOptions): GaxiosPromise<Schema$BackendServiceList>;
        list(params: Params$Resource$Regionbackendservices$List, options: MethodOptions | BodyResponseCallback<Schema$BackendServiceList>, callback: BodyResponseCallback<Schema$BackendServiceList>): void;
        list(params: Params$Resource$Regionbackendservices$List, callback: BodyResponseCallback<Schema$BackendServiceList>): void;
        list(callback: BodyResponseCallback<Schema$BackendServiceList>): void;
        /**
         * compute.regionBackendServices.patch
         * @desc Updates the specified regional BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.regionBackendServices.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendService} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Regionbackendservices$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Regionbackendservices$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Regionbackendservices$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionBackendServices.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionBackendServices.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regionbackendservices$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regionbackendservices$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regionbackendservices$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.regionBackendServices.update
         * @desc Updates the specified regional BackendService resource with the data included in the request. There are several restrictions and guidelines to keep in mind when updating a backend service. Read  Restrictions and Guidelines for more information.
         * @alias compute.regionBackendServices.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.backendService Name of the BackendService resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().BackendService} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Regionbackendservices$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Regionbackendservices$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Regionbackendservices$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Regionbackendservices$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to delete.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Regionbackendservices$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to return.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionbackendservices$Gethealth extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource for which to get health.
         */
        backendService?: string;
        /**
         *
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ResourceGroupReference;
    }
    interface Params$Resource$Regionbackendservices$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendService;
    }
    interface Params$Resource$Regionbackendservices$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionbackendservices$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to patch.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendService;
    }
    interface Params$Resource$Regionbackendservices$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Regionbackendservices$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the BackendService resource to update.
         */
        backendService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$BackendService;
    }
    class Resource$Regioncommitments {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionCommitments.aggregatedList
         * @desc Retrieves an aggregated list of commitments.
         * @alias compute.regionCommitments.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Regioncommitments$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$CommitmentAggregatedList>;
        aggregatedList(params: Params$Resource$Regioncommitments$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$CommitmentAggregatedList>, callback: BodyResponseCallback<Schema$CommitmentAggregatedList>): void;
        aggregatedList(params: Params$Resource$Regioncommitments$Aggregatedlist, callback: BodyResponseCallback<Schema$CommitmentAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$CommitmentAggregatedList>): void;
        /**
         * compute.regionCommitments.get
         * @desc Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
         * @alias compute.regionCommitments.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.commitment Name of the commitment to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regioncommitments$Get, options?: MethodOptions): GaxiosPromise<Schema$Commitment>;
        get(params: Params$Resource$Regioncommitments$Get, options: MethodOptions | BodyResponseCallback<Schema$Commitment>, callback: BodyResponseCallback<Schema$Commitment>): void;
        get(params: Params$Resource$Regioncommitments$Get, callback: BodyResponseCallback<Schema$Commitment>): void;
        get(callback: BodyResponseCallback<Schema$Commitment>): void;
        /**
         * compute.regionCommitments.insert
         * @desc Creates a commitment in the specified project using the data included in the request.
         * @alias compute.regionCommitments.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Commitment} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regioncommitments$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regioncommitments$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regioncommitments$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionCommitments.list
         * @desc Retrieves a list of commitments contained within the specified region.
         * @alias compute.regionCommitments.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regioncommitments$List, options?: MethodOptions): GaxiosPromise<Schema$CommitmentList>;
        list(params: Params$Resource$Regioncommitments$List, options: MethodOptions | BodyResponseCallback<Schema$CommitmentList>, callback: BodyResponseCallback<Schema$CommitmentList>): void;
        list(params: Params$Resource$Regioncommitments$List, callback: BodyResponseCallback<Schema$CommitmentList>): void;
        list(callback: BodyResponseCallback<Schema$CommitmentList>): void;
        /**
         * compute.regionCommitments.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionCommitments.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regioncommitments$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regioncommitments$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regioncommitments$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.regionCommitments.updateReservations
         * @desc Update the shape of reservations for GPUS/Local SSDs of reservations within the commitments.
         * @alias compute.regionCommitments.updateReservations
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.commitment Name of the commitment of which the reservation's capacities are being updated.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionCommitmentsUpdateReservationsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updateReservations(params?: Params$Resource$Regioncommitments$Updatereservations, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updateReservations(params: Params$Resource$Regioncommitments$Updatereservations, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updateReservations(params: Params$Resource$Regioncommitments$Updatereservations, callback: BodyResponseCallback<Schema$Operation>): void;
        updateReservations(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Regioncommitments$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Regioncommitments$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the commitment to return.
         */
        commitment?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regioncommitments$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Commitment;
    }
    interface Params$Resource$Regioncommitments$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regioncommitments$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Regioncommitments$Updatereservations extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the commitment of which the reservation's capacities are being updated.
         */
        commitment?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionCommitmentsUpdateReservationsRequest;
    }
    class Resource$Regiondisks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionDisks.addResourcePolicies
         * @desc Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
         * @alias compute.regionDisks.addResourcePolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk The disk name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionDisksAddResourcePoliciesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addResourcePolicies(params?: Params$Resource$Regiondisks$Addresourcepolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addResourcePolicies(params: Params$Resource$Regiondisks$Addresourcepolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addResourcePolicies(params: Params$Resource$Regiondisks$Addresourcepolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        addResourcePolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionDisks.createSnapshot
         * @desc Creates a snapshot of this regional disk.
         * @alias compute.regionDisks.createSnapshot
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk Name of the regional persistent disk to snapshot.
         * @param {boolean=} params.guestFlush [Input Only] Specifies to create an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Snapshot} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        createSnapshot(params?: Params$Resource$Regiondisks$Createsnapshot, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        createSnapshot(params: Params$Resource$Regiondisks$Createsnapshot, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        createSnapshot(params: Params$Resource$Regiondisks$Createsnapshot, callback: BodyResponseCallback<Schema$Operation>): void;
        createSnapshot(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionDisks.delete
         * @desc Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
         * @alias compute.regionDisks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk Name of the regional persistent disk to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regiondisks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regiondisks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regiondisks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionDisks.get
         * @desc Returns a specified regional persistent disk.
         * @alias compute.regionDisks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk Name of the regional persistent disk to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regiondisks$Get, options?: MethodOptions): GaxiosPromise<Schema$Disk>;
        get(params: Params$Resource$Regiondisks$Get, options: MethodOptions | BodyResponseCallback<Schema$Disk>, callback: BodyResponseCallback<Schema$Disk>): void;
        get(params: Params$Resource$Regiondisks$Get, callback: BodyResponseCallback<Schema$Disk>): void;
        get(callback: BodyResponseCallback<Schema$Disk>): void;
        /**
         * compute.regionDisks.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.regionDisks.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Regiondisks$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Regiondisks$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Regiondisks$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.regionDisks.insert
         * @desc Creates a persistent regional disk in the specified project using the data included in the request.
         * @alias compute.regionDisks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string=} params.sourceImage Optional. Source image to restore onto a disk.
         * @param {().Disk} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regiondisks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regiondisks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regiondisks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionDisks.list
         * @desc Retrieves the list of persistent disks contained within the specified region.
         * @alias compute.regionDisks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regiondisks$List, options?: MethodOptions): GaxiosPromise<Schema$DiskList>;
        list(params: Params$Resource$Regiondisks$List, options: MethodOptions | BodyResponseCallback<Schema$DiskList>, callback: BodyResponseCallback<Schema$DiskList>): void;
        list(params: Params$Resource$Regiondisks$List, callback: BodyResponseCallback<Schema$DiskList>): void;
        list(callback: BodyResponseCallback<Schema$DiskList>): void;
        /**
         * compute.regionDisks.removeResourcePolicies
         * @desc Removes resource policies from a regional disk.
         * @alias compute.regionDisks.removeResourcePolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk The disk name for this request.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionDisksRemoveResourcePoliciesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeResourcePolicies(params?: Params$Resource$Regiondisks$Removeresourcepolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeResourcePolicies(params: Params$Resource$Regiondisks$Removeresourcepolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeResourcePolicies(params: Params$Resource$Regiondisks$Removeresourcepolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        removeResourcePolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionDisks.resize
         * @desc Resizes the specified regional persistent disk.
         * @alias compute.regionDisks.resize
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.disk Name of the regional persistent disk.
         * @param {string} params.project The project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionDisksResizeRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        resize(params?: Params$Resource$Regiondisks$Resize, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        resize(params: Params$Resource$Regiondisks$Resize, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(params: Params$Resource$Regiondisks$Resize, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionDisks.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.regionDisks.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Regiondisks$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Regiondisks$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Regiondisks$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.regionDisks.setLabels
         * @desc Sets the labels on the target regional disk.
         * @alias compute.regionDisks.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Regiondisks$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Regiondisks$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Regiondisks$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionDisks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionDisks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regiondisks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regiondisks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regiondisks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Regiondisks$Addresourcepolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The disk name for this request.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionDisksAddResourcePoliciesRequest;
    }
    interface Params$Resource$Regiondisks$Createsnapshot extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the regional persistent disk to snapshot.
         */
        disk?: string;
        /**
         * [Input Only] Specifies to create an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
         */
        guestFlush?: boolean;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Snapshot;
    }
    interface Params$Resource$Regiondisks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the regional persistent disk to delete.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Regiondisks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the regional persistent disk to return.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regiondisks$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Regiondisks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Optional. Source image to restore onto a disk.
         */
        sourceImage?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Disk;
    }
    interface Params$Resource$Regiondisks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regiondisks$Removeresourcepolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The disk name for this request.
         */
        disk?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionDisksRemoveResourcePoliciesRequest;
    }
    interface Params$Resource$Regiondisks$Resize extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the regional persistent disk.
         */
        disk?: string;
        /**
         * The project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionDisksResizeRequest;
    }
    interface Params$Resource$Regiondisks$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetPolicyRequest;
    }
    interface Params$Resource$Regiondisks$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetLabelsRequest;
    }
    interface Params$Resource$Regiondisks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Regiondisktypes {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionDiskTypes.get
         * @desc Returns the specified regional disk type. Gets a list of available disk types by making a list() request.
         * @alias compute.regionDiskTypes.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.diskType Name of the disk type to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regiondisktypes$Get, options?: MethodOptions): GaxiosPromise<Schema$DiskType>;
        get(params: Params$Resource$Regiondisktypes$Get, options: MethodOptions | BodyResponseCallback<Schema$DiskType>, callback: BodyResponseCallback<Schema$DiskType>): void;
        get(params: Params$Resource$Regiondisktypes$Get, callback: BodyResponseCallback<Schema$DiskType>): void;
        get(callback: BodyResponseCallback<Schema$DiskType>): void;
        /**
         * compute.regionDiskTypes.list
         * @desc Retrieves a list of regional disk types available to the specified project.
         * @alias compute.regionDiskTypes.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regiondisktypes$List, options?: MethodOptions): GaxiosPromise<Schema$RegionDiskTypeList>;
        list(params: Params$Resource$Regiondisktypes$List, options: MethodOptions | BodyResponseCallback<Schema$RegionDiskTypeList>, callback: BodyResponseCallback<Schema$RegionDiskTypeList>): void;
        list(params: Params$Resource$Regiondisktypes$List, callback: BodyResponseCallback<Schema$RegionDiskTypeList>): void;
        list(callback: BodyResponseCallback<Schema$RegionDiskTypeList>): void;
    }
    interface Params$Resource$Regiondisktypes$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the disk type to return.
         */
        diskType?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regiondisktypes$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
    }
    class Resource$Regionhealthchecks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionHealthChecks.delete
         * @desc Deletes the specified HealthCheck resource.
         * @alias compute.regionHealthChecks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionhealthchecks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regionhealthchecks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regionhealthchecks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionHealthChecks.get
         * @desc Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
         * @alias compute.regionHealthChecks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionhealthchecks$Get, options?: MethodOptions): GaxiosPromise<Schema$HealthCheck>;
        get(params: Params$Resource$Regionhealthchecks$Get, options: MethodOptions | BodyResponseCallback<Schema$HealthCheck>, callback: BodyResponseCallback<Schema$HealthCheck>): void;
        get(params: Params$Resource$Regionhealthchecks$Get, callback: BodyResponseCallback<Schema$HealthCheck>): void;
        get(callback: BodyResponseCallback<Schema$HealthCheck>): void;
        /**
         * compute.regionHealthChecks.insert
         * @desc Creates a HealthCheck resource in the specified project using the data included in the request.
         * @alias compute.regionHealthChecks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regionhealthchecks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regionhealthchecks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regionhealthchecks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionHealthChecks.list
         * @desc Retrieves the list of HealthCheck resources available to the specified project.
         * @alias compute.regionHealthChecks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionhealthchecks$List, options?: MethodOptions): GaxiosPromise<Schema$HealthCheckList>;
        list(params: Params$Resource$Regionhealthchecks$List, options: MethodOptions | BodyResponseCallback<Schema$HealthCheckList>, callback: BodyResponseCallback<Schema$HealthCheckList>): void;
        list(params: Params$Resource$Regionhealthchecks$List, callback: BodyResponseCallback<Schema$HealthCheckList>): void;
        list(callback: BodyResponseCallback<Schema$HealthCheckList>): void;
        /**
         * compute.regionHealthChecks.patch
         * @desc Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.regionHealthChecks.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Regionhealthchecks$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Regionhealthchecks$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Regionhealthchecks$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionHealthChecks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionHealthChecks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regionhealthchecks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regionhealthchecks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regionhealthchecks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.regionHealthChecks.update
         * @desc Updates a HealthCheck resource in the specified project using the data included in the request.
         * @alias compute.regionHealthChecks.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheck Name of the HealthCheck resource to update.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HealthCheck} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Regionhealthchecks$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Regionhealthchecks$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Regionhealthchecks$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Regionhealthchecks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to delete.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Regionhealthchecks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to return.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionhealthchecks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HealthCheck;
    }
    interface Params$Resource$Regionhealthchecks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionhealthchecks$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to patch.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HealthCheck;
    }
    interface Params$Resource$Regionhealthchecks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Regionhealthchecks$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheck resource to update.
         */
        healthCheck?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HealthCheck;
    }
    class Resource$Regionhealthcheckservices {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionHealthCheckServices.delete
         * @desc Deletes the specified regional HealthCheckService.
         * @alias compute.regionHealthCheckServices.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheckService Name of the HealthCheckService to delete. The name must be 1-63 characters long, and comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionhealthcheckservices$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regionhealthcheckservices$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regionhealthcheckservices$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionHealthCheckServices.get
         * @desc Returns the specified regional HealthCheckService resource.
         * @alias compute.regionHealthCheckServices.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.healthCheckService Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionhealthcheckservices$Get, options?: MethodOptions): GaxiosPromise<Schema$HealthCheckService>;
        get(params: Params$Resource$Regionhealthcheckservices$Get, options: MethodOptions | BodyResponseCallback<Schema$HealthCheckService>, callback: BodyResponseCallback<Schema$HealthCheckService>): void;
        get(params: Params$Resource$Regionhealthcheckservices$Get, callback: BodyResponseCallback<Schema$HealthCheckService>): void;
        get(callback: BodyResponseCallback<Schema$HealthCheckService>): void;
        /**
         * compute.regionHealthCheckServices.insert
         * @desc Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
         * @alias compute.regionHealthCheckServices.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().HealthCheckService} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regionhealthcheckservices$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regionhealthcheckservices$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regionhealthcheckservices$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionHealthCheckServices.list
         * @desc Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
         * @alias compute.regionHealthCheckServices.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionhealthcheckservices$List, options?: MethodOptions): GaxiosPromise<Schema$HealthCheckServicesList>;
        list(params: Params$Resource$Regionhealthcheckservices$List, options: MethodOptions | BodyResponseCallback<Schema$HealthCheckServicesList>, callback: BodyResponseCallback<Schema$HealthCheckServicesList>): void;
        list(params: Params$Resource$Regionhealthcheckservices$List, callback: BodyResponseCallback<Schema$HealthCheckServicesList>): void;
        list(callback: BodyResponseCallback<Schema$HealthCheckServicesList>): void;
        /**
         * compute.regionHealthCheckServices.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionHealthCheckServices.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regionhealthcheckservices$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regionhealthcheckservices$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regionhealthcheckservices$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Regionhealthcheckservices$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheckService to delete. The name must be 1-63 characters long, and comply with RFC1035.
         */
        healthCheckService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Regionhealthcheckservices$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035.
         */
        healthCheckService?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionhealthcheckservices$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$HealthCheckService;
    }
    interface Params$Resource$Regionhealthcheckservices$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionhealthcheckservices$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Regioninstancegroupmanagers {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionInstanceGroupManagers.abandonInstances
         * @desc Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.
         * @alias compute.regionInstanceGroupManagers.abandonInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagersAbandonInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        abandonInstances(params?: Params$Resource$Regioninstancegroupmanagers$Abandoninstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        abandonInstances(params: Params$Resource$Regioninstancegroupmanagers$Abandoninstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        abandonInstances(params: Params$Resource$Regioninstancegroupmanagers$Abandoninstances, callback: BodyResponseCallback<Schema$Operation>): void;
        abandonInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.applyUpdatesToInstances
         * @desc Apply updates to selected instances the managed instance group.
         * @alias compute.regionInstanceGroupManagers.applyUpdatesToInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group, should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request, should conform to RFC1035.
         * @param {().RegionInstanceGroupManagersApplyUpdatesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        applyUpdatesToInstances(params?: Params$Resource$Regioninstancegroupmanagers$Applyupdatestoinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        applyUpdatesToInstances(params: Params$Resource$Regioninstancegroupmanagers$Applyupdatestoinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        applyUpdatesToInstances(params: Params$Resource$Regioninstancegroupmanagers$Applyupdatestoinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        applyUpdatesToInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.createInstances
         * @desc Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
         * @alias compute.regionInstanceGroupManagers.createInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region where the managed instance group is located. It should conform to RFC1035.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagersCreateInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        createInstances(params?: Params$Resource$Regioninstancegroupmanagers$Createinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        createInstances(params: Params$Resource$Regioninstancegroupmanagers$Createinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        createInstances(params: Params$Resource$Regioninstancegroupmanagers$Createinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        createInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.delete
         * @desc Deletes the specified managed instance group and all of the instances in that group.
         * @alias compute.regionInstanceGroupManagers.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regioninstancegroupmanagers$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regioninstancegroupmanagers$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regioninstancegroupmanagers$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.deleteInstances
         * @desc Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.
         * @alias compute.regionInstanceGroupManagers.deleteInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagersDeleteInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deleteInstances(params?: Params$Resource$Regioninstancegroupmanagers$Deleteinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deleteInstances(params: Params$Resource$Regioninstancegroupmanagers$Deleteinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteInstances(params: Params$Resource$Regioninstancegroupmanagers$Deleteinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        deleteInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.deletePerInstanceConfigs
         * @desc Deletes selected per-instance configs for the managed instance group.
         * @alias compute.regionInstanceGroupManagers.deletePerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request, should conform to RFC1035.
         * @param {().RegionInstanceGroupManagerDeleteInstanceConfigReq} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        deletePerInstanceConfigs(params?: Params$Resource$Regioninstancegroupmanagers$Deleteperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        deletePerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Deleteperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        deletePerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Deleteperinstanceconfigs, callback: BodyResponseCallback<Schema$Operation>): void;
        deletePerInstanceConfigs(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.get
         * @desc Returns all of the details about the specified managed instance group.
         * @alias compute.regionInstanceGroupManagers.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regioninstancegroupmanagers$Get, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroupManager>;
        get(params: Params$Resource$Regioninstancegroupmanagers$Get, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroupManager>, callback: BodyResponseCallback<Schema$InstanceGroupManager>): void;
        get(params: Params$Resource$Regioninstancegroupmanagers$Get, callback: BodyResponseCallback<Schema$InstanceGroupManager>): void;
        get(callback: BodyResponseCallback<Schema$InstanceGroupManager>): void;
        /**
         * compute.regionInstanceGroupManagers.insert
         * @desc Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method.  A regional managed instance group can contain up to 2000 instances.
         * @alias compute.regionInstanceGroupManagers.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().InstanceGroupManager} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regioninstancegroupmanagers$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regioninstancegroupmanagers$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regioninstancegroupmanagers$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.list
         * @desc Retrieves the list of managed instance groups that are contained within the specified region.
         * @alias compute.regionInstanceGroupManagers.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regioninstancegroupmanagers$List, options?: MethodOptions): GaxiosPromise<Schema$RegionInstanceGroupManagerList>;
        list(params: Params$Resource$Regioninstancegroupmanagers$List, options: MethodOptions | BodyResponseCallback<Schema$RegionInstanceGroupManagerList>, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagerList>): void;
        list(params: Params$Resource$Regioninstancegroupmanagers$List, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagerList>): void;
        list(callback: BodyResponseCallback<Schema$RegionInstanceGroupManagerList>): void;
        /**
         * compute.regionInstanceGroupManagers.listErrors
         * @desc Lists all errors thrown by actions on instances for a given regional managed instance group.
         * @alias compute.regionInstanceGroupManagers.listErrors
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroupManager The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|[1-9][0-9]{0,19}.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request. This should conform to RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listErrors(params?: Params$Resource$Regioninstancegroupmanagers$Listerrors, options?: MethodOptions): GaxiosPromise<Schema$RegionInstanceGroupManagersListErrorsResponse>;
        listErrors(params: Params$Resource$Regioninstancegroupmanagers$Listerrors, options: MethodOptions | BodyResponseCallback<Schema$RegionInstanceGroupManagersListErrorsResponse>, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListErrorsResponse>): void;
        listErrors(params: Params$Resource$Regioninstancegroupmanagers$Listerrors, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListErrorsResponse>): void;
        listErrors(callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListErrorsResponse>): void;
        /**
         * compute.regionInstanceGroupManagers.listManagedInstances
         * @desc Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances.
         * @alias compute.regionInstanceGroupManagers.listManagedInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.order_by Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listManagedInstances(params?: Params$Resource$Regioninstancegroupmanagers$Listmanagedinstances, options?: MethodOptions): GaxiosPromise<Schema$RegionInstanceGroupManagersListInstancesResponse>;
        listManagedInstances(params: Params$Resource$Regioninstancegroupmanagers$Listmanagedinstances, options: MethodOptions | BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstancesResponse>, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstancesResponse>): void;
        listManagedInstances(params: Params$Resource$Regioninstancegroupmanagers$Listmanagedinstances, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstancesResponse>): void;
        listManagedInstances(callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstancesResponse>): void;
        /**
         * compute.regionInstanceGroupManagers.listPerInstanceConfigs
         * @desc Lists all of the per-instance configs defined for the managed instance group.
         * @alias compute.regionInstanceGroupManagers.listPerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request, should conform to RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listPerInstanceConfigs(params?: Params$Resource$Regioninstancegroupmanagers$Listperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$RegionInstanceGroupManagersListInstanceConfigsResp>;
        listPerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Listperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstanceConfigsResp>, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstanceConfigsResp>): void;
        listPerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Listperinstanceconfigs, callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstanceConfigsResp>): void;
        listPerInstanceConfigs(callback: BodyResponseCallback<Schema$RegionInstanceGroupManagersListInstanceConfigsResp>): void;
        /**
         * compute.regionInstanceGroupManagers.patch
         * @desc Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.regionInstanceGroupManagers.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the instance group manager.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().InstanceGroupManager} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Regioninstancegroupmanagers$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Regioninstancegroupmanagers$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Regioninstancegroupmanagers$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.patchPerInstanceConfigs
         * @desc Insert or patch (for the ones that already exist) per-instance configs for the managed instance group. perInstanceConfig.instance serves as a key used to distinguish whether to perform insert or patch.
         * @alias compute.regionInstanceGroupManagers.patchPerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request, should conform to RFC1035.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagerPatchInstanceConfigReq} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patchPerInstanceConfigs(params?: Params$Resource$Regioninstancegroupmanagers$Patchperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patchPerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Patchperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patchPerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Patchperinstanceconfigs, callback: BodyResponseCallback<Schema$Operation>): void;
        patchPerInstanceConfigs(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.recreateInstances
         * @desc Flags the specified instances in the managed instance group to be immediately recreated. The instances are deleted and recreated using the current instance template for the managed instance group. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of the recreating action with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.  You can specify a maximum of 1000 instances with this method per request.
         * @alias compute.regionInstanceGroupManagers.recreateInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagersRecreateRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        recreateInstances(params?: Params$Resource$Regioninstancegroupmanagers$Recreateinstances, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        recreateInstances(params: Params$Resource$Regioninstancegroupmanagers$Recreateinstances, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        recreateInstances(params: Params$Resource$Regioninstancegroupmanagers$Recreateinstances, callback: BodyResponseCallback<Schema$Operation>): void;
        recreateInstances(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.resize
         * @desc Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances.  The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method.  If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
         * @alias compute.regionInstanceGroupManagers.resize
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {integer} params.size Number of instances that should exist in this instance group manager.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        resize(params?: Params$Resource$Regioninstancegroupmanagers$Resize, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        resize(params: Params$Resource$Regioninstancegroupmanagers$Resize, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(params: Params$Resource$Regioninstancegroupmanagers$Resize, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.setAutoHealingPolicies
         * @desc Modifies the autohealing policy for the instances in this managed instance group. [Deprecated] This method is deprecated. Please use Patch instead.
         * @alias compute.regionInstanceGroupManagers.setAutoHealingPolicies
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagersSetAutoHealingRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setAutoHealingPolicies(params?: Params$Resource$Regioninstancegroupmanagers$Setautohealingpolicies, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setAutoHealingPolicies(params: Params$Resource$Regioninstancegroupmanagers$Setautohealingpolicies, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setAutoHealingPolicies(params: Params$Resource$Regioninstancegroupmanagers$Setautohealingpolicies, callback: BodyResponseCallback<Schema$Operation>): void;
        setAutoHealingPolicies(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.setInstanceTemplate
         * @desc Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
         * @alias compute.regionInstanceGroupManagers.setInstanceTemplate
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagersSetTemplateRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setInstanceTemplate(params?: Params$Resource$Regioninstancegroupmanagers$Setinstancetemplate, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setInstanceTemplate(params: Params$Resource$Regioninstancegroupmanagers$Setinstancetemplate, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setInstanceTemplate(params: Params$Resource$Regioninstancegroupmanagers$Setinstancetemplate, callback: BodyResponseCallback<Schema$Operation>): void;
        setInstanceTemplate(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.setTargetPools
         * @desc Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
         * @alias compute.regionInstanceGroupManagers.setTargetPools
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager Name of the managed instance group.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagersSetTargetPoolsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setTargetPools(params?: Params$Resource$Regioninstancegroupmanagers$Settargetpools, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setTargetPools(params: Params$Resource$Regioninstancegroupmanagers$Settargetpools, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setTargetPools(params: Params$Resource$Regioninstancegroupmanagers$Settargetpools, callback: BodyResponseCallback<Schema$Operation>): void;
        setTargetPools(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionInstanceGroupManagers.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regioninstancegroupmanagers$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regioninstancegroupmanagers$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regioninstancegroupmanagers$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.regionInstanceGroupManagers.update
         * @desc Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listmanagedinstances method.
         * @alias compute.regionInstanceGroupManagers.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the instance group manager.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().InstanceGroupManager} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Regioninstancegroupmanagers$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Regioninstancegroupmanagers$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Regioninstancegroupmanagers$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroupManagers.updatePerInstanceConfigs
         * @desc Insert or update (for the ones that already exist) per-instance configs for the managed instance group. perInstanceConfig.instance serves as a key used to distinguish whether to perform insert or patch.
         * @alias compute.regionInstanceGroupManagers.updatePerInstanceConfigs
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroupManager The name of the managed instance group. It should conform to RFC1035.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request, should conform to RFC1035.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupManagerUpdateInstanceConfigReq} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        updatePerInstanceConfigs(params?: Params$Resource$Regioninstancegroupmanagers$Updateperinstanceconfigs, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        updatePerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Updateperinstanceconfigs, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        updatePerInstanceConfigs(params: Params$Resource$Regioninstancegroupmanagers$Updateperinstanceconfigs, callback: BodyResponseCallback<Schema$Operation>): void;
        updatePerInstanceConfigs(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Abandoninstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersAbandonInstancesRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Applyupdatestoinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group, should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request, should conform to RFC1035.
         */
        region?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersApplyUpdatesRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Createinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region where the managed instance group is located. It should conform to RFC1035.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersCreateInstancesRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group to delete.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Deleteinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersDeleteInstancesRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Deleteperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request, should conform to RFC1035.
         */
        region?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagerDeleteInstanceConfigReq;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group to return.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManager;
    }
    interface Params$Resource$Regioninstancegroupmanagers$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Listerrors extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|[1-9][0-9]{0,19}.
         */
        instanceGroupManager?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request. This should conform to RFC1035.
         */
        region?: string;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Listmanagedinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        order_by?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Listperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request, should conform to RFC1035.
         */
        region?: string;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group manager.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManager;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Patchperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request, should conform to RFC1035.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagerPatchInstanceConfigReq;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Recreateinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersRecreateRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Resize extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Number of instances that should exist in this instance group manager.
         */
        size?: number;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Setautohealingpolicies extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersSetAutoHealingRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Setinstancetemplate extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersSetTemplateRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Settargetpools extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the managed instance group.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagersSetTargetPoolsRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the instance group manager.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceGroupManager;
    }
    interface Params$Resource$Regioninstancegroupmanagers$Updateperinstanceconfigs extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the managed instance group. It should conform to RFC1035.
         */
        instanceGroupManager?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request, should conform to RFC1035.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupManagerUpdateInstanceConfigReq;
    }
    class Resource$Regioninstancegroups {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionInstanceGroups.get
         * @desc Returns the specified instance group resource.
         * @alias compute.regionInstanceGroups.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroup Name of the instance group resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regioninstancegroups$Get, options?: MethodOptions): GaxiosPromise<Schema$InstanceGroup>;
        get(params: Params$Resource$Regioninstancegroups$Get, options: MethodOptions | BodyResponseCallback<Schema$InstanceGroup>, callback: BodyResponseCallback<Schema$InstanceGroup>): void;
        get(params: Params$Resource$Regioninstancegroups$Get, callback: BodyResponseCallback<Schema$InstanceGroup>): void;
        get(callback: BodyResponseCallback<Schema$InstanceGroup>): void;
        /**
         * compute.regionInstanceGroups.list
         * @desc Retrieves the list of instance group resources contained within the specified region.
         * @alias compute.regionInstanceGroups.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regioninstancegroups$List, options?: MethodOptions): GaxiosPromise<Schema$RegionInstanceGroupList>;
        list(params: Params$Resource$Regioninstancegroups$List, options: MethodOptions | BodyResponseCallback<Schema$RegionInstanceGroupList>, callback: BodyResponseCallback<Schema$RegionInstanceGroupList>): void;
        list(params: Params$Resource$Regioninstancegroups$List, callback: BodyResponseCallback<Schema$RegionInstanceGroupList>): void;
        list(callback: BodyResponseCallback<Schema$RegionInstanceGroupList>): void;
        /**
         * compute.regionInstanceGroups.listInstances
         * @desc Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running.
         * @alias compute.regionInstanceGroups.listInstances
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {string} params.instanceGroup Name of the regional instance group for which we want to list the instances.
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {().RegionInstanceGroupsListInstancesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listInstances(params?: Params$Resource$Regioninstancegroups$Listinstances, options?: MethodOptions): GaxiosPromise<Schema$RegionInstanceGroupsListInstances>;
        listInstances(params: Params$Resource$Regioninstancegroups$Listinstances, options: MethodOptions | BodyResponseCallback<Schema$RegionInstanceGroupsListInstances>, callback: BodyResponseCallback<Schema$RegionInstanceGroupsListInstances>): void;
        listInstances(params: Params$Resource$Regioninstancegroups$Listinstances, callback: BodyResponseCallback<Schema$RegionInstanceGroupsListInstances>): void;
        listInstances(callback: BodyResponseCallback<Schema$RegionInstanceGroupsListInstances>): void;
        /**
         * compute.regionInstanceGroups.setNamedPorts
         * @desc Sets the named ports for the specified regional instance group.
         * @alias compute.regionInstanceGroups.setNamedPorts
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.instanceGroup The name of the regional instance group where the named ports are updated.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().RegionInstanceGroupsSetNamedPortsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setNamedPorts(params?: Params$Resource$Regioninstancegroups$Setnamedports, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setNamedPorts(params: Params$Resource$Regioninstancegroups$Setnamedports, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setNamedPorts(params: Params$Resource$Regioninstancegroups$Setnamedports, callback: BodyResponseCallback<Schema$Operation>): void;
        setNamedPorts(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionInstanceGroups.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionInstanceGroups.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regioninstancegroups$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regioninstancegroups$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regioninstancegroups$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Regioninstancegroups$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the instance group resource to return.
         */
        instanceGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regioninstancegroups$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regioninstancegroups$Listinstances extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * Name of the regional instance group for which we want to list the instances.
         */
        instanceGroup?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupsListInstancesRequest;
    }
    interface Params$Resource$Regioninstancegroups$Setnamedports extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The name of the regional instance group where the named ports are updated.
         */
        instanceGroup?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionInstanceGroupsSetNamedPortsRequest;
    }
    interface Params$Resource$Regioninstancegroups$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Regionnotificationendpoints {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionNotificationEndpoints.delete
         * @desc Deletes the specified NotificationEndpoint in the given region
         * @alias compute.regionNotificationEndpoints.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.notificationEndpoint Name of the NotificationEndpoint resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionnotificationendpoints$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regionnotificationendpoints$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regionnotificationendpoints$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionNotificationEndpoints.get
         * @desc Returns the specified NotificationEndpoint resource in the given region.
         * @alias compute.regionNotificationEndpoints.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.notificationEndpoint Name of the NotificationEndpoint resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionnotificationendpoints$Get, options?: MethodOptions): GaxiosPromise<Schema$NotificationEndpoint>;
        get(params: Params$Resource$Regionnotificationendpoints$Get, options: MethodOptions | BodyResponseCallback<Schema$NotificationEndpoint>, callback: BodyResponseCallback<Schema$NotificationEndpoint>): void;
        get(params: Params$Resource$Regionnotificationendpoints$Get, callback: BodyResponseCallback<Schema$NotificationEndpoint>): void;
        get(callback: BodyResponseCallback<Schema$NotificationEndpoint>): void;
        /**
         * compute.regionNotificationEndpoints.insert
         * @desc Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
         * @alias compute.regionNotificationEndpoints.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().NotificationEndpoint} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regionnotificationendpoints$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regionnotificationendpoints$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regionnotificationendpoints$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionNotificationEndpoints.list
         * @desc Lists the NotificationEndpoints for a project in the given region.
         * @alias compute.regionNotificationEndpoints.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionnotificationendpoints$List, options?: MethodOptions): GaxiosPromise<Schema$NotificationEndpointList>;
        list(params: Params$Resource$Regionnotificationendpoints$List, options: MethodOptions | BodyResponseCallback<Schema$NotificationEndpointList>, callback: BodyResponseCallback<Schema$NotificationEndpointList>): void;
        list(params: Params$Resource$Regionnotificationendpoints$List, callback: BodyResponseCallback<Schema$NotificationEndpointList>): void;
        list(callback: BodyResponseCallback<Schema$NotificationEndpointList>): void;
        /**
         * compute.regionNotificationEndpoints.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionNotificationEndpoints.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regionnotificationendpoints$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regionnotificationendpoints$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regionnotificationendpoints$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Regionnotificationendpoints$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NotificationEndpoint resource to delete.
         */
        notificationEndpoint?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
    }
    interface Params$Resource$Regionnotificationendpoints$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the NotificationEndpoint resource to return.
         */
        notificationEndpoint?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionnotificationendpoints$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$NotificationEndpoint;
    }
    interface Params$Resource$Regionnotificationendpoints$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionnotificationendpoints$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Regionoperations {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionOperations.delete
         * @desc Deletes the specified region-specific Operations resource.
         * @alias compute.regionOperations.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionoperations$Delete, options?: MethodOptions): GaxiosPromise<void>;
        delete(params: Params$Resource$Regionoperations$Delete, options: MethodOptions | BodyResponseCallback<void>, callback: BodyResponseCallback<void>): void;
        delete(params: Params$Resource$Regionoperations$Delete, callback: BodyResponseCallback<void>): void;
        delete(callback: BodyResponseCallback<void>): void;
        /**
         * compute.regionOperations.get
         * @desc Retrieves the specified region-specific Operations resource.
         * @alias compute.regionOperations.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionoperations$Get, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        get(params: Params$Resource$Regionoperations$Get, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        get(params: Params$Resource$Regionoperations$Get, callback: BodyResponseCallback<Schema$Operation>): void;
        get(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionOperations.list
         * @desc Retrieves a list of Operation resources contained within the specified region.
         * @alias compute.regionOperations.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionoperations$List, options?: MethodOptions): GaxiosPromise<Schema$OperationList>;
        list(params: Params$Resource$Regionoperations$List, options: MethodOptions | BodyResponseCallback<Schema$OperationList>, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(params: Params$Resource$Regionoperations$List, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(callback: BodyResponseCallback<Schema$OperationList>): void;
        /**
         * compute.regionOperations.wait
         * @desc Waits for the specified region-specific Operations resource until it is done or timeout, and retrieves the specified Operations resource. 1. Immediately returns when the operation is already done. 2. Waits for no more than the default deadline (2 minutes, subject to change) and then returns the current state of the operation, which may be DONE or still in progress. 3. Is best-effort: a. The server can wait less than the default deadline or zero seconds, in overload situations. b. There is no guarantee that the operation is actually done when returns. 4. User should be prepared to retry if the operation is not DONE.
         * @alias compute.regionOperations.wait
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        wait(params?: Params$Resource$Regionoperations$Wait, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        wait(params: Params$Resource$Regionoperations$Wait, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(params: Params$Resource$Regionoperations$Wait, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Regionoperations$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to delete.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionoperations$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionoperations$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionoperations$Wait extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    class Resource$Regions {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regions.get
         * @desc Returns the specified Region resource. Gets a list of available regions by making a list() request.
         * @alias compute.regions.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regions$Get, options?: MethodOptions): GaxiosPromise<Schema$Region>;
        get(params: Params$Resource$Regions$Get, options: MethodOptions | BodyResponseCallback<Schema$Region>, callback: BodyResponseCallback<Schema$Region>): void;
        get(params: Params$Resource$Regions$Get, callback: BodyResponseCallback<Schema$Region>): void;
        get(callback: BodyResponseCallback<Schema$Region>): void;
        /**
         * compute.regions.list
         * @desc Retrieves the list of region resources available to the specified project.
         * @alias compute.regions.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regions$List, options?: MethodOptions): GaxiosPromise<Schema$RegionList>;
        list(params: Params$Resource$Regions$List, options: MethodOptions | BodyResponseCallback<Schema$RegionList>, callback: BodyResponseCallback<Schema$RegionList>): void;
        list(params: Params$Resource$Regions$List, callback: BodyResponseCallback<Schema$RegionList>): void;
        list(callback: BodyResponseCallback<Schema$RegionList>): void;
    }
    interface Params$Resource$Regions$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region resource to return.
         */
        region?: string;
    }
    interface Params$Resource$Regions$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    class Resource$Regionsslcertificates {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionSslCertificates.delete
         * @desc Deletes the specified SslCertificate resource in the region.
         * @alias compute.regionSslCertificates.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.sslCertificate Name of the SslCertificate resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionsslcertificates$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regionsslcertificates$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regionsslcertificates$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionSslCertificates.get
         * @desc Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
         * @alias compute.regionSslCertificates.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.sslCertificate Name of the SslCertificate resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionsslcertificates$Get, options?: MethodOptions): GaxiosPromise<Schema$SslCertificate>;
        get(params: Params$Resource$Regionsslcertificates$Get, options: MethodOptions | BodyResponseCallback<Schema$SslCertificate>, callback: BodyResponseCallback<Schema$SslCertificate>): void;
        get(params: Params$Resource$Regionsslcertificates$Get, callback: BodyResponseCallback<Schema$SslCertificate>): void;
        get(callback: BodyResponseCallback<Schema$SslCertificate>): void;
        /**
         * compute.regionSslCertificates.insert
         * @desc Creates a SslCertificate resource in the specified project and region using the data included in the request
         * @alias compute.regionSslCertificates.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().SslCertificate} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regionsslcertificates$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regionsslcertificates$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regionsslcertificates$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionSslCertificates.list
         * @desc Retrieves the list of SslCertificate resources available to the specified project in the specified region.
         * @alias compute.regionSslCertificates.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionsslcertificates$List, options?: MethodOptions): GaxiosPromise<Schema$SslCertificateList>;
        list(params: Params$Resource$Regionsslcertificates$List, options: MethodOptions | BodyResponseCallback<Schema$SslCertificateList>, callback: BodyResponseCallback<Schema$SslCertificateList>): void;
        list(params: Params$Resource$Regionsslcertificates$List, callback: BodyResponseCallback<Schema$SslCertificateList>): void;
        list(callback: BodyResponseCallback<Schema$SslCertificateList>): void;
        /**
         * compute.regionSslCertificates.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource and region.
         * @alias compute.regionSslCertificates.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regionsslcertificates$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regionsslcertificates$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regionsslcertificates$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Regionsslcertificates$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the SslCertificate resource to delete.
         */
        sslCertificate?: string;
    }
    interface Params$Resource$Regionsslcertificates$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the SslCertificate resource to return.
         */
        sslCertificate?: string;
    }
    interface Params$Resource$Regionsslcertificates$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SslCertificate;
    }
    interface Params$Resource$Regionsslcertificates$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionsslcertificates$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Regiontargethttpproxies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionTargetHttpProxies.delete
         * @desc Deletes the specified TargetHttpProxy resource.
         * @alias compute.regionTargetHttpProxies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpProxy Name of the TargetHttpProxy resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regiontargethttpproxies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regiontargethttpproxies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regiontargethttpproxies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionTargetHttpProxies.get
         * @desc Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
         * @alias compute.regionTargetHttpProxies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.targetHttpProxy Name of the TargetHttpProxy resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regiontargethttpproxies$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpProxy>;
        get(params: Params$Resource$Regiontargethttpproxies$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpProxy>, callback: BodyResponseCallback<Schema$TargetHttpProxy>): void;
        get(params: Params$Resource$Regiontargethttpproxies$Get, callback: BodyResponseCallback<Schema$TargetHttpProxy>): void;
        get(callback: BodyResponseCallback<Schema$TargetHttpProxy>): void;
        /**
         * compute.regionTargetHttpProxies.insert
         * @desc Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
         * @alias compute.regionTargetHttpProxies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetHttpProxy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regiontargethttpproxies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regiontargethttpproxies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regiontargethttpproxies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionTargetHttpProxies.list
         * @desc Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
         * @alias compute.regionTargetHttpProxies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regiontargethttpproxies$List, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpProxyList>;
        list(params: Params$Resource$Regiontargethttpproxies$List, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpProxyList>, callback: BodyResponseCallback<Schema$TargetHttpProxyList>): void;
        list(params: Params$Resource$Regiontargethttpproxies$List, callback: BodyResponseCallback<Schema$TargetHttpProxyList>): void;
        list(callback: BodyResponseCallback<Schema$TargetHttpProxyList>): void;
        /**
         * compute.regionTargetHttpProxies.setUrlMap
         * @desc Changes the URL map for TargetHttpProxy.
         * @alias compute.regionTargetHttpProxies.setUrlMap
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpProxy Name of the TargetHttpProxy to set a URL map for.
         * @param {().UrlMapReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setUrlMap(params?: Params$Resource$Regiontargethttpproxies$Seturlmap, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setUrlMap(params: Params$Resource$Regiontargethttpproxies$Seturlmap, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(params: Params$Resource$Regiontargethttpproxies$Seturlmap, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionTargetHttpProxies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionTargetHttpProxies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regiontargethttpproxies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regiontargethttpproxies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regiontargethttpproxies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Regiontargethttpproxies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpProxy resource to delete.
         */
        targetHttpProxy?: string;
    }
    interface Params$Resource$Regiontargethttpproxies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the TargetHttpProxy resource to return.
         */
        targetHttpProxy?: string;
    }
    interface Params$Resource$Regiontargethttpproxies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetHttpProxy;
    }
    interface Params$Resource$Regiontargethttpproxies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regiontargethttpproxies$Seturlmap extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpProxy to set a URL map for.
         */
        targetHttpProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMapReference;
    }
    interface Params$Resource$Regiontargethttpproxies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Regiontargethttpsproxies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionTargetHttpsProxies.delete
         * @desc Deletes the specified TargetHttpsProxy resource.
         * @alias compute.regionTargetHttpsProxies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regiontargethttpsproxies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regiontargethttpsproxies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regiontargethttpsproxies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionTargetHttpsProxies.get
         * @desc Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.
         * @alias compute.regionTargetHttpsProxies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regiontargethttpsproxies$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpsProxy>;
        get(params: Params$Resource$Regiontargethttpsproxies$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpsProxy>, callback: BodyResponseCallback<Schema$TargetHttpsProxy>): void;
        get(params: Params$Resource$Regiontargethttpsproxies$Get, callback: BodyResponseCallback<Schema$TargetHttpsProxy>): void;
        get(callback: BodyResponseCallback<Schema$TargetHttpsProxy>): void;
        /**
         * compute.regionTargetHttpsProxies.insert
         * @desc Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
         * @alias compute.regionTargetHttpsProxies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetHttpsProxy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regiontargethttpsproxies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regiontargethttpsproxies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regiontargethttpsproxies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionTargetHttpsProxies.list
         * @desc Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
         * @alias compute.regionTargetHttpsProxies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regiontargethttpsproxies$List, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpsProxyList>;
        list(params: Params$Resource$Regiontargethttpsproxies$List, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpsProxyList>, callback: BodyResponseCallback<Schema$TargetHttpsProxyList>): void;
        list(params: Params$Resource$Regiontargethttpsproxies$List, callback: BodyResponseCallback<Schema$TargetHttpsProxyList>): void;
        list(callback: BodyResponseCallback<Schema$TargetHttpsProxyList>): void;
        /**
         * compute.regionTargetHttpsProxies.setSslCertificates
         * @desc Replaces SslCertificates for TargetHttpsProxy.
         * @alias compute.regionTargetHttpsProxies.setSslCertificates
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
         * @param {().RegionTargetHttpsProxiesSetSslCertificatesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setSslCertificates(params?: Params$Resource$Regiontargethttpsproxies$Setsslcertificates, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setSslCertificates(params: Params$Resource$Regiontargethttpsproxies$Setsslcertificates, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslCertificates(params: Params$Resource$Regiontargethttpsproxies$Setsslcertificates, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslCertificates(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionTargetHttpsProxies.setUrlMap
         * @desc Changes the URL map for TargetHttpsProxy.
         * @alias compute.regionTargetHttpsProxies.setUrlMap
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy to set a URL map for.
         * @param {().UrlMapReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setUrlMap(params?: Params$Resource$Regiontargethttpsproxies$Seturlmap, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setUrlMap(params: Params$Resource$Regiontargethttpsproxies$Seturlmap, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(params: Params$Resource$Regiontargethttpsproxies$Seturlmap, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionTargetHttpsProxies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionTargetHttpsProxies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regiontargethttpsproxies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regiontargethttpsproxies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regiontargethttpsproxies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Regiontargethttpsproxies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy resource to delete.
         */
        targetHttpsProxy?: string;
    }
    interface Params$Resource$Regiontargethttpsproxies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the TargetHttpsProxy resource to return.
         */
        targetHttpsProxy?: string;
    }
    interface Params$Resource$Regiontargethttpsproxies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetHttpsProxy;
    }
    interface Params$Resource$Regiontargethttpsproxies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regiontargethttpsproxies$Setsslcertificates extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
         */
        targetHttpsProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionTargetHttpsProxiesSetSslCertificatesRequest;
    }
    interface Params$Resource$Regiontargethttpsproxies$Seturlmap extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy to set a URL map for.
         */
        targetHttpsProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMapReference;
    }
    interface Params$Resource$Regiontargethttpsproxies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Regionurlmaps {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.regionUrlMaps.delete
         * @desc Deletes the specified UrlMap resource.
         * @alias compute.regionUrlMaps.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         * @param {string} params.urlMap Name of the UrlMap resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Regionurlmaps$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Regionurlmaps$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Regionurlmaps$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionUrlMaps.get
         * @desc Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
         * @alias compute.regionUrlMaps.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.urlMap Name of the UrlMap resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Regionurlmaps$Get, options?: MethodOptions): GaxiosPromise<Schema$UrlMap>;
        get(params: Params$Resource$Regionurlmaps$Get, options: MethodOptions | BodyResponseCallback<Schema$UrlMap>, callback: BodyResponseCallback<Schema$UrlMap>): void;
        get(params: Params$Resource$Regionurlmaps$Get, callback: BodyResponseCallback<Schema$UrlMap>): void;
        get(callback: BodyResponseCallback<Schema$UrlMap>): void;
        /**
         * compute.regionUrlMaps.insert
         * @desc Creates a UrlMap resource in the specified project using the data included in the request.
         * @alias compute.regionUrlMaps.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         * @param {().UrlMap} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Regionurlmaps$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Regionurlmaps$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Regionurlmaps$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionUrlMaps.invalidateCache
         * @desc Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
         * @alias compute.regionUrlMaps.invalidateCache
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         * @param {string} params.urlMap Name of the UrlMap scoping this request.
         * @param {().CacheInvalidationRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        invalidateCache(params?: Params$Resource$Regionurlmaps$Invalidatecache, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        invalidateCache(params: Params$Resource$Regionurlmaps$Invalidatecache, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        invalidateCache(params: Params$Resource$Regionurlmaps$Invalidatecache, callback: BodyResponseCallback<Schema$Operation>): void;
        invalidateCache(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionUrlMaps.list
         * @desc Retrieves the list of UrlMap resources available to the specified project in the specified region.
         * @alias compute.regionUrlMaps.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Regionurlmaps$List, options?: MethodOptions): GaxiosPromise<Schema$UrlMapList>;
        list(params: Params$Resource$Regionurlmaps$List, options: MethodOptions | BodyResponseCallback<Schema$UrlMapList>, callback: BodyResponseCallback<Schema$UrlMapList>): void;
        list(params: Params$Resource$Regionurlmaps$List, callback: BodyResponseCallback<Schema$UrlMapList>): void;
        list(callback: BodyResponseCallback<Schema$UrlMapList>): void;
        /**
         * compute.regionUrlMaps.patch
         * @desc Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
         * @alias compute.regionUrlMaps.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         * @param {string} params.urlMap Name of the UrlMap resource to patch.
         * @param {().UrlMap} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Regionurlmaps$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Regionurlmaps$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Regionurlmaps$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionUrlMaps.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.regionUrlMaps.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Regionurlmaps$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Regionurlmaps$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Regionurlmaps$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.regionUrlMaps.update
         * @desc Updates the specified UrlMap resource with the data included in the request.
         * @alias compute.regionUrlMaps.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         * @param {string} params.urlMap Name of the UrlMap resource to update.
         * @param {().UrlMap} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Regionurlmaps$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Regionurlmaps$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Regionurlmaps$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.regionUrlMaps.validate
         * @desc Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
         * @alias compute.regionUrlMaps.validate
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.urlMap Name of the UrlMap resource to be validated as.
         * @param {().RegionUrlMapsValidateRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        validate(params?: Params$Resource$Regionurlmaps$Validate, options?: MethodOptions): GaxiosPromise<Schema$UrlMapsValidateResponse>;
        validate(params: Params$Resource$Regionurlmaps$Validate, options: MethodOptions | BodyResponseCallback<Schema$UrlMapsValidateResponse>, callback: BodyResponseCallback<Schema$UrlMapsValidateResponse>): void;
        validate(params: Params$Resource$Regionurlmaps$Validate, callback: BodyResponseCallback<Schema$UrlMapsValidateResponse>): void;
        validate(callback: BodyResponseCallback<Schema$UrlMapsValidateResponse>): void;
    }
    interface Params$Resource$Regionurlmaps$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         */
        requestId?: string;
        /**
         * Name of the UrlMap resource to delete.
         */
        urlMap?: string;
    }
    interface Params$Resource$Regionurlmaps$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the UrlMap resource to return.
         */
        urlMap?: string;
    }
    interface Params$Resource$Regionurlmaps$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMap;
    }
    interface Params$Resource$Regionurlmaps$Invalidatecache extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         */
        requestId?: string;
        /**
         * Name of the UrlMap scoping this request.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$CacheInvalidationRule;
    }
    interface Params$Resource$Regionurlmaps$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Regionurlmaps$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         */
        requestId?: string;
        /**
         * Name of the UrlMap resource to patch.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMap;
    }
    interface Params$Resource$Regionurlmaps$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Regionurlmaps$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
         */
        requestId?: string;
        /**
         * Name of the UrlMap resource to update.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMap;
    }
    interface Params$Resource$Regionurlmaps$Validate extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the UrlMap resource to be validated as.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionUrlMapsValidateRequest;
    }
    class Resource$Reservations {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.reservations.aggregatedList
         * @desc Retrieves an aggregated list of reservations.
         * @alias compute.reservations.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Reservations$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$ReservationAggregatedList>;
        aggregatedList(params: Params$Resource$Reservations$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$ReservationAggregatedList>, callback: BodyResponseCallback<Schema$ReservationAggregatedList>): void;
        aggregatedList(params: Params$Resource$Reservations$Aggregatedlist, callback: BodyResponseCallback<Schema$ReservationAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$ReservationAggregatedList>): void;
        /**
         * compute.reservations.delete
         * @desc Deletes the specified reservation.
         * @alias compute.reservations.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.reservation Name of the reservation to delete.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Reservations$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Reservations$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Reservations$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.reservations.get
         * @desc Retrieves all information of the specified reservation.
         * @alias compute.reservations.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.reservation Name of the reservation to retrieve.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Reservations$Get, options?: MethodOptions): GaxiosPromise<Schema$Reservation>;
        get(params: Params$Resource$Reservations$Get, options: MethodOptions | BodyResponseCallback<Schema$Reservation>, callback: BodyResponseCallback<Schema$Reservation>): void;
        get(params: Params$Resource$Reservations$Get, callback: BodyResponseCallback<Schema$Reservation>): void;
        get(callback: BodyResponseCallback<Schema$Reservation>): void;
        /**
         * compute.reservations.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.reservations.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Reservations$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Reservations$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Reservations$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.reservations.insert
         * @desc Creates a new reservation. For more information, read Reserving zonal resources.
         * @alias compute.reservations.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone Name of the zone for this request.
         * @param {().Reservation} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Reservations$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Reservations$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Reservations$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.reservations.list
         * @desc A list all the reservations that have been configured for the specified project in specified zone.
         * @alias compute.reservations.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Reservations$List, options?: MethodOptions): GaxiosPromise<Schema$ReservationList>;
        list(params: Params$Resource$Reservations$List, options: MethodOptions | BodyResponseCallback<Schema$ReservationList>, callback: BodyResponseCallback<Schema$ReservationList>): void;
        list(params: Params$Resource$Reservations$List, callback: BodyResponseCallback<Schema$ReservationList>): void;
        list(callback: BodyResponseCallback<Schema$ReservationList>): void;
        /**
         * compute.reservations.resize
         * @desc Resizes the reservation (applicable to standalone reservations only)
         * @alias compute.reservations.resize
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.reservation Name of the reservation to update.
         * @param {string} params.zone Name of the zone for this request.
         * @param {().ReservationsResizeRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        resize(params?: Params$Resource$Reservations$Resize, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        resize(params: Params$Resource$Reservations$Resize, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(params: Params$Resource$Reservations$Resize, callback: BodyResponseCallback<Schema$Operation>): void;
        resize(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.reservations.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.reservations.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().ZoneSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Reservations$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Reservations$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Reservations$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.reservations.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.reservations.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Reservations$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Reservations$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Reservations$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Reservations$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Reservations$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the reservation to delete.
         */
        reservation?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Reservations$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the reservation to retrieve.
         */
        reservation?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Reservations$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Reservations$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Reservation;
    }
    interface Params$Resource$Reservations$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Reservations$Resize extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the reservation to update.
         */
        reservation?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ReservationsResizeRequest;
    }
    interface Params$Resource$Reservations$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ZoneSetPolicyRequest;
    }
    interface Params$Resource$Reservations$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Resourcepolicies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.resourcePolicies.aggregatedList
         * @desc Retrieves an aggregated list of resource policies.
         * @alias compute.resourcePolicies.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Resourcepolicies$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$ResourcePolicyAggregatedList>;
        aggregatedList(params: Params$Resource$Resourcepolicies$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$ResourcePolicyAggregatedList>, callback: BodyResponseCallback<Schema$ResourcePolicyAggregatedList>): void;
        aggregatedList(params: Params$Resource$Resourcepolicies$Aggregatedlist, callback: BodyResponseCallback<Schema$ResourcePolicyAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$ResourcePolicyAggregatedList>): void;
        /**
         * compute.resourcePolicies.delete
         * @desc Deletes the specified resource policy.
         * @alias compute.resourcePolicies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resourcePolicy Name of the resource policy to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Resourcepolicies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Resourcepolicies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Resourcepolicies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.resourcePolicies.get
         * @desc Retrieves all information of the specified resource policy.
         * @alias compute.resourcePolicies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.resourcePolicy Name of the resource policy to retrieve.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Resourcepolicies$Get, options?: MethodOptions): GaxiosPromise<Schema$ResourcePolicy>;
        get(params: Params$Resource$Resourcepolicies$Get, options: MethodOptions | BodyResponseCallback<Schema$ResourcePolicy>, callback: BodyResponseCallback<Schema$ResourcePolicy>): void;
        get(params: Params$Resource$Resourcepolicies$Get, callback: BodyResponseCallback<Schema$ResourcePolicy>): void;
        get(callback: BodyResponseCallback<Schema$ResourcePolicy>): void;
        /**
         * compute.resourcePolicies.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.resourcePolicies.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Resourcepolicies$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Resourcepolicies$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Resourcepolicies$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.resourcePolicies.insert
         * @desc Creates a new resource policy.
         * @alias compute.resourcePolicies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().ResourcePolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Resourcepolicies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Resourcepolicies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Resourcepolicies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.resourcePolicies.list
         * @desc A list all the resource policies that have been configured for the specified project in specified region.
         * @alias compute.resourcePolicies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Resourcepolicies$List, options?: MethodOptions): GaxiosPromise<Schema$ResourcePolicyList>;
        list(params: Params$Resource$Resourcepolicies$List, options: MethodOptions | BodyResponseCallback<Schema$ResourcePolicyList>, callback: BodyResponseCallback<Schema$ResourcePolicyList>): void;
        list(params: Params$Resource$Resourcepolicies$List, callback: BodyResponseCallback<Schema$ResourcePolicyList>): void;
        list(callback: BodyResponseCallback<Schema$ResourcePolicyList>): void;
        /**
         * compute.resourcePolicies.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.resourcePolicies.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Resourcepolicies$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Resourcepolicies$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Resourcepolicies$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.resourcePolicies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.resourcePolicies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Resourcepolicies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Resourcepolicies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Resourcepolicies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Resourcepolicies$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Resourcepolicies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the resource policy to delete.
         */
        resourcePolicy?: string;
    }
    interface Params$Resource$Resourcepolicies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the resource policy to retrieve.
         */
        resourcePolicy?: string;
    }
    interface Params$Resource$Resourcepolicies$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Resourcepolicies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$ResourcePolicy;
    }
    interface Params$Resource$Resourcepolicies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Resourcepolicies$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetPolicyRequest;
    }
    interface Params$Resource$Resourcepolicies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Routers {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.routers.aggregatedList
         * @desc Retrieves an aggregated list of routers.
         * @alias compute.routers.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Routers$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$RouterAggregatedList>;
        aggregatedList(params: Params$Resource$Routers$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$RouterAggregatedList>, callback: BodyResponseCallback<Schema$RouterAggregatedList>): void;
        aggregatedList(params: Params$Resource$Routers$Aggregatedlist, callback: BodyResponseCallback<Schema$RouterAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$RouterAggregatedList>): void;
        /**
         * compute.routers.delete
         * @desc Deletes the specified Router resource.
         * @alias compute.routers.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.router Name of the Router resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Routers$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Routers$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Routers$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.routers.get
         * @desc Returns the specified Router resource. Gets a list of available routers by making a list() request.
         * @alias compute.routers.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.router Name of the Router resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Routers$Get, options?: MethodOptions): GaxiosPromise<Schema$Router>;
        get(params: Params$Resource$Routers$Get, options: MethodOptions | BodyResponseCallback<Schema$Router>, callback: BodyResponseCallback<Schema$Router>): void;
        get(params: Params$Resource$Routers$Get, callback: BodyResponseCallback<Schema$Router>): void;
        get(callback: BodyResponseCallback<Schema$Router>): void;
        /**
         * compute.routers.getNatMappingInfo
         * @desc Retrieves runtime Nat mapping information of VM endpoints.
         * @alias compute.routers.getNatMappingInfo
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.natName Name of the nat service to filter the Nat Mapping information. If it is omitted, all nats for this router will be returned. Name should conform to RFC1035.
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.router Name of the Router resource to query for Nat Mapping information of VM endpoints.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getNatMappingInfo(params?: Params$Resource$Routers$Getnatmappinginfo, options?: MethodOptions): GaxiosPromise<Schema$VmEndpointNatMappingsList>;
        getNatMappingInfo(params: Params$Resource$Routers$Getnatmappinginfo, options: MethodOptions | BodyResponseCallback<Schema$VmEndpointNatMappingsList>, callback: BodyResponseCallback<Schema$VmEndpointNatMappingsList>): void;
        getNatMappingInfo(params: Params$Resource$Routers$Getnatmappinginfo, callback: BodyResponseCallback<Schema$VmEndpointNatMappingsList>): void;
        getNatMappingInfo(callback: BodyResponseCallback<Schema$VmEndpointNatMappingsList>): void;
        /**
         * compute.routers.getRouterStatus
         * @desc Retrieves runtime information of the specified router.
         * @alias compute.routers.getRouterStatus
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.router Name of the Router resource to query.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getRouterStatus(params?: Params$Resource$Routers$Getrouterstatus, options?: MethodOptions): GaxiosPromise<Schema$RouterStatusResponse>;
        getRouterStatus(params: Params$Resource$Routers$Getrouterstatus, options: MethodOptions | BodyResponseCallback<Schema$RouterStatusResponse>, callback: BodyResponseCallback<Schema$RouterStatusResponse>): void;
        getRouterStatus(params: Params$Resource$Routers$Getrouterstatus, callback: BodyResponseCallback<Schema$RouterStatusResponse>): void;
        getRouterStatus(callback: BodyResponseCallback<Schema$RouterStatusResponse>): void;
        /**
         * compute.routers.insert
         * @desc Creates a Router resource in the specified project and region using the data included in the request.
         * @alias compute.routers.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Router} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Routers$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Routers$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Routers$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.routers.list
         * @desc Retrieves a list of Router resources available to the specified project.
         * @alias compute.routers.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Routers$List, options?: MethodOptions): GaxiosPromise<Schema$RouterList>;
        list(params: Params$Resource$Routers$List, options: MethodOptions | BodyResponseCallback<Schema$RouterList>, callback: BodyResponseCallback<Schema$RouterList>): void;
        list(params: Params$Resource$Routers$List, callback: BodyResponseCallback<Schema$RouterList>): void;
        list(callback: BodyResponseCallback<Schema$RouterList>): void;
        /**
         * compute.routers.patch
         * @desc Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
         * @alias compute.routers.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.router Name of the Router resource to patch.
         * @param {().Router} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Routers$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Routers$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Routers$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.routers.preview
         * @desc Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
         * @alias compute.routers.preview
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.router Name of the Router resource to query.
         * @param {().Router} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        preview(params?: Params$Resource$Routers$Preview, options?: MethodOptions): GaxiosPromise<Schema$RoutersPreviewResponse>;
        preview(params: Params$Resource$Routers$Preview, options: MethodOptions | BodyResponseCallback<Schema$RoutersPreviewResponse>, callback: BodyResponseCallback<Schema$RoutersPreviewResponse>): void;
        preview(params: Params$Resource$Routers$Preview, callback: BodyResponseCallback<Schema$RoutersPreviewResponse>): void;
        preview(callback: BodyResponseCallback<Schema$RoutersPreviewResponse>): void;
        /**
         * compute.routers.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.routers.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Routers$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Routers$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Routers$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.routers.update
         * @desc Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
         * @alias compute.routers.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.router Name of the Router resource to update.
         * @param {().Router} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Routers$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Routers$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Routers$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Routers$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Routers$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Router resource to delete.
         */
        router?: string;
    }
    interface Params$Resource$Routers$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the Router resource to return.
         */
        router?: string;
    }
    interface Params$Resource$Routers$Getnatmappinginfo extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Name of the nat service to filter the Nat Mapping information. If it is omitted, all nats for this router will be returned. Name should conform to RFC1035.
         */
        natName?: string;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the Router resource to query for Nat Mapping information of VM endpoints.
         */
        router?: string;
    }
    interface Params$Resource$Routers$Getrouterstatus extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the Router resource to query.
         */
        router?: string;
    }
    interface Params$Resource$Routers$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Router;
    }
    interface Params$Resource$Routers$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Routers$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Router resource to patch.
         */
        router?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Router;
    }
    interface Params$Resource$Routers$Preview extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the Router resource to query.
         */
        router?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Router;
    }
    interface Params$Resource$Routers$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Routers$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Router resource to update.
         */
        router?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Router;
    }
    class Resource$Routes {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.routes.delete
         * @desc Deletes the specified Route resource.
         * @alias compute.routes.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.route Name of the Route resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Routes$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Routes$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Routes$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.routes.get
         * @desc Returns the specified Route resource. Gets a list of available routes by making a list() request.
         * @alias compute.routes.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.route Name of the Route resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Routes$Get, options?: MethodOptions): GaxiosPromise<Schema$Route>;
        get(params: Params$Resource$Routes$Get, options: MethodOptions | BodyResponseCallback<Schema$Route>, callback: BodyResponseCallback<Schema$Route>): void;
        get(params: Params$Resource$Routes$Get, callback: BodyResponseCallback<Schema$Route>): void;
        get(callback: BodyResponseCallback<Schema$Route>): void;
        /**
         * compute.routes.insert
         * @desc Creates a Route resource in the specified project using the data included in the request.
         * @alias compute.routes.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Route} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Routes$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Routes$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Routes$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.routes.list
         * @desc Retrieves the list of Route resources available to the specified project.
         * @alias compute.routes.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Routes$List, options?: MethodOptions): GaxiosPromise<Schema$RouteList>;
        list(params: Params$Resource$Routes$List, options: MethodOptions | BodyResponseCallback<Schema$RouteList>, callback: BodyResponseCallback<Schema$RouteList>): void;
        list(params: Params$Resource$Routes$List, callback: BodyResponseCallback<Schema$RouteList>): void;
        list(callback: BodyResponseCallback<Schema$RouteList>): void;
        /**
         * compute.routes.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.routes.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Routes$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Routes$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Routes$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Routes$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Route resource to delete.
         */
        route?: string;
    }
    interface Params$Resource$Routes$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the Route resource to return.
         */
        route?: string;
    }
    interface Params$Resource$Routes$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Route;
    }
    interface Params$Resource$Routes$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Routes$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Securitypolicies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.securityPolicies.addRule
         * @desc Inserts a rule into a security policy.
         * @alias compute.securityPolicies.addRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {boolean=} params.validateOnly If true, the request will not be committed.
         * @param {().SecurityPolicyRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addRule(params?: Params$Resource$Securitypolicies$Addrule, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addRule(params: Params$Resource$Securitypolicies$Addrule, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addRule(params: Params$Resource$Securitypolicies$Addrule, callback: BodyResponseCallback<Schema$Operation>): void;
        addRule(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.securityPolicies.delete
         * @desc Deletes the specified policy.
         * @alias compute.securityPolicies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Securitypolicies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Securitypolicies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Securitypolicies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.securityPolicies.get
         * @desc List all of the ordered rules present in a single specified policy.
         * @alias compute.securityPolicies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.securityPolicy Name of the security policy to get.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Securitypolicies$Get, options?: MethodOptions): GaxiosPromise<Schema$SecurityPolicy>;
        get(params: Params$Resource$Securitypolicies$Get, options: MethodOptions | BodyResponseCallback<Schema$SecurityPolicy>, callback: BodyResponseCallback<Schema$SecurityPolicy>): void;
        get(params: Params$Resource$Securitypolicies$Get, callback: BodyResponseCallback<Schema$SecurityPolicy>): void;
        get(callback: BodyResponseCallback<Schema$SecurityPolicy>): void;
        /**
         * compute.securityPolicies.getRule
         * @desc Gets a rule at the specified priority.
         * @alias compute.securityPolicies.getRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer=} params.priority The priority of the rule to get from the security policy.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.securityPolicy Name of the security policy to which the queried rule belongs.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getRule(params?: Params$Resource$Securitypolicies$Getrule, options?: MethodOptions): GaxiosPromise<Schema$SecurityPolicyRule>;
        getRule(params: Params$Resource$Securitypolicies$Getrule, options: MethodOptions | BodyResponseCallback<Schema$SecurityPolicyRule>, callback: BodyResponseCallback<Schema$SecurityPolicyRule>): void;
        getRule(params: Params$Resource$Securitypolicies$Getrule, callback: BodyResponseCallback<Schema$SecurityPolicyRule>): void;
        getRule(callback: BodyResponseCallback<Schema$SecurityPolicyRule>): void;
        /**
         * compute.securityPolicies.insert
         * @desc Creates a new policy in the specified project using the data included in the request.
         * @alias compute.securityPolicies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {boolean=} params.validateOnly If true, the request will not be committed.
         * @param {().SecurityPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Securitypolicies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Securitypolicies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Securitypolicies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.securityPolicies.list
         * @desc List all the policies that have been configured for the specified project.
         * @alias compute.securityPolicies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Securitypolicies$List, options?: MethodOptions): GaxiosPromise<Schema$SecurityPolicyList>;
        list(params: Params$Resource$Securitypolicies$List, options: MethodOptions | BodyResponseCallback<Schema$SecurityPolicyList>, callback: BodyResponseCallback<Schema$SecurityPolicyList>): void;
        list(params: Params$Resource$Securitypolicies$List, callback: BodyResponseCallback<Schema$SecurityPolicyList>): void;
        list(callback: BodyResponseCallback<Schema$SecurityPolicyList>): void;
        /**
         * compute.securityPolicies.listPreconfiguredExpressionSets
         * @desc Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
         * @alias compute.securityPolicies.listPreconfiguredExpressionSets
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listPreconfiguredExpressionSets(params?: Params$Resource$Securitypolicies$Listpreconfiguredexpressionsets, options?: MethodOptions): GaxiosPromise<Schema$SecurityPoliciesListPreconfiguredExpressionSetsResponse>;
        listPreconfiguredExpressionSets(params: Params$Resource$Securitypolicies$Listpreconfiguredexpressionsets, options: MethodOptions | BodyResponseCallback<Schema$SecurityPoliciesListPreconfiguredExpressionSetsResponse>, callback: BodyResponseCallback<Schema$SecurityPoliciesListPreconfiguredExpressionSetsResponse>): void;
        listPreconfiguredExpressionSets(params: Params$Resource$Securitypolicies$Listpreconfiguredexpressionsets, callback: BodyResponseCallback<Schema$SecurityPoliciesListPreconfiguredExpressionSetsResponse>): void;
        listPreconfiguredExpressionSets(callback: BodyResponseCallback<Schema$SecurityPoliciesListPreconfiguredExpressionSetsResponse>): void;
        /**
         * compute.securityPolicies.patch
         * @desc Patches the specified policy with the data included in the request.
         * @alias compute.securityPolicies.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {().SecurityPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Securitypolicies$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Securitypolicies$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Securitypolicies$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.securityPolicies.patchRule
         * @desc Patches a rule at the specified priority.
         * @alias compute.securityPolicies.patchRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer=} params.priority The priority of the rule to patch.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {boolean=} params.validateOnly If true, the request will not be committed.
         * @param {().SecurityPolicyRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patchRule(params?: Params$Resource$Securitypolicies$Patchrule, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patchRule(params: Params$Resource$Securitypolicies$Patchrule, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patchRule(params: Params$Resource$Securitypolicies$Patchrule, callback: BodyResponseCallback<Schema$Operation>): void;
        patchRule(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.securityPolicies.removeRule
         * @desc Deletes a rule at the specified priority.
         * @alias compute.securityPolicies.removeRule
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer=} params.priority The priority of the rule to remove from the security policy.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.securityPolicy Name of the security policy to update.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeRule(params?: Params$Resource$Securitypolicies$Removerule, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeRule(params: Params$Resource$Securitypolicies$Removerule, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeRule(params: Params$Resource$Securitypolicies$Removerule, callback: BodyResponseCallback<Schema$Operation>): void;
        removeRule(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.securityPolicies.setLabels
         * @desc Sets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.securityPolicies.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Securitypolicies$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Securitypolicies$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Securitypolicies$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.securityPolicies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.securityPolicies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Securitypolicies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Securitypolicies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Securitypolicies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Securitypolicies$Addrule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * If true, the request will not be committed.
         */
        validateOnly?: boolean;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicyRule;
    }
    interface Params$Resource$Securitypolicies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to delete.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Securitypolicies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the security policy to get.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Securitypolicies$Getrule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The priority of the rule to get from the security policy.
         */
        priority?: number;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the security policy to which the queried rule belongs.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Securitypolicies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * If true, the request will not be committed.
         */
        validateOnly?: boolean;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicy;
    }
    interface Params$Resource$Securitypolicies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Securitypolicies$Listpreconfiguredexpressionsets extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Securitypolicies$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicy;
    }
    interface Params$Resource$Securitypolicies$Patchrule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The priority of the rule to patch.
         */
        priority?: number;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
        /**
         * If true, the request will not be committed.
         */
        validateOnly?: boolean;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SecurityPolicyRule;
    }
    interface Params$Resource$Securitypolicies$Removerule extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The priority of the rule to remove from the security policy.
         */
        priority?: number;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the security policy to update.
         */
        securityPolicy?: string;
    }
    interface Params$Resource$Securitypolicies$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetLabelsRequest;
    }
    interface Params$Resource$Securitypolicies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Snapshots {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.snapshots.delete
         * @desc Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot.  For more information, see Deleting snapshots.
         * @alias compute.snapshots.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.snapshot Name of the Snapshot resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Snapshots$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Snapshots$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Snapshots$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.snapshots.get
         * @desc Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.
         * @alias compute.snapshots.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.snapshot Name of the Snapshot resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Snapshots$Get, options?: MethodOptions): GaxiosPromise<Schema$Snapshot>;
        get(params: Params$Resource$Snapshots$Get, options: MethodOptions | BodyResponseCallback<Schema$Snapshot>, callback: BodyResponseCallback<Schema$Snapshot>): void;
        get(params: Params$Resource$Snapshots$Get, callback: BodyResponseCallback<Schema$Snapshot>): void;
        get(callback: BodyResponseCallback<Schema$Snapshot>): void;
        /**
         * compute.snapshots.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.snapshots.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Snapshots$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Snapshots$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Snapshots$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.snapshots.list
         * @desc Retrieves the list of Snapshot resources contained within the specified project.
         * @alias compute.snapshots.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Snapshots$List, options?: MethodOptions): GaxiosPromise<Schema$SnapshotList>;
        list(params: Params$Resource$Snapshots$List, options: MethodOptions | BodyResponseCallback<Schema$SnapshotList>, callback: BodyResponseCallback<Schema$SnapshotList>): void;
        list(params: Params$Resource$Snapshots$List, callback: BodyResponseCallback<Schema$SnapshotList>): void;
        list(callback: BodyResponseCallback<Schema$SnapshotList>): void;
        /**
         * compute.snapshots.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.snapshots.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Snapshots$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Snapshots$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Snapshots$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.snapshots.setLabels
         * @desc Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.snapshots.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().GlobalSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Snapshots$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Snapshots$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Snapshots$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.snapshots.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.snapshots.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Snapshots$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Snapshots$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Snapshots$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Snapshots$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Snapshot resource to delete.
         */
        snapshot?: string;
    }
    interface Params$Resource$Snapshots$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the Snapshot resource to return.
         */
        snapshot?: string;
    }
    interface Params$Resource$Snapshots$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Snapshots$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Snapshots$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetPolicyRequest;
    }
    interface Params$Resource$Snapshots$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$GlobalSetLabelsRequest;
    }
    interface Params$Resource$Snapshots$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Sslcertificates {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.sslCertificates.aggregatedList
         * @desc Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.
         * @alias compute.sslCertificates.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Name of the project scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Sslcertificates$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$SslCertificateAggregatedList>;
        aggregatedList(params: Params$Resource$Sslcertificates$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$SslCertificateAggregatedList>, callback: BodyResponseCallback<Schema$SslCertificateAggregatedList>): void;
        aggregatedList(params: Params$Resource$Sslcertificates$Aggregatedlist, callback: BodyResponseCallback<Schema$SslCertificateAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$SslCertificateAggregatedList>): void;
        /**
         * compute.sslCertificates.delete
         * @desc Deletes the specified SslCertificate resource.
         * @alias compute.sslCertificates.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.sslCertificate Name of the SslCertificate resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Sslcertificates$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Sslcertificates$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Sslcertificates$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.sslCertificates.get
         * @desc Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.
         * @alias compute.sslCertificates.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.sslCertificate Name of the SslCertificate resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Sslcertificates$Get, options?: MethodOptions): GaxiosPromise<Schema$SslCertificate>;
        get(params: Params$Resource$Sslcertificates$Get, options: MethodOptions | BodyResponseCallback<Schema$SslCertificate>, callback: BodyResponseCallback<Schema$SslCertificate>): void;
        get(params: Params$Resource$Sslcertificates$Get, callback: BodyResponseCallback<Schema$SslCertificate>): void;
        get(callback: BodyResponseCallback<Schema$SslCertificate>): void;
        /**
         * compute.sslCertificates.insert
         * @desc Creates a SslCertificate resource in the specified project using the data included in the request.
         * @alias compute.sslCertificates.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().SslCertificate} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Sslcertificates$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Sslcertificates$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Sslcertificates$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.sslCertificates.list
         * @desc Retrieves the list of SslCertificate resources available to the specified project.
         * @alias compute.sslCertificates.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Sslcertificates$List, options?: MethodOptions): GaxiosPromise<Schema$SslCertificateList>;
        list(params: Params$Resource$Sslcertificates$List, options: MethodOptions | BodyResponseCallback<Schema$SslCertificateList>, callback: BodyResponseCallback<Schema$SslCertificateList>): void;
        list(params: Params$Resource$Sslcertificates$List, callback: BodyResponseCallback<Schema$SslCertificateList>): void;
        list(callback: BodyResponseCallback<Schema$SslCertificateList>): void;
        /**
         * compute.sslCertificates.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.sslCertificates.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Sslcertificates$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Sslcertificates$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Sslcertificates$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Sslcertificates$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Name of the project scoping this request.
         */
        project?: string;
    }
    interface Params$Resource$Sslcertificates$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the SslCertificate resource to delete.
         */
        sslCertificate?: string;
    }
    interface Params$Resource$Sslcertificates$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the SslCertificate resource to return.
         */
        sslCertificate?: string;
    }
    interface Params$Resource$Sslcertificates$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SslCertificate;
    }
    interface Params$Resource$Sslcertificates$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Sslcertificates$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Sslpolicies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.sslPolicies.delete
         * @desc Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
         * @alias compute.sslPolicies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.sslPolicy Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Sslpolicies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Sslpolicies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Sslpolicies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.sslPolicies.get
         * @desc Lists all of the ordered rules present in a single specified policy.
         * @alias compute.sslPolicies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Sslpolicies$Get, options?: MethodOptions): GaxiosPromise<Schema$SslPolicy>;
        get(params: Params$Resource$Sslpolicies$Get, options: MethodOptions | BodyResponseCallback<Schema$SslPolicy>, callback: BodyResponseCallback<Schema$SslPolicy>): void;
        get(params: Params$Resource$Sslpolicies$Get, callback: BodyResponseCallback<Schema$SslPolicy>): void;
        get(callback: BodyResponseCallback<Schema$SslPolicy>): void;
        /**
         * compute.sslPolicies.insert
         * @desc Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.
         * @alias compute.sslPolicies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().SslPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Sslpolicies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Sslpolicies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Sslpolicies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.sslPolicies.list
         * @desc Lists all the SSL policies that have been configured for the specified project.
         * @alias compute.sslPolicies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Sslpolicies$List, options?: MethodOptions): GaxiosPromise<Schema$SslPoliciesList>;
        list(params: Params$Resource$Sslpolicies$List, options: MethodOptions | BodyResponseCallback<Schema$SslPoliciesList>, callback: BodyResponseCallback<Schema$SslPoliciesList>): void;
        list(params: Params$Resource$Sslpolicies$List, callback: BodyResponseCallback<Schema$SslPoliciesList>): void;
        list(callback: BodyResponseCallback<Schema$SslPoliciesList>): void;
        /**
         * compute.sslPolicies.listAvailableFeatures
         * @desc Lists all features that can be specified in the SSL policy when using custom profile.
         * @alias compute.sslPolicies.listAvailableFeatures
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listAvailableFeatures(params?: Params$Resource$Sslpolicies$Listavailablefeatures, options?: MethodOptions): GaxiosPromise<Schema$SslPoliciesListAvailableFeaturesResponse>;
        listAvailableFeatures(params: Params$Resource$Sslpolicies$Listavailablefeatures, options: MethodOptions | BodyResponseCallback<Schema$SslPoliciesListAvailableFeaturesResponse>, callback: BodyResponseCallback<Schema$SslPoliciesListAvailableFeaturesResponse>): void;
        listAvailableFeatures(params: Params$Resource$Sslpolicies$Listavailablefeatures, callback: BodyResponseCallback<Schema$SslPoliciesListAvailableFeaturesResponse>): void;
        listAvailableFeatures(callback: BodyResponseCallback<Schema$SslPoliciesListAvailableFeaturesResponse>): void;
        /**
         * compute.sslPolicies.patch
         * @desc Patches the specified SSL policy with the data included in the request.
         * @alias compute.sslPolicies.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.sslPolicy Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
         * @param {().SslPolicy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Sslpolicies$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Sslpolicies$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Sslpolicies$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.sslPolicies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.sslPolicies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Sslpolicies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Sslpolicies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Sslpolicies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Sslpolicies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035.
         */
        sslPolicy?: string;
    }
    interface Params$Resource$Sslpolicies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
         */
        sslPolicy?: string;
    }
    interface Params$Resource$Sslpolicies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SslPolicy;
    }
    interface Params$Resource$Sslpolicies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Sslpolicies$Listavailablefeatures extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Sslpolicies$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
         */
        sslPolicy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SslPolicy;
    }
    interface Params$Resource$Sslpolicies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Subnetworks {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.subnetworks.aggregatedList
         * @desc Retrieves an aggregated list of subnetworks.
         * @alias compute.subnetworks.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Subnetworks$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$SubnetworkAggregatedList>;
        aggregatedList(params: Params$Resource$Subnetworks$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$SubnetworkAggregatedList>, callback: BodyResponseCallback<Schema$SubnetworkAggregatedList>): void;
        aggregatedList(params: Params$Resource$Subnetworks$Aggregatedlist, callback: BodyResponseCallback<Schema$SubnetworkAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$SubnetworkAggregatedList>): void;
        /**
         * compute.subnetworks.delete
         * @desc Deletes the specified subnetwork.
         * @alias compute.subnetworks.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.subnetwork Name of the Subnetwork resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Subnetworks$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Subnetworks$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Subnetworks$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.subnetworks.expandIpCidrRange
         * @desc Expands the IP CIDR range of the subnetwork to a specified value.
         * @alias compute.subnetworks.expandIpCidrRange
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.subnetwork Name of the Subnetwork resource to update.
         * @param {().SubnetworksExpandIpCidrRangeRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        expandIpCidrRange(params?: Params$Resource$Subnetworks$Expandipcidrrange, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        expandIpCidrRange(params: Params$Resource$Subnetworks$Expandipcidrrange, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        expandIpCidrRange(params: Params$Resource$Subnetworks$Expandipcidrrange, callback: BodyResponseCallback<Schema$Operation>): void;
        expandIpCidrRange(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.subnetworks.get
         * @desc Returns the specified subnetwork. Gets a list of available subnetworks list() request.
         * @alias compute.subnetworks.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.subnetwork Name of the Subnetwork resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Subnetworks$Get, options?: MethodOptions): GaxiosPromise<Schema$Subnetwork>;
        get(params: Params$Resource$Subnetworks$Get, options: MethodOptions | BodyResponseCallback<Schema$Subnetwork>, callback: BodyResponseCallback<Schema$Subnetwork>): void;
        get(params: Params$Resource$Subnetworks$Get, callback: BodyResponseCallback<Schema$Subnetwork>): void;
        get(callback: BodyResponseCallback<Schema$Subnetwork>): void;
        /**
         * compute.subnetworks.getIamPolicy
         * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.
         * @alias compute.subnetworks.getIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getIamPolicy(params?: Params$Resource$Subnetworks$Getiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        getIamPolicy(params: Params$Resource$Subnetworks$Getiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(params: Params$Resource$Subnetworks$Getiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        getIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.subnetworks.insert
         * @desc Creates a subnetwork in the specified project using the data included in the request.
         * @alias compute.subnetworks.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().Subnetwork} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Subnetworks$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Subnetworks$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Subnetworks$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.subnetworks.list
         * @desc Retrieves a list of subnetworks available to the specified project.
         * @alias compute.subnetworks.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Subnetworks$List, options?: MethodOptions): GaxiosPromise<Schema$SubnetworkList>;
        list(params: Params$Resource$Subnetworks$List, options: MethodOptions | BodyResponseCallback<Schema$SubnetworkList>, callback: BodyResponseCallback<Schema$SubnetworkList>): void;
        list(params: Params$Resource$Subnetworks$List, callback: BodyResponseCallback<Schema$SubnetworkList>): void;
        list(callback: BodyResponseCallback<Schema$SubnetworkList>): void;
        /**
         * compute.subnetworks.listUsable
         * @desc Retrieves an aggregated list of usable subnetworks.
         * @alias compute.subnetworks.listUsable
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        listUsable(params?: Params$Resource$Subnetworks$Listusable, options?: MethodOptions): GaxiosPromise<Schema$UsableSubnetworksAggregatedList>;
        listUsable(params: Params$Resource$Subnetworks$Listusable, options: MethodOptions | BodyResponseCallback<Schema$UsableSubnetworksAggregatedList>, callback: BodyResponseCallback<Schema$UsableSubnetworksAggregatedList>): void;
        listUsable(params: Params$Resource$Subnetworks$Listusable, callback: BodyResponseCallback<Schema$UsableSubnetworksAggregatedList>): void;
        listUsable(callback: BodyResponseCallback<Schema$UsableSubnetworksAggregatedList>): void;
        /**
         * compute.subnetworks.patch
         * @desc Patches the specified subnetwork with the data included in the request. Only certain fields can up updated with a patch request as indicated in the field descriptions. You must specify the current fingeprint of the subnetwork resource being patched.
         * @alias compute.subnetworks.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {integer=} params.drainTimeoutSeconds The drain timeout specifies the upper bound in seconds on the amount of time allowed to drain connections from the current ACTIVE subnetwork to the current BACKUP subnetwork. The drain timeout is only applicable when the following conditions are true: - the subnetwork being patched has purpose = INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being patched has role = BACKUP - the patch request is setting the role to ACTIVE. Note that after this patch operation the roles of the ACTIVE and BACKUP subnetworks will be swapped.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.subnetwork Name of the Subnetwork resource to patch.
         * @param {().Subnetwork} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Subnetworks$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Subnetworks$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Subnetworks$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.subnetworks.setIamPolicy
         * @desc Sets the access control policy on the specified resource. Replaces any existing policy.
         * @alias compute.subnetworks.setIamPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetPolicyRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setIamPolicy(params?: Params$Resource$Subnetworks$Setiampolicy, options?: MethodOptions): GaxiosPromise<Schema$Policy>;
        setIamPolicy(params: Params$Resource$Subnetworks$Setiampolicy, options: MethodOptions | BodyResponseCallback<Schema$Policy>, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(params: Params$Resource$Subnetworks$Setiampolicy, callback: BodyResponseCallback<Schema$Policy>): void;
        setIamPolicy(callback: BodyResponseCallback<Schema$Policy>): void;
        /**
         * compute.subnetworks.setPrivateIpGoogleAccess
         * @desc Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
         * @alias compute.subnetworks.setPrivateIpGoogleAccess
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.subnetwork Name of the Subnetwork resource.
         * @param {().SubnetworksSetPrivateIpGoogleAccessRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setPrivateIpGoogleAccess(params?: Params$Resource$Subnetworks$Setprivateipgoogleaccess, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setPrivateIpGoogleAccess(params: Params$Resource$Subnetworks$Setprivateipgoogleaccess, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setPrivateIpGoogleAccess(params: Params$Resource$Subnetworks$Setprivateipgoogleaccess, callback: BodyResponseCallback<Schema$Operation>): void;
        setPrivateIpGoogleAccess(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.subnetworks.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.subnetworks.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Subnetworks$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Subnetworks$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Subnetworks$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Subnetworks$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Subnetworks$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Subnetwork resource to delete.
         */
        subnetwork?: string;
    }
    interface Params$Resource$Subnetworks$Expandipcidrrange extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Subnetwork resource to update.
         */
        subnetwork?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SubnetworksExpandIpCidrRangeRequest;
    }
    interface Params$Resource$Subnetworks$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the Subnetwork resource to return.
         */
        subnetwork?: string;
    }
    interface Params$Resource$Subnetworks$Getiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
    }
    interface Params$Resource$Subnetworks$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Subnetwork;
    }
    interface Params$Resource$Subnetworks$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Subnetworks$Listusable extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Subnetworks$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * The drain timeout specifies the upper bound in seconds on the amount of time allowed to drain connections from the current ACTIVE subnetwork to the current BACKUP subnetwork. The drain timeout is only applicable when the following conditions are true: - the subnetwork being patched has purpose = INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being patched has role = BACKUP - the patch request is setting the role to ACTIVE. Note that after this patch operation the roles of the ACTIVE and BACKUP subnetworks will be swapped.
         */
        drainTimeoutSeconds?: number;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Subnetwork resource to patch.
         */
        subnetwork?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$Subnetwork;
    }
    interface Params$Resource$Subnetworks$Setiampolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetPolicyRequest;
    }
    interface Params$Resource$Subnetworks$Setprivateipgoogleaccess extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the Subnetwork resource.
         */
        subnetwork?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SubnetworksSetPrivateIpGoogleAccessRequest;
    }
    interface Params$Resource$Subnetworks$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Targethttpproxies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.targetHttpProxies.aggregatedList
         * @desc Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.
         * @alias compute.targetHttpProxies.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Name of the project scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Targethttpproxies$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpProxyAggregatedList>;
        aggregatedList(params: Params$Resource$Targethttpproxies$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpProxyAggregatedList>, callback: BodyResponseCallback<Schema$TargetHttpProxyAggregatedList>): void;
        aggregatedList(params: Params$Resource$Targethttpproxies$Aggregatedlist, callback: BodyResponseCallback<Schema$TargetHttpProxyAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$TargetHttpProxyAggregatedList>): void;
        /**
         * compute.targetHttpProxies.delete
         * @desc Deletes the specified TargetHttpProxy resource.
         * @alias compute.targetHttpProxies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpProxy Name of the TargetHttpProxy resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Targethttpproxies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Targethttpproxies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Targethttpproxies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpProxies.get
         * @desc Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.
         * @alias compute.targetHttpProxies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.targetHttpProxy Name of the TargetHttpProxy resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Targethttpproxies$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpProxy>;
        get(params: Params$Resource$Targethttpproxies$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpProxy>, callback: BodyResponseCallback<Schema$TargetHttpProxy>): void;
        get(params: Params$Resource$Targethttpproxies$Get, callback: BodyResponseCallback<Schema$TargetHttpProxy>): void;
        get(callback: BodyResponseCallback<Schema$TargetHttpProxy>): void;
        /**
         * compute.targetHttpProxies.insert
         * @desc Creates a TargetHttpProxy resource in the specified project using the data included in the request.
         * @alias compute.targetHttpProxies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetHttpProxy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Targethttpproxies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Targethttpproxies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Targethttpproxies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpProxies.list
         * @desc Retrieves the list of TargetHttpProxy resources available to the specified project.
         * @alias compute.targetHttpProxies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Targethttpproxies$List, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpProxyList>;
        list(params: Params$Resource$Targethttpproxies$List, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpProxyList>, callback: BodyResponseCallback<Schema$TargetHttpProxyList>): void;
        list(params: Params$Resource$Targethttpproxies$List, callback: BodyResponseCallback<Schema$TargetHttpProxyList>): void;
        list(callback: BodyResponseCallback<Schema$TargetHttpProxyList>): void;
        /**
         * compute.targetHttpProxies.setUrlMap
         * @desc Changes the URL map for TargetHttpProxy.
         * @alias compute.targetHttpProxies.setUrlMap
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpProxy Name of the TargetHttpProxy to set a URL map for.
         * @param {().UrlMapReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setUrlMap(params?: Params$Resource$Targethttpproxies$Seturlmap, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setUrlMap(params: Params$Resource$Targethttpproxies$Seturlmap, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(params: Params$Resource$Targethttpproxies$Seturlmap, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpProxies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.targetHttpProxies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Targethttpproxies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Targethttpproxies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Targethttpproxies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Targethttpproxies$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Name of the project scoping this request.
         */
        project?: string;
    }
    interface Params$Resource$Targethttpproxies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpProxy resource to delete.
         */
        targetHttpProxy?: string;
    }
    interface Params$Resource$Targethttpproxies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the TargetHttpProxy resource to return.
         */
        targetHttpProxy?: string;
    }
    interface Params$Resource$Targethttpproxies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetHttpProxy;
    }
    interface Params$Resource$Targethttpproxies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Targethttpproxies$Seturlmap extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpProxy to set a URL map for.
         */
        targetHttpProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMapReference;
    }
    interface Params$Resource$Targethttpproxies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Targethttpsproxies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.targetHttpsProxies.aggregatedList
         * @desc Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
         * @alias compute.targetHttpsProxies.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Name of the project scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Targethttpsproxies$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpsProxyAggregatedList>;
        aggregatedList(params: Params$Resource$Targethttpsproxies$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpsProxyAggregatedList>, callback: BodyResponseCallback<Schema$TargetHttpsProxyAggregatedList>): void;
        aggregatedList(params: Params$Resource$Targethttpsproxies$Aggregatedlist, callback: BodyResponseCallback<Schema$TargetHttpsProxyAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$TargetHttpsProxyAggregatedList>): void;
        /**
         * compute.targetHttpsProxies.delete
         * @desc Deletes the specified TargetHttpsProxy resource.
         * @alias compute.targetHttpsProxies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Targethttpsproxies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Targethttpsproxies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Targethttpsproxies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpsProxies.get
         * @desc Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.
         * @alias compute.targetHttpsProxies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Targethttpsproxies$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpsProxy>;
        get(params: Params$Resource$Targethttpsproxies$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpsProxy>, callback: BodyResponseCallback<Schema$TargetHttpsProxy>): void;
        get(params: Params$Resource$Targethttpsproxies$Get, callback: BodyResponseCallback<Schema$TargetHttpsProxy>): void;
        get(callback: BodyResponseCallback<Schema$TargetHttpsProxy>): void;
        /**
         * compute.targetHttpsProxies.insert
         * @desc Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
         * @alias compute.targetHttpsProxies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetHttpsProxy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Targethttpsproxies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Targethttpsproxies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Targethttpsproxies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpsProxies.list
         * @desc Retrieves the list of TargetHttpsProxy resources available to the specified project.
         * @alias compute.targetHttpsProxies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Targethttpsproxies$List, options?: MethodOptions): GaxiosPromise<Schema$TargetHttpsProxyList>;
        list(params: Params$Resource$Targethttpsproxies$List, options: MethodOptions | BodyResponseCallback<Schema$TargetHttpsProxyList>, callback: BodyResponseCallback<Schema$TargetHttpsProxyList>): void;
        list(params: Params$Resource$Targethttpsproxies$List, callback: BodyResponseCallback<Schema$TargetHttpsProxyList>): void;
        list(callback: BodyResponseCallback<Schema$TargetHttpsProxyList>): void;
        /**
         * compute.targetHttpsProxies.setQuicOverride
         * @desc Sets the QUIC override policy for TargetHttpsProxy.
         * @alias compute.targetHttpsProxies.setQuicOverride
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035.
         * @param {().TargetHttpsProxiesSetQuicOverrideRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setQuicOverride(params?: Params$Resource$Targethttpsproxies$Setquicoverride, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setQuicOverride(params: Params$Resource$Targethttpsproxies$Setquicoverride, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setQuicOverride(params: Params$Resource$Targethttpsproxies$Setquicoverride, callback: BodyResponseCallback<Schema$Operation>): void;
        setQuicOverride(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpsProxies.setSslCertificates
         * @desc Replaces SslCertificates for TargetHttpsProxy.
         * @alias compute.targetHttpsProxies.setSslCertificates
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
         * @param {().TargetHttpsProxiesSetSslCertificatesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setSslCertificates(params?: Params$Resource$Targethttpsproxies$Setsslcertificates, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setSslCertificates(params: Params$Resource$Targethttpsproxies$Setsslcertificates, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslCertificates(params: Params$Resource$Targethttpsproxies$Setsslcertificates, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslCertificates(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpsProxies.setSslPolicy
         * @desc Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
         * @alias compute.targetHttpsProxies.setSslPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
         * @param {().SslPolicyReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setSslPolicy(params?: Params$Resource$Targethttpsproxies$Setsslpolicy, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setSslPolicy(params: Params$Resource$Targethttpsproxies$Setsslpolicy, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslPolicy(params: Params$Resource$Targethttpsproxies$Setsslpolicy, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslPolicy(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpsProxies.setUrlMap
         * @desc Changes the URL map for TargetHttpsProxy.
         * @alias compute.targetHttpsProxies.setUrlMap
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetHttpsProxy Name of the TargetHttpsProxy resource whose URL map is to be set.
         * @param {().UrlMapReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setUrlMap(params?: Params$Resource$Targethttpsproxies$Seturlmap, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setUrlMap(params: Params$Resource$Targethttpsproxies$Seturlmap, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(params: Params$Resource$Targethttpsproxies$Seturlmap, callback: BodyResponseCallback<Schema$Operation>): void;
        setUrlMap(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetHttpsProxies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.targetHttpsProxies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Targethttpsproxies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Targethttpsproxies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Targethttpsproxies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Targethttpsproxies$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Name of the project scoping this request.
         */
        project?: string;
    }
    interface Params$Resource$Targethttpsproxies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy resource to delete.
         */
        targetHttpsProxy?: string;
    }
    interface Params$Resource$Targethttpsproxies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the TargetHttpsProxy resource to return.
         */
        targetHttpsProxy?: string;
    }
    interface Params$Resource$Targethttpsproxies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetHttpsProxy;
    }
    interface Params$Resource$Targethttpsproxies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Targethttpsproxies$Setquicoverride extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035.
         */
        targetHttpsProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetHttpsProxiesSetQuicOverrideRequest;
    }
    interface Params$Resource$Targethttpsproxies$Setsslcertificates extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
         */
        targetHttpsProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetHttpsProxiesSetSslCertificatesRequest;
    }
    interface Params$Resource$Targethttpsproxies$Setsslpolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
         */
        targetHttpsProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SslPolicyReference;
    }
    interface Params$Resource$Targethttpsproxies$Seturlmap extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetHttpsProxy resource whose URL map is to be set.
         */
        targetHttpsProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMapReference;
    }
    interface Params$Resource$Targethttpsproxies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Targetinstances {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.targetInstances.aggregatedList
         * @desc Retrieves an aggregated list of target instances.
         * @alias compute.targetInstances.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Targetinstances$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$TargetInstanceAggregatedList>;
        aggregatedList(params: Params$Resource$Targetinstances$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$TargetInstanceAggregatedList>, callback: BodyResponseCallback<Schema$TargetInstanceAggregatedList>): void;
        aggregatedList(params: Params$Resource$Targetinstances$Aggregatedlist, callback: BodyResponseCallback<Schema$TargetInstanceAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$TargetInstanceAggregatedList>): void;
        /**
         * compute.targetInstances.delete
         * @desc Deletes the specified TargetInstance resource.
         * @alias compute.targetInstances.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetInstance Name of the TargetInstance resource to delete.
         * @param {string} params.zone Name of the zone scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Targetinstances$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Targetinstances$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Targetinstances$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetInstances.get
         * @desc Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.
         * @alias compute.targetInstances.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.targetInstance Name of the TargetInstance resource to return.
         * @param {string} params.zone Name of the zone scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Targetinstances$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetInstance>;
        get(params: Params$Resource$Targetinstances$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetInstance>, callback: BodyResponseCallback<Schema$TargetInstance>): void;
        get(params: Params$Resource$Targetinstances$Get, callback: BodyResponseCallback<Schema$TargetInstance>): void;
        get(callback: BodyResponseCallback<Schema$TargetInstance>): void;
        /**
         * compute.targetInstances.insert
         * @desc Creates a TargetInstance resource in the specified project and zone using the data included in the request.
         * @alias compute.targetInstances.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.zone Name of the zone scoping this request.
         * @param {().TargetInstance} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Targetinstances$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Targetinstances$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Targetinstances$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetInstances.list
         * @desc Retrieves a list of TargetInstance resources available to the specified project and zone.
         * @alias compute.targetInstances.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Targetinstances$List, options?: MethodOptions): GaxiosPromise<Schema$TargetInstanceList>;
        list(params: Params$Resource$Targetinstances$List, options: MethodOptions | BodyResponseCallback<Schema$TargetInstanceList>, callback: BodyResponseCallback<Schema$TargetInstanceList>): void;
        list(params: Params$Resource$Targetinstances$List, callback: BodyResponseCallback<Schema$TargetInstanceList>): void;
        list(callback: BodyResponseCallback<Schema$TargetInstanceList>): void;
        /**
         * compute.targetInstances.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.targetInstances.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {string} params.zone The name of the zone for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Targetinstances$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Targetinstances$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Targetinstances$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Targetinstances$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Targetinstances$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetInstance resource to delete.
         */
        targetInstance?: string;
        /**
         * Name of the zone scoping this request.
         */
        zone?: string;
    }
    interface Params$Resource$Targetinstances$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the TargetInstance resource to return.
         */
        targetInstance?: string;
        /**
         * Name of the zone scoping this request.
         */
        zone?: string;
    }
    interface Params$Resource$Targetinstances$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the zone scoping this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetInstance;
    }
    interface Params$Resource$Targetinstances$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone scoping this request.
         */
        zone?: string;
    }
    interface Params$Resource$Targetinstances$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * The name of the zone for this request.
         */
        zone?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Targetpools {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.targetPools.addHealthCheck
         * @desc Adds health check URLs to a target pool.
         * @alias compute.targetPools.addHealthCheck
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetPool Name of the target pool to add a health check to.
         * @param {().TargetPoolsAddHealthCheckRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addHealthCheck(params?: Params$Resource$Targetpools$Addhealthcheck, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addHealthCheck(params: Params$Resource$Targetpools$Addhealthcheck, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addHealthCheck(params: Params$Resource$Targetpools$Addhealthcheck, callback: BodyResponseCallback<Schema$Operation>): void;
        addHealthCheck(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetPools.addInstance
         * @desc Adds an instance to a target pool.
         * @alias compute.targetPools.addInstance
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetPool Name of the TargetPool resource to add instances to.
         * @param {().TargetPoolsAddInstanceRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        addInstance(params?: Params$Resource$Targetpools$Addinstance, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        addInstance(params: Params$Resource$Targetpools$Addinstance, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        addInstance(params: Params$Resource$Targetpools$Addinstance, callback: BodyResponseCallback<Schema$Operation>): void;
        addInstance(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetPools.aggregatedList
         * @desc Retrieves an aggregated list of target pools.
         * @alias compute.targetPools.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Targetpools$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$TargetPoolAggregatedList>;
        aggregatedList(params: Params$Resource$Targetpools$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$TargetPoolAggregatedList>, callback: BodyResponseCallback<Schema$TargetPoolAggregatedList>): void;
        aggregatedList(params: Params$Resource$Targetpools$Aggregatedlist, callback: BodyResponseCallback<Schema$TargetPoolAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$TargetPoolAggregatedList>): void;
        /**
         * compute.targetPools.delete
         * @desc Deletes the specified target pool.
         * @alias compute.targetPools.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetPool Name of the TargetPool resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Targetpools$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Targetpools$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Targetpools$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetPools.get
         * @desc Returns the specified target pool. Gets a list of available target pools by making a list() request.
         * @alias compute.targetPools.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.targetPool Name of the TargetPool resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Targetpools$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetPool>;
        get(params: Params$Resource$Targetpools$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetPool>, callback: BodyResponseCallback<Schema$TargetPool>): void;
        get(params: Params$Resource$Targetpools$Get, callback: BodyResponseCallback<Schema$TargetPool>): void;
        get(callback: BodyResponseCallback<Schema$TargetPool>): void;
        /**
         * compute.targetPools.getHealth
         * @desc Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
         * @alias compute.targetPools.getHealth
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string} params.targetPool Name of the TargetPool resource to which the queried instance belongs.
         * @param {().InstanceReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getHealth(params?: Params$Resource$Targetpools$Gethealth, options?: MethodOptions): GaxiosPromise<Schema$TargetPoolInstanceHealth>;
        getHealth(params: Params$Resource$Targetpools$Gethealth, options: MethodOptions | BodyResponseCallback<Schema$TargetPoolInstanceHealth>, callback: BodyResponseCallback<Schema$TargetPoolInstanceHealth>): void;
        getHealth(params: Params$Resource$Targetpools$Gethealth, callback: BodyResponseCallback<Schema$TargetPoolInstanceHealth>): void;
        getHealth(callback: BodyResponseCallback<Schema$TargetPoolInstanceHealth>): void;
        /**
         * compute.targetPools.insert
         * @desc Creates a target pool in the specified project and region using the data included in the request.
         * @alias compute.targetPools.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetPool} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Targetpools$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Targetpools$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Targetpools$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetPools.list
         * @desc Retrieves a list of target pools available to the specified project and region.
         * @alias compute.targetPools.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Targetpools$List, options?: MethodOptions): GaxiosPromise<Schema$TargetPoolList>;
        list(params: Params$Resource$Targetpools$List, options: MethodOptions | BodyResponseCallback<Schema$TargetPoolList>, callback: BodyResponseCallback<Schema$TargetPoolList>): void;
        list(params: Params$Resource$Targetpools$List, callback: BodyResponseCallback<Schema$TargetPoolList>): void;
        list(callback: BodyResponseCallback<Schema$TargetPoolList>): void;
        /**
         * compute.targetPools.removeHealthCheck
         * @desc Removes health check URL from a target pool.
         * @alias compute.targetPools.removeHealthCheck
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetPool Name of the target pool to remove health checks from.
         * @param {().TargetPoolsRemoveHealthCheckRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeHealthCheck(params?: Params$Resource$Targetpools$Removehealthcheck, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeHealthCheck(params: Params$Resource$Targetpools$Removehealthcheck, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeHealthCheck(params: Params$Resource$Targetpools$Removehealthcheck, callback: BodyResponseCallback<Schema$Operation>): void;
        removeHealthCheck(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetPools.removeInstance
         * @desc Removes instance URL from a target pool.
         * @alias compute.targetPools.removeInstance
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetPool Name of the TargetPool resource to remove instances from.
         * @param {().TargetPoolsRemoveInstanceRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        removeInstance(params?: Params$Resource$Targetpools$Removeinstance, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        removeInstance(params: Params$Resource$Targetpools$Removeinstance, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        removeInstance(params: Params$Resource$Targetpools$Removeinstance, callback: BodyResponseCallback<Schema$Operation>): void;
        removeInstance(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetPools.setBackup
         * @desc Changes a backup target pool's configurations.
         * @alias compute.targetPools.setBackup
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {number=} params.failoverRatio New failoverRatio value for the target pool.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region scoping this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetPool Name of the TargetPool resource to set a backup pool for.
         * @param {().TargetReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setBackup(params?: Params$Resource$Targetpools$Setbackup, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setBackup(params: Params$Resource$Targetpools$Setbackup, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setBackup(params: Params$Resource$Targetpools$Setbackup, callback: BodyResponseCallback<Schema$Operation>): void;
        setBackup(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetPools.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.targetPools.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Targetpools$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Targetpools$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Targetpools$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Targetpools$Addhealthcheck extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the target pool to add a health check to.
         */
        targetPool?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetPoolsAddHealthCheckRequest;
    }
    interface Params$Resource$Targetpools$Addinstance extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetPool resource to add instances to.
         */
        targetPool?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetPoolsAddInstanceRequest;
    }
    interface Params$Resource$Targetpools$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Targetpools$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetPool resource to delete.
         */
        targetPool?: string;
    }
    interface Params$Resource$Targetpools$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the TargetPool resource to return.
         */
        targetPool?: string;
    }
    interface Params$Resource$Targetpools$Gethealth extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * Name of the TargetPool resource to which the queried instance belongs.
         */
        targetPool?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$InstanceReference;
    }
    interface Params$Resource$Targetpools$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetPool;
    }
    interface Params$Resource$Targetpools$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
    }
    interface Params$Resource$Targetpools$Removehealthcheck extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the target pool to remove health checks from.
         */
        targetPool?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetPoolsRemoveHealthCheckRequest;
    }
    interface Params$Resource$Targetpools$Removeinstance extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetPool resource to remove instances from.
         */
        targetPool?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetPoolsRemoveInstanceRequest;
    }
    interface Params$Resource$Targetpools$Setbackup extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * New failoverRatio value for the target pool.
         */
        failoverRatio?: number;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region scoping this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetPool resource to set a backup pool for.
         */
        targetPool?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetReference;
    }
    interface Params$Resource$Targetpools$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Targetsslproxies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.targetSslProxies.delete
         * @desc Deletes the specified TargetSslProxy resource.
         * @alias compute.targetSslProxies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetSslProxy Name of the TargetSslProxy resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Targetsslproxies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Targetsslproxies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Targetsslproxies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetSslProxies.get
         * @desc Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.
         * @alias compute.targetSslProxies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.targetSslProxy Name of the TargetSslProxy resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Targetsslproxies$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetSslProxy>;
        get(params: Params$Resource$Targetsslproxies$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetSslProxy>, callback: BodyResponseCallback<Schema$TargetSslProxy>): void;
        get(params: Params$Resource$Targetsslproxies$Get, callback: BodyResponseCallback<Schema$TargetSslProxy>): void;
        get(callback: BodyResponseCallback<Schema$TargetSslProxy>): void;
        /**
         * compute.targetSslProxies.insert
         * @desc Creates a TargetSslProxy resource in the specified project using the data included in the request.
         * @alias compute.targetSslProxies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetSslProxy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Targetsslproxies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Targetsslproxies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Targetsslproxies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetSslProxies.list
         * @desc Retrieves the list of TargetSslProxy resources available to the specified project.
         * @alias compute.targetSslProxies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Targetsslproxies$List, options?: MethodOptions): GaxiosPromise<Schema$TargetSslProxyList>;
        list(params: Params$Resource$Targetsslproxies$List, options: MethodOptions | BodyResponseCallback<Schema$TargetSslProxyList>, callback: BodyResponseCallback<Schema$TargetSslProxyList>): void;
        list(params: Params$Resource$Targetsslproxies$List, callback: BodyResponseCallback<Schema$TargetSslProxyList>): void;
        list(callback: BodyResponseCallback<Schema$TargetSslProxyList>): void;
        /**
         * compute.targetSslProxies.setBackendService
         * @desc Changes the BackendService for TargetSslProxy.
         * @alias compute.targetSslProxies.setBackendService
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetSslProxy Name of the TargetSslProxy resource whose BackendService resource is to be set.
         * @param {().TargetSslProxiesSetBackendServiceRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setBackendService(params?: Params$Resource$Targetsslproxies$Setbackendservice, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setBackendService(params: Params$Resource$Targetsslproxies$Setbackendservice, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setBackendService(params: Params$Resource$Targetsslproxies$Setbackendservice, callback: BodyResponseCallback<Schema$Operation>): void;
        setBackendService(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetSslProxies.setProxyHeader
         * @desc Changes the ProxyHeaderType for TargetSslProxy.
         * @alias compute.targetSslProxies.setProxyHeader
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetSslProxy Name of the TargetSslProxy resource whose ProxyHeader is to be set.
         * @param {().TargetSslProxiesSetProxyHeaderRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setProxyHeader(params?: Params$Resource$Targetsslproxies$Setproxyheader, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setProxyHeader(params: Params$Resource$Targetsslproxies$Setproxyheader, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setProxyHeader(params: Params$Resource$Targetsslproxies$Setproxyheader, callback: BodyResponseCallback<Schema$Operation>): void;
        setProxyHeader(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetSslProxies.setSslCertificates
         * @desc Changes SslCertificates for TargetSslProxy.
         * @alias compute.targetSslProxies.setSslCertificates
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetSslProxy Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
         * @param {().TargetSslProxiesSetSslCertificatesRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setSslCertificates(params?: Params$Resource$Targetsslproxies$Setsslcertificates, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setSslCertificates(params: Params$Resource$Targetsslproxies$Setsslcertificates, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslCertificates(params: Params$Resource$Targetsslproxies$Setsslcertificates, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslCertificates(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetSslProxies.setSslPolicy
         * @desc Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
         * @alias compute.targetSslProxies.setSslPolicy
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetSslProxy Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
         * @param {().SslPolicyReference} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setSslPolicy(params?: Params$Resource$Targetsslproxies$Setsslpolicy, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setSslPolicy(params: Params$Resource$Targetsslproxies$Setsslpolicy, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslPolicy(params: Params$Resource$Targetsslproxies$Setsslpolicy, callback: BodyResponseCallback<Schema$Operation>): void;
        setSslPolicy(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetSslProxies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.targetSslProxies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Targetsslproxies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Targetsslproxies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Targetsslproxies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Targetsslproxies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetSslProxy resource to delete.
         */
        targetSslProxy?: string;
    }
    interface Params$Resource$Targetsslproxies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the TargetSslProxy resource to return.
         */
        targetSslProxy?: string;
    }
    interface Params$Resource$Targetsslproxies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetSslProxy;
    }
    interface Params$Resource$Targetsslproxies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Targetsslproxies$Setbackendservice extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetSslProxy resource whose BackendService resource is to be set.
         */
        targetSslProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetSslProxiesSetBackendServiceRequest;
    }
    interface Params$Resource$Targetsslproxies$Setproxyheader extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetSslProxy resource whose ProxyHeader is to be set.
         */
        targetSslProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetSslProxiesSetProxyHeaderRequest;
    }
    interface Params$Resource$Targetsslproxies$Setsslcertificates extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
         */
        targetSslProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetSslProxiesSetSslCertificatesRequest;
    }
    interface Params$Resource$Targetsslproxies$Setsslpolicy extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
         */
        targetSslProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$SslPolicyReference;
    }
    interface Params$Resource$Targetsslproxies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Targettcpproxies {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.targetTcpProxies.delete
         * @desc Deletes the specified TargetTcpProxy resource.
         * @alias compute.targetTcpProxies.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetTcpProxy Name of the TargetTcpProxy resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Targettcpproxies$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Targettcpproxies$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Targettcpproxies$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetTcpProxies.get
         * @desc Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.
         * @alias compute.targetTcpProxies.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.targetTcpProxy Name of the TargetTcpProxy resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Targettcpproxies$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetTcpProxy>;
        get(params: Params$Resource$Targettcpproxies$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetTcpProxy>, callback: BodyResponseCallback<Schema$TargetTcpProxy>): void;
        get(params: Params$Resource$Targettcpproxies$Get, callback: BodyResponseCallback<Schema$TargetTcpProxy>): void;
        get(callback: BodyResponseCallback<Schema$TargetTcpProxy>): void;
        /**
         * compute.targetTcpProxies.insert
         * @desc Creates a TargetTcpProxy resource in the specified project using the data included in the request.
         * @alias compute.targetTcpProxies.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetTcpProxy} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Targettcpproxies$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Targettcpproxies$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Targettcpproxies$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetTcpProxies.list
         * @desc Retrieves the list of TargetTcpProxy resources available to the specified project.
         * @alias compute.targetTcpProxies.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Targettcpproxies$List, options?: MethodOptions): GaxiosPromise<Schema$TargetTcpProxyList>;
        list(params: Params$Resource$Targettcpproxies$List, options: MethodOptions | BodyResponseCallback<Schema$TargetTcpProxyList>, callback: BodyResponseCallback<Schema$TargetTcpProxyList>): void;
        list(params: Params$Resource$Targettcpproxies$List, callback: BodyResponseCallback<Schema$TargetTcpProxyList>): void;
        list(callback: BodyResponseCallback<Schema$TargetTcpProxyList>): void;
        /**
         * compute.targetTcpProxies.setBackendService
         * @desc Changes the BackendService for TargetTcpProxy.
         * @alias compute.targetTcpProxies.setBackendService
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetTcpProxy Name of the TargetTcpProxy resource whose BackendService resource is to be set.
         * @param {().TargetTcpProxiesSetBackendServiceRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setBackendService(params?: Params$Resource$Targettcpproxies$Setbackendservice, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setBackendService(params: Params$Resource$Targettcpproxies$Setbackendservice, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setBackendService(params: Params$Resource$Targettcpproxies$Setbackendservice, callback: BodyResponseCallback<Schema$Operation>): void;
        setBackendService(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetTcpProxies.setProxyHeader
         * @desc Changes the ProxyHeaderType for TargetTcpProxy.
         * @alias compute.targetTcpProxies.setProxyHeader
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetTcpProxy Name of the TargetTcpProxy resource whose ProxyHeader is to be set.
         * @param {().TargetTcpProxiesSetProxyHeaderRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setProxyHeader(params?: Params$Resource$Targettcpproxies$Setproxyheader, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setProxyHeader(params: Params$Resource$Targettcpproxies$Setproxyheader, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setProxyHeader(params: Params$Resource$Targettcpproxies$Setproxyheader, callback: BodyResponseCallback<Schema$Operation>): void;
        setProxyHeader(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetTcpProxies.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.targetTcpProxies.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Targettcpproxies$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Targettcpproxies$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Targettcpproxies$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Targettcpproxies$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetTcpProxy resource to delete.
         */
        targetTcpProxy?: string;
    }
    interface Params$Resource$Targettcpproxies$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the TargetTcpProxy resource to return.
         */
        targetTcpProxy?: string;
    }
    interface Params$Resource$Targettcpproxies$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetTcpProxy;
    }
    interface Params$Resource$Targettcpproxies$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Targettcpproxies$Setbackendservice extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetTcpProxy resource whose BackendService resource is to be set.
         */
        targetTcpProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetTcpProxiesSetBackendServiceRequest;
    }
    interface Params$Resource$Targettcpproxies$Setproxyheader extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the TargetTcpProxy resource whose ProxyHeader is to be set.
         */
        targetTcpProxy?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetTcpProxiesSetProxyHeaderRequest;
    }
    interface Params$Resource$Targettcpproxies$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Targetvpngateways {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.targetVpnGateways.aggregatedList
         * @desc Retrieves an aggregated list of target VPN gateways.
         * @alias compute.targetVpnGateways.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Targetvpngateways$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$TargetVpnGatewayAggregatedList>;
        aggregatedList(params: Params$Resource$Targetvpngateways$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$TargetVpnGatewayAggregatedList>, callback: BodyResponseCallback<Schema$TargetVpnGatewayAggregatedList>): void;
        aggregatedList(params: Params$Resource$Targetvpngateways$Aggregatedlist, callback: BodyResponseCallback<Schema$TargetVpnGatewayAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$TargetVpnGatewayAggregatedList>): void;
        /**
         * compute.targetVpnGateways.delete
         * @desc Deletes the specified target VPN gateway.
         * @alias compute.targetVpnGateways.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.targetVpnGateway Name of the target VPN gateway to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Targetvpngateways$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Targetvpngateways$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Targetvpngateways$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetVpnGateways.get
         * @desc Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
         * @alias compute.targetVpnGateways.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.targetVpnGateway Name of the target VPN gateway to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Targetvpngateways$Get, options?: MethodOptions): GaxiosPromise<Schema$TargetVpnGateway>;
        get(params: Params$Resource$Targetvpngateways$Get, options: MethodOptions | BodyResponseCallback<Schema$TargetVpnGateway>, callback: BodyResponseCallback<Schema$TargetVpnGateway>): void;
        get(params: Params$Resource$Targetvpngateways$Get, callback: BodyResponseCallback<Schema$TargetVpnGateway>): void;
        get(callback: BodyResponseCallback<Schema$TargetVpnGateway>): void;
        /**
         * compute.targetVpnGateways.insert
         * @desc Creates a target VPN gateway in the specified project and region using the data included in the request.
         * @alias compute.targetVpnGateways.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().TargetVpnGateway} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Targetvpngateways$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Targetvpngateways$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Targetvpngateways$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetVpnGateways.list
         * @desc Retrieves a list of target VPN gateways available to the specified project and region.
         * @alias compute.targetVpnGateways.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Targetvpngateways$List, options?: MethodOptions): GaxiosPromise<Schema$TargetVpnGatewayList>;
        list(params: Params$Resource$Targetvpngateways$List, options: MethodOptions | BodyResponseCallback<Schema$TargetVpnGatewayList>, callback: BodyResponseCallback<Schema$TargetVpnGatewayList>): void;
        list(params: Params$Resource$Targetvpngateways$List, callback: BodyResponseCallback<Schema$TargetVpnGatewayList>): void;
        list(callback: BodyResponseCallback<Schema$TargetVpnGatewayList>): void;
        /**
         * compute.targetVpnGateways.setLabels
         * @desc Sets the labels on a TargetVpnGateway. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.targetVpnGateways.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Targetvpngateways$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Targetvpngateways$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Targetvpngateways$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.targetVpnGateways.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.targetVpnGateways.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Targetvpngateways$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Targetvpngateways$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Targetvpngateways$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Targetvpngateways$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Targetvpngateways$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the target VPN gateway to delete.
         */
        targetVpnGateway?: string;
    }
    interface Params$Resource$Targetvpngateways$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the target VPN gateway to return.
         */
        targetVpnGateway?: string;
    }
    interface Params$Resource$Targetvpngateways$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TargetVpnGateway;
    }
    interface Params$Resource$Targetvpngateways$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Targetvpngateways$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetLabelsRequest;
    }
    interface Params$Resource$Targetvpngateways$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Urlmaps {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.urlMaps.aggregatedList
         * @desc Retrieves the list of all UrlMap resources, regional and global, available to the specified project.
         * @alias compute.urlMaps.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Name of the project scoping this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Urlmaps$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$UrlMapsAggregatedList>;
        aggregatedList(params: Params$Resource$Urlmaps$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$UrlMapsAggregatedList>, callback: BodyResponseCallback<Schema$UrlMapsAggregatedList>): void;
        aggregatedList(params: Params$Resource$Urlmaps$Aggregatedlist, callback: BodyResponseCallback<Schema$UrlMapsAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$UrlMapsAggregatedList>): void;
        /**
         * compute.urlMaps.delete
         * @desc Deletes the specified UrlMap resource.
         * @alias compute.urlMaps.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.urlMap Name of the UrlMap resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Urlmaps$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Urlmaps$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Urlmaps$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.urlMaps.get
         * @desc Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.
         * @alias compute.urlMaps.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.urlMap Name of the UrlMap resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Urlmaps$Get, options?: MethodOptions): GaxiosPromise<Schema$UrlMap>;
        get(params: Params$Resource$Urlmaps$Get, options: MethodOptions | BodyResponseCallback<Schema$UrlMap>, callback: BodyResponseCallback<Schema$UrlMap>): void;
        get(params: Params$Resource$Urlmaps$Get, callback: BodyResponseCallback<Schema$UrlMap>): void;
        get(callback: BodyResponseCallback<Schema$UrlMap>): void;
        /**
         * compute.urlMaps.insert
         * @desc Creates a UrlMap resource in the specified project using the data included in the request.
         * @alias compute.urlMaps.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().UrlMap} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Urlmaps$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Urlmaps$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Urlmaps$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.urlMaps.invalidateCache
         * @desc Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap.
         * @alias compute.urlMaps.invalidateCache
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.urlMap Name of the UrlMap scoping this request.
         * @param {().CacheInvalidationRule} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        invalidateCache(params?: Params$Resource$Urlmaps$Invalidatecache, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        invalidateCache(params: Params$Resource$Urlmaps$Invalidatecache, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        invalidateCache(params: Params$Resource$Urlmaps$Invalidatecache, callback: BodyResponseCallback<Schema$Operation>): void;
        invalidateCache(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.urlMaps.list
         * @desc Retrieves the list of UrlMap resources available to the specified project.
         * @alias compute.urlMaps.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Urlmaps$List, options?: MethodOptions): GaxiosPromise<Schema$UrlMapList>;
        list(params: Params$Resource$Urlmaps$List, options: MethodOptions | BodyResponseCallback<Schema$UrlMapList>, callback: BodyResponseCallback<Schema$UrlMapList>): void;
        list(params: Params$Resource$Urlmaps$List, callback: BodyResponseCallback<Schema$UrlMapList>): void;
        list(callback: BodyResponseCallback<Schema$UrlMapList>): void;
        /**
         * compute.urlMaps.patch
         * @desc Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
         * @alias compute.urlMaps.patch
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.urlMap Name of the UrlMap resource to patch.
         * @param {().UrlMap} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        patch(params?: Params$Resource$Urlmaps$Patch, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        patch(params: Params$Resource$Urlmaps$Patch, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(params: Params$Resource$Urlmaps$Patch, callback: BodyResponseCallback<Schema$Operation>): void;
        patch(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.urlMaps.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.urlMaps.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Urlmaps$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Urlmaps$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Urlmaps$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        /**
         * compute.urlMaps.update
         * @desc Updates the specified UrlMap resource with the data included in the request.
         * @alias compute.urlMaps.update
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.urlMap Name of the UrlMap resource to update.
         * @param {().UrlMap} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        update(params?: Params$Resource$Urlmaps$Update, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        update(params: Params$Resource$Urlmaps$Update, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        update(params: Params$Resource$Urlmaps$Update, callback: BodyResponseCallback<Schema$Operation>): void;
        update(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.urlMaps.validate
         * @desc Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
         * @alias compute.urlMaps.validate
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.urlMap Name of the UrlMap resource to be validated as.
         * @param {().UrlMapsValidateRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        validate(params?: Params$Resource$Urlmaps$Validate, options?: MethodOptions): GaxiosPromise<Schema$UrlMapsValidateResponse>;
        validate(params: Params$Resource$Urlmaps$Validate, options: MethodOptions | BodyResponseCallback<Schema$UrlMapsValidateResponse>, callback: BodyResponseCallback<Schema$UrlMapsValidateResponse>): void;
        validate(params: Params$Resource$Urlmaps$Validate, callback: BodyResponseCallback<Schema$UrlMapsValidateResponse>): void;
        validate(callback: BodyResponseCallback<Schema$UrlMapsValidateResponse>): void;
    }
    interface Params$Resource$Urlmaps$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Name of the project scoping this request.
         */
        project?: string;
    }
    interface Params$Resource$Urlmaps$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the UrlMap resource to delete.
         */
        urlMap?: string;
    }
    interface Params$Resource$Urlmaps$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the UrlMap resource to return.
         */
        urlMap?: string;
    }
    interface Params$Resource$Urlmaps$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMap;
    }
    interface Params$Resource$Urlmaps$Invalidatecache extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the UrlMap scoping this request.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$CacheInvalidationRule;
    }
    interface Params$Resource$Urlmaps$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Urlmaps$Patch extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the UrlMap resource to patch.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMap;
    }
    interface Params$Resource$Urlmaps$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    interface Params$Resource$Urlmaps$Update extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the UrlMap resource to update.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMap;
    }
    interface Params$Resource$Urlmaps$Validate extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the UrlMap resource to be validated as.
         */
        urlMap?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$UrlMapsValidateRequest;
    }
    class Resource$Vpngateways {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.vpnGateways.aggregatedList
         * @desc Retrieves an aggregated list of VPN gateways.
         * @alias compute.vpnGateways.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Vpngateways$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$VpnGatewayAggregatedList>;
        aggregatedList(params: Params$Resource$Vpngateways$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$VpnGatewayAggregatedList>, callback: BodyResponseCallback<Schema$VpnGatewayAggregatedList>): void;
        aggregatedList(params: Params$Resource$Vpngateways$Aggregatedlist, callback: BodyResponseCallback<Schema$VpnGatewayAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$VpnGatewayAggregatedList>): void;
        /**
         * compute.vpnGateways.delete
         * @desc Deletes the specified VPN gateway.
         * @alias compute.vpnGateways.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.vpnGateway Name of the VPN gateway to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Vpngateways$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Vpngateways$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Vpngateways$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.vpnGateways.get
         * @desc Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.
         * @alias compute.vpnGateways.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.vpnGateway Name of the VPN gateway to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Vpngateways$Get, options?: MethodOptions): GaxiosPromise<Schema$VpnGateway>;
        get(params: Params$Resource$Vpngateways$Get, options: MethodOptions | BodyResponseCallback<Schema$VpnGateway>, callback: BodyResponseCallback<Schema$VpnGateway>): void;
        get(params: Params$Resource$Vpngateways$Get, callback: BodyResponseCallback<Schema$VpnGateway>): void;
        get(callback: BodyResponseCallback<Schema$VpnGateway>): void;
        /**
         * compute.vpnGateways.getStatus
         * @desc Returns the status for the specified VPN gateway.
         * @alias compute.vpnGateways.getStatus
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.vpnGateway Name of the VPN gateway to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getStatus(params?: Params$Resource$Vpngateways$Getstatus, options?: MethodOptions): GaxiosPromise<Schema$VpnGatewaysGetStatusResponse>;
        getStatus(params: Params$Resource$Vpngateways$Getstatus, options: MethodOptions | BodyResponseCallback<Schema$VpnGatewaysGetStatusResponse>, callback: BodyResponseCallback<Schema$VpnGatewaysGetStatusResponse>): void;
        getStatus(params: Params$Resource$Vpngateways$Getstatus, callback: BodyResponseCallback<Schema$VpnGatewaysGetStatusResponse>): void;
        getStatus(callback: BodyResponseCallback<Schema$VpnGatewaysGetStatusResponse>): void;
        /**
         * compute.vpnGateways.insert
         * @desc Creates a VPN gateway in the specified project and region using the data included in the request.
         * @alias compute.vpnGateways.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().VpnGateway} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Vpngateways$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Vpngateways$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Vpngateways$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.vpnGateways.list
         * @desc Retrieves a list of VPN gateways available to the specified project and region.
         * @alias compute.vpnGateways.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Vpngateways$List, options?: MethodOptions): GaxiosPromise<Schema$VpnGatewayList>;
        list(params: Params$Resource$Vpngateways$List, options: MethodOptions | BodyResponseCallback<Schema$VpnGatewayList>, callback: BodyResponseCallback<Schema$VpnGatewayList>): void;
        list(params: Params$Resource$Vpngateways$List, callback: BodyResponseCallback<Schema$VpnGatewayList>): void;
        list(callback: BodyResponseCallback<Schema$VpnGatewayList>): void;
        /**
         * compute.vpnGateways.setLabels
         * @desc Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.vpnGateways.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Vpngateways$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Vpngateways$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Vpngateways$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.vpnGateways.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.vpnGateways.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Vpngateways$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Vpngateways$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Vpngateways$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Vpngateways$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Vpngateways$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the VPN gateway to delete.
         */
        vpnGateway?: string;
    }
    interface Params$Resource$Vpngateways$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the VPN gateway to return.
         */
        vpnGateway?: string;
    }
    interface Params$Resource$Vpngateways$Getstatus extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the VPN gateway to return.
         */
        vpnGateway?: string;
    }
    interface Params$Resource$Vpngateways$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$VpnGateway;
    }
    interface Params$Resource$Vpngateways$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Vpngateways$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetLabelsRequest;
    }
    interface Params$Resource$Vpngateways$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Vpntunnels {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.vpnTunnels.aggregatedList
         * @desc Retrieves an aggregated list of VPN tunnels.
         * @alias compute.vpnTunnels.aggregatedList
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        aggregatedList(params?: Params$Resource$Vpntunnels$Aggregatedlist, options?: MethodOptions): GaxiosPromise<Schema$VpnTunnelAggregatedList>;
        aggregatedList(params: Params$Resource$Vpntunnels$Aggregatedlist, options: MethodOptions | BodyResponseCallback<Schema$VpnTunnelAggregatedList>, callback: BodyResponseCallback<Schema$VpnTunnelAggregatedList>): void;
        aggregatedList(params: Params$Resource$Vpntunnels$Aggregatedlist, callback: BodyResponseCallback<Schema$VpnTunnelAggregatedList>): void;
        aggregatedList(callback: BodyResponseCallback<Schema$VpnTunnelAggregatedList>): void;
        /**
         * compute.vpnTunnels.delete
         * @desc Deletes the specified VpnTunnel resource.
         * @alias compute.vpnTunnels.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.vpnTunnel Name of the VpnTunnel resource to delete.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Vpntunnels$Delete, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        delete(params: Params$Resource$Vpntunnels$Delete, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(params: Params$Resource$Vpntunnels$Delete, callback: BodyResponseCallback<Schema$Operation>): void;
        delete(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.vpnTunnels.get
         * @desc Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.
         * @alias compute.vpnTunnels.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string} params.vpnTunnel Name of the VpnTunnel resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Vpntunnels$Get, options?: MethodOptions): GaxiosPromise<Schema$VpnTunnel>;
        get(params: Params$Resource$Vpntunnels$Get, options: MethodOptions | BodyResponseCallback<Schema$VpnTunnel>, callback: BodyResponseCallback<Schema$VpnTunnel>): void;
        get(params: Params$Resource$Vpntunnels$Get, callback: BodyResponseCallback<Schema$VpnTunnel>): void;
        get(callback: BodyResponseCallback<Schema$VpnTunnel>): void;
        /**
         * compute.vpnTunnels.insert
         * @desc Creates a VpnTunnel resource in the specified project and region using the data included in the request.
         * @alias compute.vpnTunnels.insert
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {().VpnTunnel} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        insert(params?: Params$Resource$Vpntunnels$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Vpntunnels$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Vpntunnels$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.vpnTunnels.list
         * @desc Retrieves a list of VpnTunnel resources contained in the specified project and region.
         * @alias compute.vpnTunnels.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region Name of the region for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Vpntunnels$List, options?: MethodOptions): GaxiosPromise<Schema$VpnTunnelList>;
        list(params: Params$Resource$Vpntunnels$List, options: MethodOptions | BodyResponseCallback<Schema$VpnTunnelList>, callback: BodyResponseCallback<Schema$VpnTunnelList>): void;
        list(params: Params$Resource$Vpntunnels$List, callback: BodyResponseCallback<Schema$VpnTunnelList>): void;
        list(callback: BodyResponseCallback<Schema$VpnTunnelList>): void;
        /**
         * compute.vpnTunnels.setLabels
         * @desc Sets the labels on a VpnTunnel. To learn more about labels, read the Labeling Resources documentation.
         * @alias compute.vpnTunnels.setLabels
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The region for this request.
         * @param {string=} params.requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().RegionSetLabelsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        setLabels(params?: Params$Resource$Vpntunnels$Setlabels, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        setLabels(params: Params$Resource$Vpntunnels$Setlabels, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(params: Params$Resource$Vpntunnels$Setlabels, callback: BodyResponseCallback<Schema$Operation>): void;
        setLabels(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.vpnTunnels.testIamPermissions
         * @desc Returns permissions that a caller has on the specified resource.
         * @alias compute.vpnTunnels.testIamPermissions
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.region The name of the region for this request.
         * @param {string} params.resource_ Name or id of the resource for this request.
         * @param {().TestPermissionsRequest} params.resource Request body data
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        testIamPermissions(params?: Params$Resource$Vpntunnels$Testiampermissions, options?: MethodOptions): GaxiosPromise<Schema$TestPermissionsResponse>;
        testIamPermissions(params: Params$Resource$Vpntunnels$Testiampermissions, options: MethodOptions | BodyResponseCallback<Schema$TestPermissionsResponse>, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(params: Params$Resource$Vpntunnels$Testiampermissions, callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
        testIamPermissions(callback: BodyResponseCallback<Schema$TestPermissionsResponse>): void;
    }
    interface Params$Resource$Vpntunnels$Aggregatedlist extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
    interface Params$Resource$Vpntunnels$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name of the VpnTunnel resource to delete.
         */
        vpnTunnel?: string;
    }
    interface Params$Resource$Vpntunnels$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * Name of the VpnTunnel resource to return.
         */
        vpnTunnel?: string;
    }
    interface Params$Resource$Vpntunnels$Insert extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$VpnTunnel;
    }
    interface Params$Resource$Vpntunnels$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the region for this request.
         */
        region?: string;
    }
    interface Params$Resource$Vpntunnels$Setlabels extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The region for this request.
         */
        region?: string;
        /**
         * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         */
        requestId?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$RegionSetLabelsRequest;
    }
    interface Params$Resource$Vpntunnels$Testiampermissions extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * The name of the region for this request.
         */
        region?: string;
        /**
         * Name or id of the resource for this request.
         */
        resource?: string;
        /**
         * Request body metadata
         */
        requestBody?: Schema$TestPermissionsRequest;
    }
    class Resource$Zoneoperations {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.zoneOperations.delete
         * @desc Deletes the specified zone-specific Operations resource.
         * @alias compute.zoneOperations.delete
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to delete.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        delete(params?: Params$Resource$Zoneoperations$Delete, options?: MethodOptions): GaxiosPromise<void>;
        delete(params: Params$Resource$Zoneoperations$Delete, options: MethodOptions | BodyResponseCallback<void>, callback: BodyResponseCallback<void>): void;
        delete(params: Params$Resource$Zoneoperations$Delete, callback: BodyResponseCallback<void>): void;
        delete(callback: BodyResponseCallback<void>): void;
        /**
         * compute.zoneOperations.get
         * @desc Retrieves the specified zone-specific Operations resource.
         * @alias compute.zoneOperations.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Zoneoperations$Get, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        get(params: Params$Resource$Zoneoperations$Get, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        get(params: Params$Resource$Zoneoperations$Get, callback: BodyResponseCallback<Schema$Operation>): void;
        get(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * compute.zoneOperations.list
         * @desc Retrieves a list of Operation resources contained within the specified zone.
         * @alias compute.zoneOperations.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone for request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Zoneoperations$List, options?: MethodOptions): GaxiosPromise<Schema$OperationList>;
        list(params: Params$Resource$Zoneoperations$List, options: MethodOptions | BodyResponseCallback<Schema$OperationList>, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(params: Params$Resource$Zoneoperations$List, callback: BodyResponseCallback<Schema$OperationList>): void;
        list(callback: BodyResponseCallback<Schema$OperationList>): void;
        /**
         * compute.zoneOperations.wait
         * @desc Waits for the specified zone-specific Operations resource until it is done or timeout, and retrieves the specified Operations resource. 1. Immediately returns when the operation is already done. 2. Waits for no more than the default deadline (2 minutes, subject to change) and then returns the current state of the operation, which may be DONE or still in progress. 3. Is best-effort: a. The server can wait less than the default deadline or zero seconds, in overload situations. b. There is no guarantee that the operation is actually done when returns. 4. User should be prepared to retry if the operation is not DONE.
         * @alias compute.zoneOperations.wait
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.operation Name of the Operations resource to return.
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        wait(params?: Params$Resource$Zoneoperations$Wait, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        wait(params: Params$Resource$Zoneoperations$Wait, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(params: Params$Resource$Zoneoperations$Wait, callback: BodyResponseCallback<Schema$Operation>): void;
        wait(callback: BodyResponseCallback<Schema$Operation>): void;
    }
    interface Params$Resource$Zoneoperations$Delete extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to delete.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Zoneoperations$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    interface Params$Resource$Zoneoperations$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone for request.
         */
        zone?: string;
    }
    interface Params$Resource$Zoneoperations$Wait extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Name of the Operations resource to return.
         */
        operation?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone for this request.
         */
        zone?: string;
    }
    class Resource$Zones {
        context: APIRequestContext;
        constructor(context: APIRequestContext);
        /**
         * compute.zones.get
         * @desc Returns the specified Zone resource. Gets a list of available zones by making a list() request.
         * @alias compute.zones.get
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string} params.project Project ID for this request.
         * @param {string} params.zone Name of the zone resource to return.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        get(params?: Params$Resource$Zones$Get, options?: MethodOptions): GaxiosPromise<Schema$Zone>;
        get(params: Params$Resource$Zones$Get, options: MethodOptions | BodyResponseCallback<Schema$Zone>, callback: BodyResponseCallback<Schema$Zone>): void;
        get(params: Params$Resource$Zones$Get, callback: BodyResponseCallback<Schema$Zone>): void;
        get(callback: BodyResponseCallback<Schema$Zone>): void;
        /**
         * compute.zones.list
         * @desc Retrieves the list of Zone resources available to the specified project.
         * @alias compute.zones.list
         * @memberOf! ()
         *
         * @param {object} params Parameters for request
         * @param {string=} params.filter A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         * @param {string} params.project Project ID for this request.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        list(params?: Params$Resource$Zones$List, options?: MethodOptions): GaxiosPromise<Schema$ZoneList>;
        list(params: Params$Resource$Zones$List, options: MethodOptions | BodyResponseCallback<Schema$ZoneList>, callback: BodyResponseCallback<Schema$ZoneList>): void;
        list(params: Params$Resource$Zones$List, callback: BodyResponseCallback<Schema$ZoneList>): void;
        list(callback: BodyResponseCallback<Schema$ZoneList>): void;
    }
    interface Params$Resource$Zones$Get extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * Project ID for this request.
         */
        project?: string;
        /**
         * Name of the zone resource to return.
         */
        zone?: string;
    }
    interface Params$Resource$Zones$List extends StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;
        /**
         * A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.  For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.  You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
         */
        filter?: string;
        /**
         * The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
         */
        maxResults?: number;
        /**
         * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.
         */
        orderBy?: string;
        /**
         * Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
         */
        pageToken?: string;
        /**
         * Project ID for this request.
         */
        project?: string;
    }
}
