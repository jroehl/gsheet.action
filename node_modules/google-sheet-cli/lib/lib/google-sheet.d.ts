import { sheets_v4 } from 'googleapis';
export declare namespace GoogleSheetCli {
    interface Credentials {
        client_email: string;
        private_key: string;
    }
    type RawData = (string | number | boolean | null)[][];
    enum ValueInputOption {
        USER_ENTERED = "USER_ENTERED",
        RAW = "RAW"
    }
    interface QueryOptions {
        minCol?: number;
        maxCol?: number;
        minRow?: number;
        maxRow?: number;
        range?: string;
        valueInputOption?: ValueInputOption;
        worksheetTitle?: string;
        hasHeaderRow?: boolean;
    }
    interface FormattedData {
        [name: string]: string;
    }
    interface SheetData {
        rawData: RawData;
        formatted: FormattedData[];
        header: string[];
        range: string;
    }
}
/**
 * GoogleSheet helper class for CRUD operations
 *
 * @export
 * @class GoogleSheet
 */
export default class GoogleSheet {
    private spreadsheetId?;
    private worksheetTitle?;
    private sheets;
    /**
     * Creates an instance of GoogleSheet.
     * @param {string} [spreadsheetId]
     * @param {string} [worksheetTitle]
     * @memberof GoogleSheet
     */
    constructor(spreadsheetId?: string | undefined, worksheetTitle?: string | undefined);
    /**
     * Authorize with credentials
     *
     * @param {GoogleSheetCli.Credentials} credentials
     * @returns {Promise<void>}
     * @memberof GoogleSheet
     */
    authorize(credentials: GoogleSheetCli.Credentials): Promise<void>;
    /**
     * Get information about the spreadsheet.
     *
     * @param {string} [spreadsheetId]
     * @returns {Promise<sheets_v4.Schema$Spreadsheet>}
     * @memberof GoogleSheet
     */
    getSpreadsheet(spreadsheetId?: string): Promise<sheets_v4.Schema$Spreadsheet>;
    /**
     * Get information about the worksheet.
     *
     * @param {string} title
     * @param {string} [spreadsheetId]
     * @returns {Promise<sheets_v4.Schema$Sheet>}
     * @memberof GoogleSheet
     */
    getWorksheet(title: string, spreadsheetId?: string): Promise<sheets_v4.Schema$Sheet>;
    /**
     * Get the data of the specified cells (or every available cell data)
     *
     * @param {GoogleSheetCli.QueryOptions} [options={}]
     * @param {string} [spreadsheetId]
     * @returns {Promise<GoogleSheetCli.SheetData>}
     * @memberof GoogleSheet
     */
    getData(options?: GoogleSheetCli.QueryOptions, spreadsheetId?: string): Promise<GoogleSheetCli.SheetData>;
    /**
     * Append row data to a worksheet, starting after the last row in a specific column
     *
     * @param {GoogleSheetCli.RawData} data
     * @param {GoogleSheetCli.QueryOptions} options
     * @param {string} [spreadsheetId]
     * @returns {Promise<void>}
     * @memberof GoogleSheet
     */
    appendData(data: GoogleSheetCli.RawData, options: GoogleSheetCli.QueryOptions, spreadsheetId?: string): Promise<void>;
    /**
     * Update the data starting at a specific row and column
     *
     * @param {GoogleSheetCli.RawData} data [['A1', 'A2', 'A3', 'A4', 'A5'], ['B1', 'B2', 'B3', 'B4', 'B5', 'B6']]
     * @param {GoogleSheetCli.QueryOptions} options
     * @param {string} [spreadsheetId]
     * @returns {Promise<void>}
     * @memberof GoogleSheet
     */
    updateData(data: GoogleSheetCli.RawData, options: GoogleSheetCli.QueryOptions, spreadsheetId?: string): Promise<void>;
    /**
     * Add a worksheet with title
     *
     * @param {string} title
     * @param {string} [spreadsheetId]
     * @returns {Promise<sheets_v4.Schema$Sheet>}
     * @memberof GoogleSheet
     */
    addWorksheet(title: string, spreadsheetId?: string): Promise<sheets_v4.Schema$Sheet>;
    /**
     * Remove a worksheet by title
     *
     * @param {string} title
     * @param {string} [spreadsheetId]
     * @returns {Promise<void>}
     * @memberof GoogleSheet
     */
    removeWorksheet(title: string, spreadsheetId?: string): Promise<void>;
    /**
     * Add a spreadsheet with title
     *
     * @param {string} title
     * @returns {Promise<sheets_v4.Schema$Spreadsheet>}
     * @memberof GoogleSheet
     */
    addSpreadsheet(title: string): Promise<sheets_v4.Schema$Spreadsheet>;
}
