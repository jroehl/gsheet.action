"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = tslib_1.__importStar(require("@oclif/command"));
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const google_sheet_1 = tslib_1.__importStar(require("./google-sheet"));
exports.spreadsheetId = command_1.flags.string({
    char: 's',
    description: 'ID of the spreadsheet to use',
    required: true,
});
exports.worksheetTitle = command_1.flags.string({
    char: 't',
    description: 'Title of the worksheet to use',
    required: true,
});
exports.valueInputOption = command_1.flags.string({
    char: 'v',
    description: 'The style of the input ("RAW" or "USER_ENTERED")',
    required: false,
    default: google_sheet_1.GoogleSheetCli.ValueInputOption.RAW,
});
exports.data = {
    name: 'data',
    type: 'string',
    description: 'The data to be used as a JSON string - nested array [["1", "2", "3"]]',
    required: true,
};
class default_1 extends command_1.default {
    constructor() {
        super(...arguments);
        this.rawLogs = false;
    }
    async start(message) {
        if (!this.rawLogs) {
            cli_ux_1.default.action.start(message);
        }
    }
    async stop(message) {
        if (!this.rawLogs) {
            cli_ux_1.default.action.stop(message);
        }
    }
    async logRaw(message, raw) {
        if (this.rawLogs) {
            this.log(JSON.stringify(raw, null, 2));
        }
        else {
            this.log(message);
        }
    }
    async init() {
        // do some initialization
        const { flags } = this.parse(this.constructor);
        this.rawLogs = flags && flags.rawOutput;
        const { GSHEET_CLIENT_EMAIL = await cli_ux_1.default.prompt('What is your client email?', { type: 'hide' }), GSHEET_PRIVATE_KEY = await cli_ux_1.default.prompt('What is your private key?', { type: 'hide' }), } = process.env;
        const gsheet = new google_sheet_1.default();
        await gsheet.authorize({
            client_email: GSHEET_CLIENT_EMAIL,
            private_key: GSHEET_PRIVATE_KEY,
        });
        this.gsheet = gsheet;
    }
    async catch(err) {
        this.stop('errored');
        this.error(err.message || err);
        process.exit(1);
        // handle any error from the command
    }
    async finally(err) {
        // called after run and catch regardless of whether or not the command errored
    }
}
exports.default = default_1;
default_1.flags = {
    help: command_1.flags.help({ char: 'h' }),
    rawOutput: command_1.flags.boolean({
        char: 'r',
        description: 'Get the raw output as a JSON string',
        default: false,
        required: false,
    }),
};
