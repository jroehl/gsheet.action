"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const base_class_1 = tslib_1.__importStar(require("../../lib/base-class"));
class UpdateData extends base_class_1.default {
    async run() {
        const { args: { data }, flags: { minRow, minCol, worksheetTitle = '', spreadsheetId, valueInputOption }, } = this.parse(UpdateData);
        try {
            this.start('Updating data');
            console.log();
            let parsed = data;
            while (typeof parsed === 'string') {
                parsed = JSON.parse(parsed);
            }
            const options = { worksheetTitle, minCol, minRow, valueInputOption };
            await this.gsheet.updateData(parsed, options, spreadsheetId);
            this.stop();
            this.logRaw(`Data successfully updated in "${worksheetTitle}"`, { operation: this.id, worksheetTitle, data: parsed });
        }
        catch (error) {
            if (error instanceof SyntaxError) {
                throw `"data" input has to be valid JSON (${error.message || error})`;
            }
            throw error.message || error;
        }
    }
}
exports.default = UpdateData;
UpdateData.description = 'Updates cells with the specified data';
UpdateData.examples = [
    `$ gsheet data:update --spreadsheetId=<spreadsheetId> --worksheetTitle=<worksheetTitle> --data='[["1", "2", "3"]]'

Data successfully updated in "<worksheetTitle>"
`,
];
UpdateData.flags = Object.assign(Object.assign({}, base_class_1.default.flags), { worksheetTitle: base_class_1.worksheetTitle,
    spreadsheetId: base_class_1.spreadsheetId,
    valueInputOption: base_class_1.valueInputOption, minRow: command_1.flags.integer({ description: 'The optional starting row of the operation', default: 1, required: false }), minCol: command_1.flags.integer({ description: 'The optional starting col of the operation', default: 1, required: false }) });
UpdateData.args = [base_class_1.data];
